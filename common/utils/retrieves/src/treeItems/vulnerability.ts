/* eslint-disable fp/no-mutation, @typescript-eslint/parameter-properties */
import path from "path";

import type { Command } from "vscode";
import {
  ThemeIcon,
  TreeItem,
  TreeItemCollapsibleState,
  Uri,
  // eslint-disable-next-line import/no-unresolved
} from "vscode";

import type { IVulnerability } from "@retrieves/types";

class VulnerabilityTreeItem extends TreeItem {
  public contextValue = "vulnerability";

  public readonly iconPath = ThemeIcon.File;

  // Need this attribute to let vscode figure out which icon it should give
  public readonly resourceUri = Uri.parse(this.label);

  public constructor(
    public readonly label: string,
    public readonly collapsibleState: TreeItemCollapsibleState,
    public readonly vulnId: string,
    public readonly findingId: string,
    public readonly where: string,
    public readonly specific: string,
    public readonly rootPath: string,
    public readonly command?: Command
  ) {
    super(label, collapsibleState);
    this.tooltip = `${path.parse(this.label).base}: ${this.specific}`;

    // This assumes that the end of the root path and the start of the vuln where match
    const fullPath = path.join(this.rootPath, "..", this.where);
    /*
     * This should show:
     * vuln is in the root folder? <Nothing>
     * vuln is in root/subfolder? subfolder
     * vuln is in root/subfolder/another_subfolder? subfolder/another_subfolder
     * and so on and so forth
     */
    this.description = path.parse(path.relative(this.rootPath, fullPath)).dir;
  }
}

const toVulnerability = (
  rootPath: string,
  vuln: IVulnerability
): VulnerabilityTreeItem => {
  return new VulnerabilityTreeItem(
    path.parse(vuln.where).base,
    TreeItemCollapsibleState.None,
    vuln.finding.id,
    vuln.id,
    vuln.where,
    vuln.specific,
    rootPath
  );
};

export { toVulnerability, VulnerabilityTreeItem };
