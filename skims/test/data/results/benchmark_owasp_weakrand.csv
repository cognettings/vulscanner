title,cwe,description,cvss,finding,stream,kind,where,snippet,method
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00023.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
  73 |    response.getWriter().println(
  74 |    ""Welcome back: "" + user + ""<br/>""
  75 |    );
  76 |   } else {
  77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  78 |    rememberMe.setSecure(true);
  79 |    rememberMe.setHttpOnly(true);
  80 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  84 |    response.addCookie(rememberMe);
  85 |    response.getWriter().println(
  86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  88 |    );
  89 |
  90 |   }
  91 |
  92 |   response.getWriter().println(
  93 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
     ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00066.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,108,"
   98 |     ""Welcome back: "" + user + ""<br/>""
   99 |    );
  100 |
  101 |   } else {
  102 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  103 |    rememberMe.setSecure(true);
  104 |    rememberMe.setHttpOnly(true);
  105 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  106 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  107 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
> 108 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  109 |    response.addCookie(rememberMe);
  110 |    response.getWriter().println(
  111 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  112 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  113 |    );
  114 |   }
  115 |   response.getWriter().println(
  116 |   ""Weak Randomness Test java.lang.Math.random() executed""
  117 |   );
  118 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00067.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,116,"
  106 |     ""Welcome back: "" + user + ""<br/>""
  107 |    );
  108 |
  109 |   } else {
  110 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  111 |    rememberMe.setSecure(true);
  112 |    rememberMe.setHttpOnly(true);
  113 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  114 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  115 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
> 116 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  117 |    response.addCookie(rememberMe);
  118 |    response.getWriter().println(
  119 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  120 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  121 |    );
  122 |   }
  123 |   response.getWriter().println(
  124 |   ""Weak Randomness Test java.lang.Math.random() executed""
  125 |   );
  126 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00068.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,108,"
   98 |     ""Welcome back: "" + user + ""<br/>""
   99 |    );
  100 |
  101 |   } else {
  102 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  103 |    rememberMe.setSecure(true);
  104 |    rememberMe.setHttpOnly(true);
  105 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  106 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  107 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
> 108 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  109 |    response.addCookie(rememberMe);
  110 |    response.getWriter().println(
  111 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  112 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  113 |    );
  114 |   }
  115 |   response.getWriter().println(
  116 |   ""Weak Randomness Test java.lang.Math.random() executed""
  117 |   );
  118 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00078.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,105,"
   95 |    response.getWriter().println(
   96 |    ""Welcome back: "" + user + ""<br/>""
   97 |    );
   98 |   } else {
   99 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  100 |    rememberMe.setSecure(true);
  101 |    rememberMe.setHttpOnly(true);
  102 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  103 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  104 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 105 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  106 |    response.addCookie(rememberMe);
  107 |    response.getWriter().println(
  108 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  109 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  110 |    );
  111 |
  112 |   }
  113 |
  114 |   response.getWriter().println(
  115 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00079.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,106,"
   96 |    response.getWriter().println(
   97 |    ""Welcome back: "" + user + ""<br/>""
   98 |    );
   99 |   } else {
  100 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  101 |    rememberMe.setSecure(true);
  102 |    rememberMe.setHttpOnly(true);
  103 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  104 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  105 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 106 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  107 |    response.addCookie(rememberMe);
  108 |    response.getWriter().println(
  109 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  110 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  111 |    );
  112 |
  113 |   }
  114 |
  115 |   response.getWriter().println(
  116 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00080.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,101,"
   91 |    response.getWriter().println(
   92 |    ""Welcome back: "" + user + ""<br/>""
   93 |    );
   94 |   } else {
   95 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   96 |    rememberMe.setSecure(true);
   97 |    rememberMe.setHttpOnly(true);
   98 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   99 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  100 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 101 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  102 |    response.addCookie(rememberMe);
  103 |    response.getWriter().println(
  104 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  105 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  106 |    );
  107 |
  108 |   }
  109 |
  110 |   response.getWriter().println(
  111 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00081.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,100,"
   90 |   if (foundUser) {
   91 |    response.getWriter().println(
   92 |    ""Welcome back: "" + user + ""<br/>""
   93 |    );
   94 |   } else {
   95 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   96 |    rememberMe.setSecure(true);
   97 |    rememberMe.setHttpOnly(true);
   98 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   99 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 100 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  101 |    response.addCookie(rememberMe);
  102 |    response.getWriter().println(
  103 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  104 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  105 |    );
  106 |   }
  107 |
  108 |   response.getWriter().println(
  109 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  110 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00082.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,101,"
   91 |   if (foundUser) {
   92 |    response.getWriter().println(
   93 |    ""Welcome back: "" + user + ""<br/>""
   94 |    );
   95 |   } else {
   96 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   97 |    rememberMe.setSecure(true);
   98 |    rememberMe.setHttpOnly(true);
   99 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  100 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 101 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  102 |    response.addCookie(rememberMe);
  103 |    response.getWriter().println(
  104 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  105 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  106 |    );
  107 |   }
  108 |
  109 |   response.getWriter().println(
  110 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  111 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00083.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,106,"
   96 |   if (foundUser) {
   97 |    response.getWriter().println(
   98 |    ""Welcome back: "" + user + ""<br/>""
   99 |    );
  100 |   } else {
  101 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  102 |    rememberMe.setSecure(true);
  103 |    rememberMe.setHttpOnly(true);
  104 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  105 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 106 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  107 |    response.addCookie(rememberMe);
  108 |    response.getWriter().println(
  109 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  110 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  111 |    );
  112 |   }
  113 |
  114 |   response.getWriter().println(
  115 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  116 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00084.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,101,"
   91 |   if (foundUser) {
   92 |    response.getWriter().println(
   93 |    ""Welcome back: "" + user + ""<br/>""
   94 |    );
   95 |   } else {
   96 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   97 |    rememberMe.setSecure(true);
   98 |    rememberMe.setHttpOnly(true);
   99 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  100 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 101 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  102 |    response.addCookie(rememberMe);
  103 |    response.getWriter().println(
  104 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  105 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  106 |    );
  107 |   }
  108 |
  109 |   response.getWriter().println(
  110 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  111 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00085.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,106,"
   96 |    response.getWriter().println(
   97 |    ""Welcome back: "" + user + ""<br/>""
   98 |    );
   99 |
  100 |   } else {
  101 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  102 |    rememberMe.setSecure(true);
  103 |    rememberMe.setHttpOnly(true);
  104 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  105 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 106 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  107 |    response.addCookie(rememberMe);
  108 |    response.getWriter().println(
  109 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  110 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  111 |    );
  112 |   }
  113 |
  114 |   response.getWriter().println(
  115 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  116 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00086.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,107,"
   97 |    response.getWriter().println(
   98 |    ""Welcome back: "" + user + ""<br/>""
   99 |    );
  100 |
  101 |   } else {
  102 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  103 |    rememberMe.setSecure(true);
  104 |    rememberMe.setHttpOnly(true);
  105 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  106 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 107 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  108 |    response.addCookie(rememberMe);
  109 |    response.getWriter().println(
  110 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  111 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  112 |    );
  113 |   }
  114 |
  115 |   response.getWriter().println(
  116 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  117 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00140.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,100,"
   90 |     ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   98 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   99 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
> 100 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  101 |    response.addCookie(rememberMe);
  102 |    response.getWriter().println(
  103 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  104 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  105 |    );
  106 |   }
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.lang.Math.random() executed""
  109 |   );
  110 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00161.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |    response.getWriter().println(
   86 |    ""Welcome back: "" + user + ""<br/>""
   87 |    );
   88 |   } else {
   89 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   90 |    rememberMe.setSecure(true);
   91 |    rememberMe.setHttpOnly(true);
   92 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00162.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |   if (foundUser) {
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |   } else {
   83 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   84 |    rememberMe.setSecure(true);
   85 |    rememberMe.setHttpOnly(true);
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   98 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00163.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,89,"
   79 |   if (foundUser) {
   80 |    response.getWriter().println(
   81 |    ""Welcome back: "" + user + ""<br/>""
   82 |    );
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   88 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  89 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   90 |    response.addCookie(rememberMe);
   91 |    response.getWriter().println(
   92 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   93 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   94 |    );
   95 |   }
   96 |
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   99 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00164.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,94,"
   84 |   if (foundUser) {
   85 |    response.getWriter().println(
   86 |    ""Welcome back: "" + user + ""<br/>""
   87 |    );
   88 |   } else {
   89 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   90 |    rememberMe.setSecure(true);
   91 |    rememberMe.setHttpOnly(true);
   92 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   93 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  94 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   95 |    response.addCookie(rememberMe);
   96 |    response.getWriter().println(
   97 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   98 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   99 |    );
  100 |   }
  101 |
  102 |   response.getWriter().println(
  103 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  104 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00165.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,91,"
   81 |   if (foundUser) {
   82 |    response.getWriter().println(
   83 |    ""Welcome back: "" + user + ""<br/>""
   84 |    );
   85 |   } else {
   86 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   87 |    rememberMe.setSecure(true);
   88 |    rememberMe.setHttpOnly(true);
   89 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   90 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  91 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   92 |    response.addCookie(rememberMe);
   93 |    response.getWriter().println(
   94 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   95 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   96 |    );
   97 |   }
   98 |
   99 |   response.getWriter().println(
  100 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  101 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00166.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,89,"
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   88 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  89 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   90 |    response.addCookie(rememberMe);
   91 |    response.getWriter().println(
   92 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   93 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   94 |    );
   95 |   }
   96 |
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   99 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00167.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,93,"
   83 |    response.getWriter().println(
   84 |    ""Welcome back: "" + user + ""<br/>""
   85 |    );
   86 |
   87 |   } else {
   88 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   89 |    rememberMe.setSecure(true);
   90 |    rememberMe.setHttpOnly(true);
   91 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   92 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  93 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   94 |    response.addCookie(rememberMe);
   95 |    response.getWriter().println(
   96 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   97 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   98 |    );
   99 |   }
  100 |
  101 |   response.getWriter().println(
  102 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  103 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00168.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |    response.getWriter().println(
   86 |    ""Welcome back: "" + user + ""<br/>""
   87 |    );
   88 |
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00231.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,102,"
   92 |   if (foundUser) {
   93 |    response.getWriter().println(
   94 |    ""Welcome back: "" + user + ""<br/>""
   95 |    );
   96 |   } else {
   97 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   98 |    rememberMe.setSecure(true);
   99 |    rememberMe.setHttpOnly(true);
  100 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  101 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 102 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  103 |    response.addCookie(rememberMe);
  104 |    response.getWriter().println(
  105 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  106 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  107 |    );
  108 |   }
  109 |
  110 |   response.getWriter().println(
  111 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  112 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00232.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,103,"
   93 |   if (foundUser) {
   94 |    response.getWriter().println(
   95 |    ""Welcome back: "" + user + ""<br/>""
   96 |    );
   97 |   } else {
   98 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   99 |    rememberMe.setSecure(true);
  100 |    rememberMe.setHttpOnly(true);
  101 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  102 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 103 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  104 |    response.addCookie(rememberMe);
  105 |    response.getWriter().println(
  106 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  107 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  108 |    );
  109 |   }
  110 |
  111 |   response.getWriter().println(
  112 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  113 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00233.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,98,"
   88 |   if (foundUser) {
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |   } else {
   93 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   94 |    rememberMe.setSecure(true);
   95 |    rememberMe.setHttpOnly(true);
   96 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   97 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  98 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   99 |    response.addCookie(rememberMe);
  100 |    response.getWriter().println(
  101 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  102 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  103 |    );
  104 |   }
  105 |
  106 |   response.getWriter().println(
  107 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  108 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00234.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,103,"
   93 |   if (foundUser) {
   94 |    response.getWriter().println(
   95 |    ""Welcome back: "" + user + ""<br/>""
   96 |    );
   97 |   } else {
   98 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   99 |    rememberMe.setSecure(true);
  100 |    rememberMe.setHttpOnly(true);
  101 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  102 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 103 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  104 |    response.addCookie(rememberMe);
  105 |    response.getWriter().println(
  106 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  107 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  108 |    );
  109 |   }
  110 |
  111 |   response.getWriter().println(
  112 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  113 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00235.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,98,"
   88 |   if (foundUser) {
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |   } else {
   93 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   94 |    rememberMe.setSecure(true);
   95 |    rememberMe.setHttpOnly(true);
   96 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   97 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  98 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   99 |    response.addCookie(rememberMe);
  100 |    response.getWriter().println(
  101 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  102 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  103 |    );
  104 |   }
  105 |
  106 |   response.getWriter().println(
  107 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  108 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00236.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,103,"
   93 |   if (foundUser) {
   94 |    response.getWriter().println(
   95 |    ""Welcome back: "" + user + ""<br/>""
   96 |    );
   97 |   } else {
   98 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   99 |    rememberMe.setSecure(true);
  100 |    rememberMe.setHttpOnly(true);
  101 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  102 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 103 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  104 |    response.addCookie(rememberMe);
  105 |    response.getWriter().println(
  106 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  107 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  108 |    );
  109 |   }
  110 |
  111 |   response.getWriter().println(
  112 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  113 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00237.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,116,"
  106 |   if (foundUser) {
  107 |    response.getWriter().println(
  108 |    ""Welcome back: "" + user + ""<br/>""
  109 |    );
  110 |   } else {
  111 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  112 |    rememberMe.setSecure(true);
  113 |    rememberMe.setHttpOnly(true);
  114 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  115 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 116 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  117 |    response.addCookie(rememberMe);
  118 |    response.getWriter().println(
  119 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  120 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  121 |    );
  122 |   }
  123 |
  124 |   response.getWriter().println(
  125 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  126 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00238.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,102,"
   92 |    response.getWriter().println(
   93 |    ""Welcome back: "" + user + ""<br/>""
   94 |    );
   95 |
   96 |   } else {
   97 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   98 |    rememberMe.setSecure(true);
   99 |    rememberMe.setHttpOnly(true);
  100 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  101 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 102 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  103 |    response.addCookie(rememberMe);
  104 |    response.getWriter().println(
  105 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  106 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  107 |    );
  108 |   }
  109 |
  110 |   response.getWriter().println(
  111 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  112 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00239.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,111,"
  101 |    response.getWriter().println(
  102 |    ""Welcome back: "" + user + ""<br/>""
  103 |    );
  104 |
  105 |   } else {
  106 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  107 |    rememberMe.setSecure(true);
  108 |    rememberMe.setHttpOnly(true);
  109 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  110 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 111 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  112 |    response.addCookie(rememberMe);
  113 |    response.getWriter().println(
  114 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  115 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  116 |    );
  117 |   }
  118 |
  119 |   response.getWriter().println(
  120 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  121 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00240.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00296.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |   if (foundUser) {
   87 |    response.getWriter().println(
   88 |    ""Welcome back: "" + user + ""<br/>""
   89 |    );
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00297.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,91,"
   81 |   if (foundUser) {
   82 |    response.getWriter().println(
   83 |    ""Welcome back: "" + user + ""<br/>""
   84 |    );
   85 |   } else {
   86 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   87 |    rememberMe.setSecure(true);
   88 |    rememberMe.setHttpOnly(true);
   89 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   90 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  91 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   92 |    response.addCookie(rememberMe);
   93 |    response.getWriter().println(
   94 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   95 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   96 |    );
   97 |   }
   98 |
   99 |   response.getWriter().println(
  100 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  101 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00298.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |   if (foundUser) {
   87 |    response.getWriter().println(
   88 |    ""Welcome back: "" + user + ""<br/>""
   89 |    );
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00299.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,97,"
   87 |    response.getWriter().println(
   88 |    ""Welcome back: "" + user + ""<br/>""
   89 |    );
   90 |
   91 |   } else {
   92 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   93 |    rememberMe.setSecure(true);
   94 |    rememberMe.setHttpOnly(true);
   95 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   96 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  97 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   98 |    response.addCookie(rememberMe);
   99 |    response.getWriter().println(
  100 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  101 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  102 |    );
  103 |   }
  104 |
  105 |   response.getWriter().println(
  106 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  107 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00347.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
  73 |    response.getWriter().println(
  74 |    ""Welcome back: "" + user + ""<br/>""
  75 |    );
  76 |
  77 |   } else {
  78 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  79 |    rememberMe.setSecure(true);
  80 |    rememberMe.setHttpOnly(true);
  81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  84 |    response.addCookie(rememberMe);
  85 |    response.getWriter().println(
  86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  88 |    );
  89 |   }
  90 |
  91 |   response.getWriter().println(
  92 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  93 |   );
     ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00368.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,85,"
  75 |     ""Welcome back: "" + user + ""<br/>""
  76 |    );
  77 |
  78 |   } else {
  79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  80 |    rememberMe.setSecure(true);
  81 |    rememberMe.setHttpOnly(true);
  82 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  83 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  84 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
> 85 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  86 |    response.addCookie(rememberMe);
  87 |    response.getWriter().println(
  88 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  89 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  90 |    );
  91 |   }
  92 |   response.getWriter().println(
  93 |   ""Weak Randomness Test java.lang.Math.random() executed""
  94 |   );
  95 |
     ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00369.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |     ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |
   81 |   } else {
   82 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   83 |    rememberMe.setSecure(true);
   84 |    rememberMe.setHttpOnly(true);
   85 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.lang.Math.random() executed""
   97 |   );
   98 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00398.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,90,"
   80 |    response.getWriter().println(
   81 |    ""Welcome back: "" + user + ""<br/>""
   82 |    );
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   88 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   89 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  90 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   91 |    response.addCookie(rememberMe);
   92 |    response.getWriter().println(
   93 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   94 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   95 |    );
   96 |   }
   97 |
   98 |   response.getWriter().println(
   99 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  100 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00399.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,98,"
   88 |    response.getWriter().println(
   89 |    ""Welcome back: "" + user + ""<br/>""
   90 |    );
   91 |   } else {
   92 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   93 |    rememberMe.setSecure(true);
   94 |    rememberMe.setHttpOnly(true);
   95 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   96 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   97 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  98 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   99 |    response.addCookie(rememberMe);
  100 |    response.getWriter().println(
  101 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  102 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  103 |    );
  104 |   }
  105 |
  106 |   response.getWriter().println(
  107 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  108 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00400.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,103,"
   93 |    response.getWriter().println(
   94 |    ""Welcome back: "" + user + ""<br/>""
   95 |    );
   96 |   } else {
   97 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   98 |    rememberMe.setSecure(true);
   99 |    rememberMe.setHttpOnly(true);
  100 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  101 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  102 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 103 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  104 |    response.addCookie(rememberMe);
  105 |    response.getWriter().println(
  106 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  107 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  108 |    );
  109 |
  110 |   }
  111 |
  112 |   response.getWriter().println(
  113 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00401.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |   if (foundUser) {
   78 |    response.getWriter().println(
   79 |    ""Welcome back: "" + user + ""<br/>""
   80 |    );
   81 |   } else {
   82 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   83 |    rememberMe.setSecure(true);
   84 |    rememberMe.setHttpOnly(true);
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |   }
   94 |
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
   97 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00402.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |   if (foundUser) {
   78 |    response.getWriter().println(
   79 |    ""Welcome back: "" + user + ""<br/>""
   80 |    );
   81 |   } else {
   82 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   83 |    rememberMe.setSecure(true);
   84 |    rememberMe.setHttpOnly(true);
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |   }
   94 |
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   97 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00461.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,90,"
   80 |     ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   88 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   89 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  90 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   91 |    response.addCookie(rememberMe);
   92 |    response.getWriter().println(
   93 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   94 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   95 |    );
   96 |   }
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.lang.Math.random() executed""
   99 |   );
  100 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00484.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |    response.getWriter().println(
   86 |    ""Welcome back: "" + user + ""<br/>""
   87 |    );
   88 |   } else {
   89 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   90 |    rememberMe.setSecure(true);
   91 |    rememberMe.setHttpOnly(true);
   92 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00485.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,89,"
   79 |   if (foundUser) {
   80 |    response.getWriter().println(
   81 |    ""Welcome back: "" + user + ""<br/>""
   82 |    );
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   88 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  89 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   90 |    response.addCookie(rememberMe);
   91 |    response.getWriter().println(
   92 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   93 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   94 |    );
   95 |   }
   96 |
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
   99 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00486.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |   if (foundUser) {
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |   } else {
   83 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   84 |    rememberMe.setSecure(true);
   85 |    rememberMe.setHttpOnly(true);
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   98 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00487.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,93,"
   83 |   if (foundUser) {
   84 |    response.getWriter().println(
   85 |    ""Welcome back: "" + user + ""<br/>""
   86 |    );
   87 |   } else {
   88 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   89 |    rememberMe.setSecure(true);
   90 |    rememberMe.setHttpOnly(true);
   91 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   92 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  93 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   94 |    response.addCookie(rememberMe);
   95 |    response.getWriter().println(
   96 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   97 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   98 |    );
   99 |   }
  100 |
  101 |   response.getWriter().println(
  102 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  103 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00488.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00489.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,94,"
   84 |    response.getWriter().println(
   85 |    ""Welcome back: "" + user + ""<br/>""
   86 |    );
   87 |
   88 |   } else {
   89 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   90 |    rememberMe.setSecure(true);
   91 |    rememberMe.setHttpOnly(true);
   92 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   93 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  94 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   95 |    response.addCookie(rememberMe);
   96 |    response.getWriter().println(
   97 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   98 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   99 |    );
  100 |   }
  101 |
  102 |   response.getWriter().println(
  103 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  104 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00490.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00560.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,104,"
   94 |    response.getWriter().println(
   95 |    ""Welcome back: "" + user + ""<br/>""
   96 |    );
   97 |   } else {
   98 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   99 |    rememberMe.setSecure(true);
  100 |    rememberMe.setHttpOnly(true);
  101 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  102 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  103 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 104 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  105 |    response.addCookie(rememberMe);
  106 |    response.getWriter().println(
  107 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  108 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  109 |    );
  110 |   }
  111 |
  112 |   response.getWriter().println(
  113 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  114 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00561.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,108,"
   98 |    response.getWriter().println(
   99 |    ""Welcome back: "" + user + ""<br/>""
  100 |    );
  101 |   } else {
  102 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  103 |    rememberMe.setSecure(true);
  104 |    rememberMe.setHttpOnly(true);
  105 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  106 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  107 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 108 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  109 |    response.addCookie(rememberMe);
  110 |    response.getWriter().println(
  111 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  112 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  113 |    );
  114 |
  115 |   }
  116 |
  117 |   response.getWriter().println(
  118 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00562.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,117,"
  107 |    response.getWriter().println(
  108 |    ""Welcome back: "" + user + ""<br/>""
  109 |    );
  110 |   } else {
  111 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  112 |    rememberMe.setSecure(true);
  113 |    rememberMe.setHttpOnly(true);
  114 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  115 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  116 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 117 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  118 |    response.addCookie(rememberMe);
  119 |    response.getWriter().println(
  120 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  121 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  122 |    );
  123 |
  124 |   }
  125 |
  126 |   response.getWriter().println(
  127 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00563.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,97,"
   87 |   if (foundUser) {
   88 |    response.getWriter().println(
   89 |    ""Welcome back: "" + user + ""<br/>""
   90 |    );
   91 |   } else {
   92 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   93 |    rememberMe.setSecure(true);
   94 |    rememberMe.setHttpOnly(true);
   95 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   96 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  97 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   98 |    response.addCookie(rememberMe);
   99 |    response.getWriter().println(
  100 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  101 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  102 |    );
  103 |   }
  104 |
  105 |   response.getWriter().println(
  106 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  107 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00564.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00653.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,90,"
   80 |   if (foundUser) {
   81 |    response.getWriter().println(
   82 |    ""Welcome back: "" + user + ""<br/>""
   83 |    );
   84 |   } else {
   85 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   86 |    rememberMe.setSecure(true);
   87 |    rememberMe.setHttpOnly(true);
   88 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   89 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  90 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   91 |    response.addCookie(rememberMe);
   92 |    response.getWriter().println(
   93 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   94 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   95 |    );
   96 |   }
   97 |
   98 |   response.getWriter().println(
   99 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  100 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00654.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |    response.getWriter().println(
   86 |    ""Welcome back: "" + user + ""<br/>""
   87 |    );
   88 |
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00702.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,92,"
   82 |     ""Welcome back: "" + user + ""<br/>""
   83 |    );
   84 |
   85 |   } else {
   86 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   87 |    rememberMe.setSecure(true);
   88 |    rememberMe.setHttpOnly(true);
   89 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   90 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   91 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  92 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   93 |    response.addCookie(rememberMe);
   94 |    response.getWriter().println(
   95 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   96 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   97 |    );
   98 |   }
   99 |   response.getWriter().println(
  100 |   ""Weak Randomness Test java.lang.Math.random() executed""
  101 |   );
  102 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00733.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |    response.getWriter().println(
   79 |    ""Welcome back: "" + user + ""<br/>""
   80 |    );
   81 |   } else {
   82 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   83 |    rememberMe.setSecure(true);
   84 |    rememberMe.setHttpOnly(true);
   85 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   98 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00734.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,105,"
   95 |   if (foundUser) {
   96 |    response.getWriter().println(
   97 |    ""Welcome back: "" + user + ""<br/>""
   98 |    );
   99 |   } else {
  100 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  101 |    rememberMe.setSecure(true);
  102 |    rememberMe.setHttpOnly(true);
  103 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  104 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 105 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  106 |    response.addCookie(rememberMe);
  107 |    response.getWriter().println(
  108 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  109 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  110 |    );
  111 |   }
  112 |
  113 |   response.getWriter().println(
  114 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  115 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00735.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,97,"
   87 |    response.getWriter().println(
   88 |    ""Welcome back: "" + user + ""<br/>""
   89 |    );
   90 |
   91 |   } else {
   92 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   93 |    rememberMe.setSecure(true);
   94 |    rememberMe.setHttpOnly(true);
   95 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   96 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  97 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   98 |    response.addCookie(rememberMe);
   99 |    response.getWriter().println(
  100 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  101 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  102 |    );
  103 |   }
  104 |
  105 |   response.getWriter().println(
  106 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  107 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00817.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,111,"
  101 |    response.getWriter().println(
  102 |    ""Welcome back: "" + user + ""<br/>""
  103 |    );
  104 |   } else {
  105 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  106 |    rememberMe.setSecure(true);
  107 |    rememberMe.setHttpOnly(true);
  108 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  109 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  110 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 111 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  112 |    response.addCookie(rememberMe);
  113 |    response.getWriter().println(
  114 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  115 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  116 |    );
  117 |   }
  118 |
  119 |   response.getWriter().println(
  120 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  121 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00818.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,101,"
   91 |    response.getWriter().println(
   92 |    ""Welcome back: "" + user + ""<br/>""
   93 |    );
   94 |   } else {
   95 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   96 |    rememberMe.setSecure(true);
   97 |    rememberMe.setHttpOnly(true);
   98 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   99 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  100 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 101 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  102 |    response.addCookie(rememberMe);
  103 |    response.getWriter().println(
  104 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  105 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  106 |    );
  107 |
  108 |   }
  109 |
  110 |   response.getWriter().println(
  111 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00819.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,104,"
   94 |    response.getWriter().println(
   95 |    ""Welcome back: "" + user + ""<br/>""
   96 |    );
   97 |
   98 |   } else {
   99 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
  100 |    rememberMe.setSecure(true);
  101 |    rememberMe.setHttpOnly(true);
  102 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  103 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 104 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  105 |    response.addCookie(rememberMe);
  106 |    response.getWriter().println(
  107 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  108 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  109 |    );
  110 |   }
  111 |
  112 |   response.getWriter().println(
  113 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  114 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00899.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,103,"
   93 |    response.getWriter().println(
   94 |    ""Welcome back: "" + user + ""<br/>""
   95 |    );
   96 |   } else {
   97 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   98 |    rememberMe.setSecure(true);
   99 |    rememberMe.setHttpOnly(true);
  100 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
  101 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  102 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 103 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  104 |    response.addCookie(rememberMe);
  105 |    response.getWriter().println(
  106 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  107 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  108 |    );
  109 |   }
  110 |
  111 |   response.getWriter().println(
  112 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  113 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00900.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,102,"
   92 |   if (foundUser) {
   93 |    response.getWriter().println(
   94 |    ""Welcome back: "" + user + ""<br/>""
   95 |    );
   96 |   } else {
   97 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   98 |    rememberMe.setSecure(true);
   99 |    rememberMe.setHttpOnly(true);
  100 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  101 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 102 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  103 |    response.addCookie(rememberMe);
  104 |    response.getWriter().println(
  105 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  106 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  107 |    );
  108 |   }
  109 |
  110 |   response.getWriter().println(
  111 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  112 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00901.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,102,"
   92 |   if (foundUser) {
   93 |    response.getWriter().println(
   94 |    ""Welcome back: "" + user + ""<br/>""
   95 |    );
   96 |   } else {
   97 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   98 |    rememberMe.setSecure(true);
   99 |    rememberMe.setHttpOnly(true);
  100 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
  101 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
> 102 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  103 |    response.addCookie(rememberMe);
  104 |    response.getWriter().println(
  105 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  106 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  107 |    );
  108 |   }
  109 |
  110 |   response.getWriter().println(
  111 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  112 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00902.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |   if (foundUser) {
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |   } else {
   83 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   84 |    rememberMe.setSecure(true);
   85 |    rememberMe.setHttpOnly(true);
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   98 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00960.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,100,"
   90 |     ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   98 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   99 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
> 100 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  101 |    response.addCookie(rememberMe);
  102 |    response.getWriter().println(
  103 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  104 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  105 |    );
  106 |   }
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.lang.Math.random() executed""
  109 |   );
  110 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00971.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |   } else {
   93 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   94 |    rememberMe.setSecure(true);
   95 |    rememberMe.setHttpOnly(true);
   96 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00972.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |   } else {
   93 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   94 |    rememberMe.setSecure(true);
   95 |    rememberMe.setHttpOnly(true);
   96 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00973.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,98,"
   88 |   if (foundUser) {
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |   } else {
   93 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   94 |    rememberMe.setSecure(true);
   95 |    rememberMe.setHttpOnly(true);
   96 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   97 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  98 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   99 |    response.addCookie(rememberMe);
  100 |    response.getWriter().println(
  101 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  102 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  103 |    );
  104 |   }
  105 |
  106 |   response.getWriter().println(
  107 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  108 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00974.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,98,"
   88 |   if (foundUser) {
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |   } else {
   93 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   94 |    rememberMe.setSecure(true);
   95 |    rememberMe.setHttpOnly(true);
   96 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   97 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  98 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   99 |    response.addCookie(rememberMe);
  100 |    response.getWriter().println(
  101 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  102 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  103 |    );
  104 |   }
  105 |
  106 |   response.getWriter().println(
  107 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  108 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00975.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,98,"
   88 |   if (foundUser) {
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |   } else {
   93 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   94 |    rememberMe.setSecure(true);
   95 |    rememberMe.setHttpOnly(true);
   96 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   97 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  98 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   99 |    response.addCookie(rememberMe);
  100 |    response.getWriter().println(
  101 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  102 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  103 |    );
  104 |   }
  105 |
  106 |   response.getWriter().println(
  107 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  108 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00976.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01059.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |   }
   94 |
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   97 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01060.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01119.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,97,"
   87 |     ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   95 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   96 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  97 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   98 |    response.addCookie(rememberMe);
   99 |    response.getWriter().println(
  100 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  101 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  102 |    );
  103 |   }
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.lang.Math.random() executed""
  106 |   );
  107 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01127.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01128.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01129.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01130.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01131.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01132.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01133.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01162.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,90,"
   80 |     ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   88 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   89 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  90 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   91 |    response.addCookie(rememberMe);
   92 |    response.getWriter().println(
   93 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   94 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   95 |    );
   96 |   }
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.lang.Math.random() executed""
   99 |   );
  100 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01163.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,90,"
   80 |     ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   88 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   89 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  90 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   91 |    response.addCookie(rememberMe);
   92 |    response.getWriter().println(
   93 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   94 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   95 |    );
   96 |   }
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.lang.Math.random() executed""
   99 |   );
  100 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01183.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,89,"
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |   } else {
   83 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   84 |    rememberMe.setSecure(true);
   85 |    rememberMe.setHttpOnly(true);
   86 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   87 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   88 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  89 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   90 |    response.addCookie(rememberMe);
   91 |    response.getWriter().println(
   92 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   93 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   94 |    );
   95 |
   96 |   }
   97 |
   98 |   response.getWriter().println(
   99 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01184.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |   if (foundUser) {
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |   } else {
   83 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   84 |    rememberMe.setSecure(true);
   85 |    rememberMe.setHttpOnly(true);
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   98 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01271.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01272.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01273.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01274.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01275.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01276.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01277.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01278.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01279.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01354.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01355.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01356.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01357.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,86,"
   76 |   if (foundUser) {
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   85 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  86 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   87 |    response.addCookie(rememberMe);
   88 |    response.getWriter().println(
   89 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   90 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   91 |    );
   92 |   }
   93 |
   94 |   response.getWriter().println(
   95 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   96 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01358.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,86,"
   76 |   if (foundUser) {
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   85 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  86 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   87 |    response.addCookie(rememberMe);
   88 |    response.getWriter().println(
   89 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   90 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   91 |    );
   92 |   }
   93 |
   94 |   response.getWriter().println(
   95 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   96 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01431.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01432.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01433.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01434.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01435.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01502.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,84,"
   74 |     ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |
   77 |   } else {
   78 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   79 |    rememberMe.setSecure(true);
   80 |    rememberMe.setHttpOnly(true);
   81 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   82 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   83 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  84 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   85 |    response.addCookie(rememberMe);
   86 |    response.getWriter().println(
   87 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   88 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   89 |    );
   90 |   }
   91 |   response.getWriter().println(
   92 |   ""Weak Randomness Test java.lang.Math.random() executed""
   93 |   );
   94 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01518.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |
   90 |   }
   91 |
   92 |   response.getWriter().println(
   93 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01519.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |
   90 |   }
   91 |
   92 |   response.getWriter().println(
   93 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01520.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |
   77 |   } else {
   78 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   79 |    rememberMe.setSecure(true);
   80 |    rememberMe.setHttpOnly(true);
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   93 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01575.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,86,"
   76 |     ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |
   79 |   } else {
   80 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   81 |    rememberMe.setSecure(true);
   82 |    rememberMe.setHttpOnly(true);
   83 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   84 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   85 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  86 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   87 |    response.addCookie(rememberMe);
   88 |    response.getWriter().println(
   89 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   90 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   91 |    );
   92 |   }
   93 |   response.getWriter().println(
   94 |   ""Weak Randomness Test java.lang.Math.random() executed""
   95 |   );
   96 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01602.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,85,"
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   83 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   84 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  85 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   86 |    response.addCookie(rememberMe);
   87 |    response.getWriter().println(
   88 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   89 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   90 |    );
   91 |
   92 |   }
   93 |
   94 |   response.getWriter().println(
   95 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01603.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,85,"
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |
   79 |   } else {
   80 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   81 |    rememberMe.setSecure(true);
   82 |    rememberMe.setHttpOnly(true);
   83 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   84 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  85 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   86 |    response.addCookie(rememberMe);
   87 |    response.getWriter().println(
   88 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   89 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   90 |    );
   91 |   }
   92 |
   93 |   response.getWriter().println(
   94 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   95 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01648.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,97,"
   87 |     ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   95 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   96 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  97 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   98 |    response.addCookie(rememberMe);
   99 |    response.getWriter().println(
  100 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  101 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  102 |    );
  103 |   }
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.lang.Math.random() executed""
  106 |   );
  107 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01676.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01677.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |
  103 |   }
  104 |
  105 |   response.getWriter().println(
  106 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01678.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |
  103 |   }
  104 |
  105 |   response.getWriter().println(
  106 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01679.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |
  103 |   }
  104 |
  105 |   response.getWriter().println(
  106 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01680.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01681.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01781.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01782.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01783.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01784.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01785.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01786.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01787.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01788.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01842.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,100,"
   90 |     ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   98 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   99 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
> 100 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  101 |    response.addCookie(rememberMe);
  102 |    response.getWriter().println(
  103 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  104 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  105 |    );
  106 |   }
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.lang.Math.random() executed""
  109 |   );
  110 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01843.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,100,"
   90 |     ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   98 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   99 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
> 100 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  101 |    response.addCookie(rememberMe);
  102 |    response.getWriter().println(
  103 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  104 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  105 |    );
  106 |   }
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.lang.Math.random() executed""
  109 |   );
  110 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01854.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |   } else {
   93 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   94 |    rememberMe.setSecure(true);
   95 |    rememberMe.setHttpOnly(true);
   96 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |
  106 |   }
  107 |
  108 |   response.getWriter().println(
  109 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01855.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01856.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01857.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01858.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01859.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01860.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,99,"
   89 |    response.getWriter().println(
   90 |    ""Welcome back: "" + user + ""<br/>""
   91 |    );
   92 |
   93 |   } else {
   94 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   95 |    rememberMe.setSecure(true);
   96 |    rememberMe.setHttpOnly(true);
   97 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   98 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  99 |    request.getSession().setAttribute(cookieName, rememberMeKey);
  100 |    response.addCookie(rememberMe);
  101 |    response.getWriter().println(
  102 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  103 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  104 |    );
  105 |   }
  106 |
  107 |   response.getWriter().println(
  108 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  109 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01910.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |     ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |
   81 |   } else {
   82 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   83 |    rememberMe.setSecure(true);
   84 |    rememberMe.setHttpOnly(true);
   85 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.lang.Math.random() executed""
   97 |   );
   98 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01930.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |   }
   94 |
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   97 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01931.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01932.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,86,"
   76 |   if (foundUser) {
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   85 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  86 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   87 |    response.addCookie(rememberMe);
   88 |    response.getWriter().println(
   89 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   90 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   91 |    );
   92 |   }
   93 |
   94 |   response.getWriter().println(
   95 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   96 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01933.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |
   81 |   } else {
   82 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   83 |    rememberMe.setSecure(true);
   84 |    rememberMe.setHttpOnly(true);
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |   }
   94 |
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   97 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01934.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,87,"
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |
   81 |   } else {
   82 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   83 |    rememberMe.setSecure(true);
   84 |    rememberMe.setHttpOnly(true);
   85 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   86 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  87 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   88 |    response.addCookie(rememberMe);
   89 |    response.getWriter().println(
   90 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   91 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   92 |    );
   93 |   }
   94 |
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   97 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01992.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,97,"
   87 |     ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   95 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   96 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  97 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   98 |    response.addCookie(rememberMe);
   99 |    response.getWriter().println(
  100 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
  101 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  102 |    );
  103 |   }
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.lang.Math.random() executed""
  106 |   );
  107 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02001.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |
  103 |   }
  104 |
  105 |   response.getWriter().println(
  106 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02002.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02003.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,95,"
   85 |   if (foundUser) {
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   94 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  95 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   96 |    response.addCookie(rememberMe);
   97 |    response.getWriter().println(
   98 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   99 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  100 |    );
  101 |   }
  102 |
  103 |   response.getWriter().println(
  104 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
  105 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02004.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02038.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,90,"
   80 |     ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   88 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   89 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  90 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   91 |    response.addCookie(rememberMe);
   92 |    response.getWriter().println(
   93 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   94 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   95 |    );
   96 |   }
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.lang.Math.random() executed""
   99 |   );
  100 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02039.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,90,"
   80 |     ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   88 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   89 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  90 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   91 |    response.addCookie(rememberMe);
   92 |    response.getWriter().println(
   93 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   94 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   95 |    );
   96 |   }
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.lang.Math.random() executed""
   99 |   );
  100 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02040.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,90,"
   80 |     ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   88 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   89 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  90 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   91 |    response.addCookie(rememberMe);
   92 |    response.getWriter().println(
   93 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   94 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   95 |    );
   96 |   }
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.lang.Math.random() executed""
   99 |   );
  100 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02060.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,89,"
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |   } else {
   83 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   84 |    rememberMe.setSecure(true);
   85 |    rememberMe.setHttpOnly(true);
   86 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   87 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   88 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  89 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   90 |    response.addCookie(rememberMe);
   91 |    response.getWriter().println(
   92 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   93 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   94 |    );
   95 |   }
   96 |
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   99 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02061.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |   if (foundUser) {
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |   } else {
   83 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   84 |    rememberMe.setSecure(true);
   85 |    rememberMe.setHttpOnly(true);
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   98 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02062.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |   if (foundUser) {
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |   } else {
   83 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   84 |    rememberMe.setSecure(true);
   85 |    rememberMe.setHttpOnly(true);
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |
   96 |   response.getWriter().println(
   97 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   98 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02063.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,89,"
   79 |    response.getWriter().println(
   80 |    ""Welcome back: "" + user + ""<br/>""
   81 |    );
   82 |
   83 |   } else {
   84 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   85 |    rememberMe.setSecure(true);
   86 |    rememberMe.setHttpOnly(true);
   87 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   88 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  89 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   90 |    response.addCookie(rememberMe);
   91 |    response.getWriter().println(
   92 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   93 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   94 |    );
   95 |   }
   96 |
   97 |   response.getWriter().println(
   98 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   99 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02117.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |     ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |   }
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.lang.Math.random() executed""
   92 |   );
   93 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02139.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02140.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02141.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02209.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,88,"
   78 |     ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |
   81 |   } else {
   82 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   83 |    rememberMe.setSecure(true);
   84 |    rememberMe.setHttpOnly(true);
   85 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   86 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   87 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  88 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   89 |    response.addCookie(rememberMe);
   90 |    response.getWriter().println(
   91 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   92 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   93 |    );
   94 |   }
   95 |   response.getWriter().println(
   96 |   ""Weak Randomness Test java.lang.Math.random() executed""
   97 |   );
   98 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02245.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,86,"
   76 |   if (foundUser) {
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   85 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  86 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   87 |    response.addCookie(rememberMe);
   88 |    response.getWriter().println(
   89 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   90 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   91 |    );
   92 |   }
   93 |
   94 |   response.getWriter().println(
   95 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
   96 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02246.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,86,"
   76 |   if (foundUser) {
   77 |    response.getWriter().println(
   78 |    ""Welcome back: "" + user + ""<br/>""
   79 |    );
   80 |   } else {
   81 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   82 |    rememberMe.setSecure(true);
   83 |    rememberMe.setHttpOnly(true);
   84 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   85 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  86 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   87 |    response.addCookie(rememberMe);
   88 |    response.getWriter().println(
   89 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   90 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   91 |    );
   92 |   }
   93 |
   94 |   response.getWriter().println(
   95 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
   96 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02337.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02338.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |
   90 |   } else {
   91 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   92 |    rememberMe.setSecure(true);
   93 |    rememberMe.setHttpOnly(true);
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02416.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   93 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02417.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   93 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02418.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   93 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02419.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |
   90 |   }
   91 |
   92 |   response.getWriter().println(
   93 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02420.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |   if (foundUser) {
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02421.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |   if (foundUser) {
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02422.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |   if (foundUser) {
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02423.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |   if (foundUser) {
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextInt(int) executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02424.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |   if (foundUser) {
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02425.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |   if (foundUser) {
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02426.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,83,"
   73 |    response.getWriter().println(
   74 |    ""Welcome back: "" + user + ""<br/>""
   75 |    );
   76 |
   77 |   } else {
   78 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   79 |    rememberMe.setSecure(true);
   80 |    rememberMe.setHttpOnly(true);
   81 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   82 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  83 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   84 |    response.addCookie(rememberMe);
   85 |    response.getWriter().println(
   86 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   87 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   88 |    );
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   93 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02473.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,86,"
   76 |     ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |
   79 |   } else {
   80 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   81 |    rememberMe.setSecure(true);
   82 |    rememberMe.setHttpOnly(true);
   83 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   84 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   85 |           // e.g., /benchmark/sql-01/BenchmarkTest01001
>  86 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   87 |    response.addCookie(rememberMe);
   88 |    response.getWriter().println(
   89 |    user + "" has been remembered with cookie: "" + rememberMe.getName()
   90 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   91 |    );
   92 |   }
   93 |   response.getWriter().println(
   94 |   ""Weak Randomness Test java.lang.Math.random() executed""
   95 |   );
   96 |
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02497.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,85,"
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   83 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   84 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  85 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   86 |    response.addCookie(rememberMe);
   87 |    response.getWriter().println(
   88 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   89 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   90 |    );
   91 |   }
   92 |
   93 |   response.getWriter().println(
   94 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   95 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02498.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,85,"
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   83 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   84 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  85 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   86 |    response.addCookie(rememberMe);
   87 |    response.getWriter().println(
   88 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   89 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   90 |    );
   91 |   }
   92 |
   93 |   response.getWriter().println(
   94 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   95 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02499.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,85,"
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   83 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   84 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  85 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   86 |    response.addCookie(rememberMe);
   87 |    response.getWriter().println(
   88 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   89 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   90 |    );
   91 |
   92 |   }
   93 |
   94 |   response.getWriter().println(
   95 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02500.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,84,"
   74 |   if (foundUser) {
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   83 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  84 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   85 |    response.addCookie(rememberMe);
   86 |    response.getWriter().println(
   87 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   88 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   89 |    );
   90 |   }
   91 |
   92 |   response.getWriter().println(
   93 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   94 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02501.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,84,"
   74 |   if (foundUser) {
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   83 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  84 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   85 |    response.addCookie(rememberMe);
   86 |    response.getWriter().println(
   87 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   88 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   89 |    );
   90 |   }
   91 |
   92 |   response.getWriter().println(
   93 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   94 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02502.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,84,"
   74 |   if (foundUser) {
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   83 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  84 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   85 |    response.addCookie(rememberMe);
   86 |    response.getWriter().println(
   87 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   88 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   89 |    );
   90 |   }
   91 |
   92 |   response.getWriter().println(
   93 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   94 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02503.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,84,"
   74 |   if (foundUser) {
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   83 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  84 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   85 |    response.addCookie(rememberMe);
   86 |    response.getWriter().println(
   87 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   88 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   89 |    );
   90 |   }
   91 |
   92 |   response.getWriter().println(
   93 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   94 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02504.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,84,"
   74 |   if (foundUser) {
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |   } else {
   79 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   80 |    rememberMe.setSecure(true);
   81 |    rememberMe.setHttpOnly(true);
   82 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   83 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  84 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   85 |    response.addCookie(rememberMe);
   86 |    response.getWriter().println(
   87 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   88 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   89 |    );
   90 |   }
   91 |
   92 |   response.getWriter().println(
   93 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   94 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02505.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,85,"
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |
   79 |   } else {
   80 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   81 |    rememberMe.setSecure(true);
   82 |    rememberMe.setHttpOnly(true);
   83 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   84 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  85 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   86 |    response.addCookie(rememberMe);
   87 |    response.getWriter().println(
   88 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   89 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   90 |    );
   91 |   }
   92 |
   93 |   response.getWriter().println(
   94 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   95 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02506.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,85,"
   75 |    response.getWriter().println(
   76 |    ""Welcome back: "" + user + ""<br/>""
   77 |    );
   78 |
   79 |   } else {
   80 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   81 |    rememberMe.setSecure(true);
   82 |    rememberMe.setHttpOnly(true);
   83 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   84 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  85 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   86 |    response.addCookie(rememberMe);
   87 |    response.getWriter().println(
   88 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   89 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   90 |    );
   91 |   }
   92 |
   93 |   response.getWriter().println(
   94 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   95 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02604.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02605.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |   }
  103 |
  104 |   response.getWriter().println(
  105 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
  106 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02606.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,96,"
   86 |    response.getWriter().println(
   87 |    ""Welcome back: "" + user + ""<br/>""
   88 |    );
   89 |   } else {
   90 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   91 |    rememberMe.setSecure(true);
   92 |    rememberMe.setHttpOnly(true);
   93 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   94 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   95 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  96 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   97 |    response.addCookie(rememberMe);
   98 |    response.getWriter().println(
   99 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
  100 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
  101 |    );
  102 |
  103 |   }
  104 |
  105 |   response.getWriter().println(
  106 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02702.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextDouble() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02703.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02704.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setDomain(new java.net.URL(request.getRequestURL().toString()).getHost());
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |
   89 |   }
   90 |
   91 |   response.getWriter().println(
   92 | ""Weak Randomness Test java.util.Random.nextFloat() executed""
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02705.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextGaussian() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02706.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02707.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,81,"
   71 |   if (foundUser) {
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |   } else {
   76 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   77 |    rememberMe.setSecure(true);
   78 |    rememberMe.setHttpOnly(true);
   79 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   80 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  81 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   82 |    response.addCookie(rememberMe);
   83 |    response.getWriter().println(
   84 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   85 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   86 |    );
   87 |   }
   88 |
   89 |   response.getWriter().println(
   90 |   ""Weak Randomness Test java.util.Random.nextInt() executed""
   91 |   );
      ^ Col 0
",java.java_weak_random
034. Insecure generation of random numbers,CWE-521,The application uses insecure methods to generate random numbers and assigns them to sensitive parameters in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02708.java,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/034,skims,SAST,82,"
   72 |    response.getWriter().println(
   73 |    ""Welcome back: "" + user + ""<br/>""
   74 |    );
   75 |
   76 |   } else {
   77 |    javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
   78 |    rememberMe.setSecure(true);
   79 |    rememberMe.setHttpOnly(true);
   80 |    rememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet
   81 |                // e.g., /benchmark/sql-01/BenchmarkTest01001
>  82 |    request.getSession().setAttribute(cookieName, rememberMeKey);
   83 |    response.addCookie(rememberMe);
   84 |    response.getWriter().println(
   85 |     user + "" has been remembered with cookie: "" + rememberMe.getName()
   86 |      + "" whose value is: "" + rememberMe.getValue() + ""<br/>""
   87 |    );
   88 |   }
   89 |
   90 |   response.getWriter().println(
   91 |   ""Weak Randomness Test java.util.Random.nextLong() executed""
   92 |   );
      ^ Col 0
",java.java_weak_random
Summary: 200 vulnerabilities were found in your targets.