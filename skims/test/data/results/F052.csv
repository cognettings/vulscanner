title,cwe,description,cvss,finding,stream,kind,where,snippet,method
052. Insecure encryption algorithm,CWE-310,A AppContext.SetSwitch method call sets Switch.System.Net.DontEnableSchUseStrongCrypto to true in namespace/skims/test/data/lib_root/f052/c_sharp_disabled_strong_crypto.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
  1 | using System;
  2 |
  3 | public class ExampleClass
  4 | {
  5 |     public void ExampleMethod()
  6 |     {
> 7 |         AppContext.SetSwitch(""Switch.System.Net.DontEnableSchUseStrongCrypto"", true);
  8 |     }
  9 | }
    ^ Col 0
",c_sharp.c_sharp_disabled_strong_crypto
052. Insecure encryption algorithm,CWE-310,Initialization vector is using a static value. in namespace/skims/test/data/lib_root/f052/kotlin_insecure_counter_mode.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | import java.security.SecureRandom
   2 | import javax.crypto.Cipher
   3 | import javax.crypto.spec.GCMParameterSpec
   4 | import javax.crypto.spec.SecretKeySpec
   5 |
   6 |
   7 | fun encrypt(key: ByteArray, ptxt: ByteArray) {
   8 |     val nonce: ByteArray = ""7cVgr5cbdCZV"".toByteArray() // The initialization vector is a static value
   9 |
> 10 |     val gcmSpec  = GCMParameterSpec(128, nonce) // The initialization vector is configured here
  11 |     val skeySpec = SecretKeySpec(key, ""AES"")
  12 |
  13 |     val cipher: Cipher = Cipher.getInstance(""AES/GCM/NoPadding"")
  14 |     cipher.init(Cipher.ENCRYPT_MODE, skeySpec, gcmSpec) // Noncompliant
  15 | }
  16 |
  17 |
  18 | fun encrypt(key: ByteArray, ptxt: ByteArray) {
  19 |         val random: SecureRandom = SecureRandom()
  20 |         val nonce: ByteArray     = ByteArray(12)
  21 |         random.nextBytes(nonce) // Random 96 bit IV
     ^ Col 0
",kotlin.kt_insecure_init_vector
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/js_insec_sign_algo_jose.js",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
    1 | async function first_test() {
    2 |   const jose = require(""jose"");
    3 |
    4 |   const secret = new TextEncoder().encode(
    5 |     ""cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2""
    6 |   );
    7 |   const alg = ""HS256"";
    8 |
    9 |   const jwt = await new jose.SignJWT({ ""urn:example:claim"": true })
>  10 |     .setProtectedHeader({ alg })
   11 |     .setIssuedAt()
   12 |     .setIssuer(""urn:example:issuer"")
   13 |     .setAudience(""urn:example:audience"")
   14 |     .setExpirationTime(""2h"")
   15 |     .sign(secret);
   16 |
   17 |   console.log(jwt);
   18 | }
   19 |
   20 | async function second_test() {
   21 |   const secret = new TextEncoder().encode(
      ^ Col 0
",javascript.javascript_jwt_insec_sign_algo_async
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/js_insec_sign_algo_jose.js",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,29,"
   19 |
   20 | async function second_test() {
   21 |   const secret = new TextEncoder().encode(
   22 |     ""cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2""
   23 |   );
   24 |
   25 |   const jwt = await new jose.SignJWT({ ""urn:example:claim"": true })
   26 |     .setIssuedAt()
   27 |     .setIssuer(""urn:example:issuer"")
   28 |     .setAudience(""urn:example:audience"")
>  29 |     .setProtectedHeader({ alg: ""HS256"" })
   30 |     .setExpirationTime(""2h"")
   31 |     .sign(secret);
   32 |
   33 |   console.log(jwt);
   34 | }
   35 |
   36 | // Following test is safe (No lines should be marked)
   37 | async function safe_test_i() {
   38 |   const secret = new TextEncoder().encode(
   39 |     ""cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2""
      ^ Col 0
",javascript.javascript_jwt_insec_sign_algo_async
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/js_insecure_sign_algorithm.js",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,14,"
   4 |
   5 | const payload = {
   6 |   sub: ""1234567890"",
   7 |   name: ""John Doe"",
   8 |   manager: true,
   9 | };
  10 |
  11 | const secretKey = ""secret"";
  12 |
  13 | let token = jwt.sign(payload, secretKey, {
> 14 |   algorithm: ""HS256"",
  15 |   expiresIn: ""10m"",
  16 | });
  17 |
  18 | // Case 1: Options as external object. Must mark line 22.
  19 |
  20 | let optObj = {
  21 |   expiresIn: ""5s"",
  22 |   algorithm: ""HS256"",
  23 |   otherOption: 7,
  24 | };
     ^ Col 0
",javascript.javascript_jwt_insec_sign_algorithm
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/js_insecure_sign_algorithm.js",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,22,"
  12 |
  13 | let token = jwt.sign(payload, secretKey, {
  14 |   algorithm: ""HS256"",
  15 |   expiresIn: ""10m"",
  16 | });
  17 |
  18 | // Case 1: Options as external object. Must mark line 22.
  19 |
  20 | let optObj = {
  21 |   expiresIn: ""5s"",
> 22 |   algorithm: ""HS256"",
  23 |   otherOption: 7,
  24 | };
  25 |
  26 | token = jwt.sign(payload, secretKey, optObj);
  27 |
  28 | // Case 2: Async implementation with no options.
  29 | // Line 31 must be marked.
  30 |
  31 | token = jwt.sign({ foo: ""bar"" }, privateKey, function (err, token) {
  32 |   console.log(token);
     ^ Col 0
",javascript.javascript_jwt_insec_sign_algorithm
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/js_insecure_sign_algorithm.js",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,31,"
  21 |   expiresIn: ""5s"",
  22 |   algorithm: ""HS256"",
  23 |   otherOption: 7,
  24 | };
  25 |
  26 | token = jwt.sign(payload, secretKey, optObj);
  27 |
  28 | // Case 2: Async implementation with no options.
  29 | // Line 31 must be marked.
  30 |
> 31 | token = jwt.sign({ foo: ""bar"" }, privateKey, function (err, token) {
  32 |   console.log(token);
  33 | });
  34 |
  35 | // Case 3: Default algorithm. If no Algorithm especified HS256 is used
  36 | // So, it should be marked, here, line 44 must be marked:
  37 |
  38 | token = jwt.sign(payload, secretKey, {
  39 |   expiresIn: ""10m"",
  40 | });
  41 |
     ^ Col 0
",javascript.javascript_jwt_insec_sign_algorithm
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/js_insecure_sign_algorithm.js",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,38,"
  28 | 2: Async implementation with no options.
  29 | 31 must be marked.
  30 |
  31 | jwt.sign({ foo: ""bar"" }, privateKey, function (err, token) {
  32 | e.log(token);
  33 |
  34 |
  35 | 3: Default algorithm. If no Algorithm especified HS256 is used
  36 | t should be marked, here, line 44 must be marked:
  37 |
> 38 | jwt.sign(payload, secretKey, {
  39 | sIn: ""10m"",
  40 |
  41 |
  42 | ol cases (No line should be marked:
  43 |
  44 | ase 0: Plain implementation with safe alg.
  45 |
  46 | jwt.sign(payload, secretKey, {
  47 | thm: ""HS512"",
  48 | sIn: ""10m"",
     ^ Col 8
",javascript.javascript_jwt_insec_sign_algorithm
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/ts_insec_sign_algo_jose.ts",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | import jose from ""jose"";
   2 |
   3 | async function firstTest(): Promise<void> {
   4 |   const secret = new TextEncoder().encode(
   5 |     ""cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2""
   6 |   );
   7 |   const alg = ""HS256"";
   8 |
   9 |   const jwt = await new jose.SignJWT({ ""urn:example:claim"": true })
> 10 |     .setProtectedHeader({ alg })
  11 |     .setIssuedAt()
  12 |     .setIssuer(""urn:example:issuer"")
  13 |     .setAudience(""urn:example:audience"")
  14 |     .setExpirationTime(""2h"")
  15 |     .sign(secret);
  16 |
  17 |   console.log(jwt);
  18 | }
  19 |
  20 | async function secondTest(): Promise<void> {
  21 |   const secret = new TextEncoder().encode(
     ^ Col 0
",typescript.typescript_jwt_insec_sign_algo_async
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/ts_insec_sign_algo_jose.ts",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,29,"
  19 |
  20 | async function secondTest(): Promise<void> {
  21 |   const secret = new TextEncoder().encode(
  22 |     ""cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2""
  23 |   );
  24 |
  25 |   const jwt = await new jose.SignJWT({ ""urn:example:claim"": true })
  26 |     .setIssuedAt()
  27 |     .setIssuer(""urn:example:issuer"")
  28 |     .setAudience(""urn:example:audience"")
> 29 |     .setProtectedHeader({ alg: ""HS256"" })
  30 |     .setExpirationTime(""2h"")
  31 |     .sign(secret);
  32 |
  33 |   console.log(jwt);
  34 | }
  35 |
  36 | // Following test is safe (No lines should be marked)
  37 | async function safeTestI(): Promise<void> {
  38 |   const secret = new TextEncoder().encode(
  39 |     ""cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2""
     ^ Col 0
",typescript.typescript_jwt_insec_sign_algo_async
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/ts_insecure_sign_algorithm.ts",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,14,"
   4 |
   5 | const payload = {
   6 |   sub: ""1234567890"",
   7 |   name: ""John Doe"",
   8 |   manager: true
   9 | };
  10 |
  11 | const secretKey = 'secret';
  12 |
  13 | let token = jwtAlias.sign(payload, secretKey, {
> 14 |     algorithm: 'HS256',
  15 |     expiresIn: '10m'
  16 | });
  17 |
  18 | // Case 1: Options as external object. Must mark line 22.
  19 |
  20 | let optObj = {
  21 |   expiresIn: '5s',
  22 |   algorithm: 'HS256',
  23 |   otherOption: 7,
  24 | }
     ^ Col 0
",typescript.typescript_jwt_insec_sign_algorithm
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/ts_insecure_sign_algorithm.ts",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,22,"
  12 |
  13 | let token = jwtAlias.sign(payload, secretKey, {
  14 |     algorithm: 'HS256',
  15 |     expiresIn: '10m'
  16 | });
  17 |
  18 | // Case 1: Options as external object. Must mark line 22.
  19 |
  20 | let optObj = {
  21 |   expiresIn: '5s',
> 22 |   algorithm: 'HS256',
  23 |   otherOption: 7,
  24 | }
  25 |
  26 | token = jwtAlias.sign(payload, secretKey, optObj);
  27 |
  28 | // Case 2: Async implementation with no options.
  29 | // Line 31 must be marked.
  30 |
  31 | token = jwtAlias.sign({ foo: ""bar"" }, privateKey, function (err, token) {
  32 |   console.log(token);
     ^ Col 0
",typescript.typescript_jwt_insec_sign_algorithm
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/ts_insecure_sign_algorithm.ts",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,31,"
  20 | let optObj = {
  21 |   expiresIn: '5s',
  22 |   algorithm: 'HS256',
  23 |   otherOption: 7,
  24 | }
  25 |
  26 | token = jwtAlias.sign(payload, secretKey, optObj);
  27 |
  28 | // Case 2: Async implementation with no options.
  29 | // Line 31 must be marked.
  30 |
> 31 | token = jwtAlias.sign({ foo: ""bar"" }, privateKey, function (err, token) {
  32 |   console.log(token);
  33 | });
  34 |
  35 | // Case 3: Default algorithm. If no Algorithm especified HS256 is used
  36 | // So, it should be marked, here, line 44 must be marked:
  37 |
  38 | token = jwtAlias.sign(payload, secretKey, {
  39 |   expiresIn: '10m'
  40 | });
     ^ Col 0
",typescript.typescript_jwt_insec_sign_algorithm
052. Insecure encryption algorithm,CWE-310,"JWT is signed with an insecure algorithm, such as HS256 in namespace/skims/test/data/lib_root/f052/ts_insecure_sign_algorithm.ts",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,38,"
  20 | {
  21 | '5s',
  22 | 'HS256',
  23 | : 7,
  24 |
  25 |
  26 | ias.sign(payload, secretKey, optObj);
  27 |
  28 | ync implementation with no options.
  29 | st be marked.
  30 |
  31 | ias.sign({ foo: ""bar"" }, privateKey, function (err, token) {
  32 | (token);
  33 |
  34 |
  35 | fault algorithm. If no Algorithm especified HS256 is used
  36 | uld be marked, here, line 44 must be marked:
  37 |
> 38 | ias.sign(payload, secretKey, {
  39 | '10m'
  40 |
     ^ Col 13
",typescript.typescript_jwt_insec_sign_algorithm
052. Insecure encryption algorithm,CWE-310,Missing SSL in namespace/skims/test/data/lib_path/f052/java.properties,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,4,"
  1 | ibm.mq.use_ssl=true
  2 | ibm.mq.use_ssl=false
  3 |  ibm.mq.use_ssl = false
> 4 |  ibm.mq.use_ssl = false # comment
  5 | ibm.mq.use_ssl=#{imb_mq_use_ssl}#
  6 | ibm.mq.cipher.suite=TLS_SRP_SHA_WITH_AES_256_CBC_SHA
  7 | ibm.mq.cipher.suite=TLS_RSA_WITH_AES_128_CBC_SHA256
  8 | ibm.mq.cipher.suite=X
    ^ Col 0
",java.java_properties_missing_ssl
052. Insecure encryption algorithm,CWE-310,Missing SSL in namespace/skims/test/data/lib_path/f052/java.properties,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,3,"
  1 | ibm.mq.use_ssl=true
  2 | ibm.mq.use_ssl=false
> 3 |  ibm.mq.use_ssl = false
  4 |  ibm.mq.use_ssl = false # comment
  5 | ibm.mq.use_ssl=#{imb_mq_use_ssl}#
  6 | ibm.mq.cipher.suite=TLS_SRP_SHA_WITH_AES_256_CBC_SHA
  7 | ibm.mq.cipher.suite=TLS_RSA_WITH_AES_128_CBC_SHA256
  8 | ibm.mq.cipher.suite=X
    ^ Col 0
",java.java_properties_missing_ssl
052. Insecure encryption algorithm,CWE-310,Missing SSL in namespace/skims/test/data/lib_path/f052/java.properties,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,2,"
  1 | ibm.mq.use_ssl=true
> 2 | ibm.mq.use_ssl=false
  3 |  ibm.mq.use_ssl = false
  4 |  ibm.mq.use_ssl = false # comment
  5 | ibm.mq.use_ssl=#{imb_mq_use_ssl}#
  6 | ibm.mq.cipher.suite=TLS_SRP_SHA_WITH_AES_256_CBC_SHA
  7 | ibm.mq.cipher.suite=TLS_RSA_WITH_AES_128_CBC_SHA256
  8 | ibm.mq.cipher.suite=X
    ^ Col 0
",java.java_properties_missing_ssl
052. Insecure encryption algorithm,CWE-310,"PasswordDeriveBytes is used to generate a weak key derivation
 in namespace/skims/test/data/lib_root/f052/c_sharp_obsolete_key_derivation.cs",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,12,"
   1 |  System;
   2 |  TestClass
   3 |
   4 | ublic void TestMethod(Rfc2898DeriveBytes rfc2898DeriveBytes, string algname, string alghashname, int keySize, byte[] rgbI
   5 |
   6 |    System.Security.Cryptography.rfc2898DeriveBytes.CryptDeriveKey(algname, alghashname, keySize, rgbIV);
   7 |
   8 |    byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());
   9 |
  10 |    byte[] salt = CreateRandomSalt(7);
  11 |
> 12 |    PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);
  13 |
  14 |
     ^ Col 5
",c_sharp.c_sharp_obsolete_key_derivation
052. Insecure encryption algorithm,CWE-310,"System.Security.Cryptography.rfc2898DeriveBytes.CryptDeriveKey is used to generate a weak key derivation
 in namespace/skims/test/data/lib_root/f052/c_sharp_obsolete_key_derivation.cs",CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | using System;
   2 | class TestClass
   3 | {
   4 |     public void TestMethod(Rfc2898DeriveBytes rfc2898DeriveBytes, string algname, string alghashname, int keySize, byte[]
   5 |     {
>  6 |         System.Security.Cryptography.rfc2898DeriveBytes.CryptDeriveKey(algname, alghashname, keySize, rgbIV);
   7 |
   8 |         byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());
   9 |
  10 |         byte[] salt = CreateRandomSalt(7);
  11 |
  12 |         PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);
  13 |     }
  14 | }
     ^ Col 0
",c_sharp.c_sharp_obsolete_key_derivation
052. Insecure encryption algorithm,CWE-310,TLS libraries provide built-in certificate validation functions that should be used. in namespace/skims/test/data/lib_root/f052/kt_insecure_ssl_certification.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,20,"
   5 |   @Throws(CertificateException::class)
   6 |   override fun checkClientTrusted(chain: Array<java.security.cert.X509Certificate>, authType: String) {
   7 |   } // Noncompliant (s4830)
   8 |
   9 |   @Throws(CertificateException::class)
  10 |   override fun checkServerTrusted(chain: Array<java.security.cert.X509Certificate>, authType: String) {
  11 |   } // Noncompliant (s4830)
  12 |
  13 |   override fun getAcceptedIssuers(): Array<java.security.cert.X509Certificate> {
  14 |    return arrayOf()
  15 |   }
  16 |  })
  17 |
  18 | // Install the all-trusting trust manager
  19 | val sslContext = SSLContext.getInstance(""TLSv1.2"")
> 20 | sslContext.init(null, trustAllCerts, java.security.SecureRandom())
  21 |
  22 |
  23 |
  24 | val sslContextSafe = SSLContext.getInstance(""TLSv1.2"")
  25 | sslContextSafe.init(null, null, java.security.SecureRandom())
     ^ Col 0
",kotlin.kt_insecure_certificate_validation
052. Insecure encryption algorithm,CWE-310,TLS/SSL libraries provide built-in hostname verification functions that should be used. in namespace/skims/test/data/lib_root/f052/kotlin_insecure_hostname_verifier.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
   1 | import javax.net.ssl.HostnameVerifier
   2 | import javax.net.ssl.SSLSession
   3 | import okhttp3.OkHttpClient
   4 |
   5 |
   6 | val builderNotSafe = OkHttpClient.Builder()
>  7 | builderNotSafe.hostnameVerifier(object : HostnameVerifier {
   8 |   override fun verify(hostname: String?, session: SSLSession?): Boolean {
   9 |     return true // Noncompliant (s5527)
  10 |   }
  11 | })
  12 |
  13 |
  14 | val builderSafe = okhttp3.OkHttpClient.Builder()
     ^ Col 0
",kotlin.kt_insecure_host_verification
052. Insecure encryption algorithm,CWE-310,The database encription key is using a static value. in namespace/skims/test/data/lib_root/f052/kt_insecure_ecription_key.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
   1 |
   2 | val key = ""gb09ym9ydoolp3w886d0tciczj6ve9kszqd65u7d126040gwy86xqimjpuuc788g""
   3 | val db = SQLiteDatabase.openOrCreateDatabase(""test.db"", key, null) // Noncompliant
   4 |
   5 |
   6 | val key = ""gb09ym9ydoolp3w886d0tciczj6ve9kszqd65u7d126040gwy86xqimjpuuc788g""
>  7 | val config = RealmConfiguration.Builder().encryptionKey(key.toByteArray()).build()
   8 | val realm = Realm.getInstance(config)
   9 |
  10 |
  11 | val db = SQLiteDatabase.openOrCreateDatabase(""test.db"", getKey(), null)
  12 | Realm
  13 |
  14 | val config = RealmConfiguration.Builder().encryptionKey(getKey()).build()
  15 | val realm = Realm.getInstance(config)
     ^ Col 0
",kotlin.kt_insecure_encription_key
052. Insecure encryption algorithm,CWE-310,The database encription key is using a static value. in namespace/skims/test/data/lib_root/f052/kt_insecure_ecription_key.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,3,"
   1 |
   2 | val key = ""gb09ym9ydoolp3w886d0tciczj6ve9kszqd65u7d126040gwy86xqimjpuuc788g""
>  3 | val db = SQLiteDatabase.openOrCreateDatabase(""test.db"", key, null) // Noncompliant
   4 |
   5 |
   6 | val key = ""gb09ym9ydoolp3w886d0tciczj6ve9kszqd65u7d126040gwy86xqimjpuuc788g""
   7 | val config = RealmConfiguration.Builder().encryptionKey(key.toByteArray()).build()
   8 | val realm = Realm.getInstance(config)
   9 |
  10 |
  11 | val db = SQLiteDatabase.openOrCreateDatabase(""test.db"", getKey(), null)
  12 | Realm
  13 |
  14 | val config = RealmConfiguration.Builder().encryptionKey(getKey()).build()
  15 | val realm = Realm.getInstance(config)
     ^ Col 0
",kotlin.kt_insecure_encription_key
052. Insecure encryption algorithm,CWE-310,Use of insecure TLS version in connection spec in namespace/skims/test/data/lib_root/f052/java_insecure_connection.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | @Component
   2 | public class InsecureConnection {
   3 |  private static final String TLS_1_1=TlsVersion.TLS_1_1;
   4 |  public void TlsVerification() {
   5 |   try {
>  6 |    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
   7 |          .tlsVersions(TlsVersion.TLS_1_1) // Noncompliant
   8 |          .build();
   9 |   } catch (NoSuchAlgorithmException | KeyManagementException e) {
  10 |         //Do something
  11 |   }
  12 |   try {
  13 |    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  14 |          .tlsVersions(TLS_1_1) // Noncompliant
  15 |          .build();
  16 |   } catch (NoSuchAlgorithmException | KeyManagementException e) {
  17 |    //Do something
  18 |   }
  19 |  }
  20 | }
  21 |
     ^ Col 0
",java.java_insecure_connection
052. Insecure encryption algorithm,CWE-310,Use of insecure TLS version in connection spec in namespace/skims/test/data/lib_root/f052/java_insecure_connection.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,13,"
   3 |  private static final String TLS_1_1=TlsVersion.TLS_1_1;
   4 |  public void TlsVerification() {
   5 |   try {
   6 |    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
   7 |          .tlsVersions(TlsVersion.TLS_1_1) // Noncompliant
   8 |          .build();
   9 |   } catch (NoSuchAlgorithmException | KeyManagementException e) {
  10 |         //Do something
  11 |   }
  12 |   try {
> 13 |    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  14 |          .tlsVersions(TLS_1_1) // Noncompliant
  15 |          .build();
  16 |   } catch (NoSuchAlgorithmException | KeyManagementException e) {
  17 |    //Do something
  18 |   }
  19 |  }
  20 | }
  21 |
  22 | @Component
  23 | public class SecureConnection {
     ^ Col 0
",java.java_insecure_connection
052. Insecure encryption algorithm,CWE-310,Use of insecure cipher suite in namespace/skims/test/data/lib_path/f052/java.properties,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
  1 | ibm.mq.use_ssl=true
  2 | ibm.mq.use_ssl=false
  3 |  ibm.mq.use_ssl = false
  4 |  ibm.mq.use_ssl = false # comment
  5 | ibm.mq.use_ssl=#{imb_mq_use_ssl}#
  6 | ibm.mq.cipher.suite=TLS_SRP_SHA_WITH_AES_256_CBC_SHA
> 7 | ibm.mq.cipher.suite=TLS_RSA_WITH_AES_128_CBC_SHA256
  8 | ibm.mq.cipher.suite=X
    ^ Col 0
",java.java_properties_weak_cipher_suite
052. Insecure encryption algorithm,CWE-310,Use of insecure cipher suite in namespace/skims/test/data/lib_path/f052/java.properties,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
  1 | ibm.mq.use_ssl=true
  2 | ibm.mq.use_ssl=false
  3 |  ibm.mq.use_ssl = false
  4 |  ibm.mq.use_ssl = false # comment
  5 | ibm.mq.use_ssl=#{imb_mq_use_ssl}#
> 6 | ibm.mq.cipher.suite=TLS_SRP_SHA_WITH_AES_256_CBC_SHA
  7 | ibm.mq.cipher.suite=TLS_RSA_WITH_AES_128_CBC_SHA256
  8 | ibm.mq.cipher.suite=X
    ^ Col 0
",java.java_properties_weak_cipher_suite
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | using System;
   2 | using System.IO;
   3 | using System.Security.Cryptography;
   4 | class Test {
   5 |    public static void insecure() {
   6 |       AesManaged aes_insecure = new AesManaged
   7 |       {
   8 |          KeySize = 128,
   9 |          BlockSize = 128,
> 10 |          Mode = CipherMode.CBC,
  11 |          Padding = PaddingMode.PKCS7
  12 |       };
  13 |
  14 |       var cipher_mode = CipherMode.OFB;
  15 |
  16 |       AesManaged aes_insecure1 = new AesManaged
  17 |       {
  18 |          KeySize = 128,
  19 |          BlockSize = 128,
  20 |          Mode = cipher_mode,
  21 |          Padding = PaddingMode.PKCS7
     ^ Col 0
",c_sharp.c_sharp_managed_secure_mode
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,20,"
  10 |          Mode = CipherMode.CBC,
  11 |          Padding = PaddingMode.PKCS7
  12 |       };
  13 |
  14 |       var cipher_mode = CipherMode.OFB;
  15 |
  16 |       AesManaged aes_insecure1 = new AesManaged
  17 |       {
  18 |          KeySize = 128,
  19 |          BlockSize = 128,
> 20 |          Mode = cipher_mode,
  21 |          Padding = PaddingMode.PKCS7
  22 |       };
  23 |
  24 |       AesManaged aes_insecure2 = new AesManaged();
  25 |       aes_insecure2.BlockSize = 128;
  26 |       aes_insecure2.KeySize = 128;
  27 |       aes_insecure2.Mode = cipher_mode;
  28 |
  29 |    }
  30 |
     ^ Col 0
",c_sharp.c_sharp_managed_secure_mode
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,27,"
  17 |       {
  18 |          KeySize = 128,
  19 |          BlockSize = 128,
  20 |          Mode = cipher_mode,
  21 |          Padding = PaddingMode.PKCS7
  22 |       };
  23 |
  24 |       AesManaged aes_insecure2 = new AesManaged();
  25 |       aes_insecure2.BlockSize = 128;
  26 |       aes_insecure2.KeySize = 128;
> 27 |       aes_insecure2.Mode = cipher_mode;
  28 |
  29 |    }
  30 |
  31 |    public static void secure() {
  32 |       AesManaged aes_secure = new AesManaged
  33 |       {
  34 |          KeySize = 128,
  35 |          BlockSize = 128,
  36 |          Mode = CipherMode.CTS,
  37 |          Padding = PaddingMode.PKCS7
     ^ Col 0
",c_sharp.c_sharp_managed_secure_mode
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_blowfish_cipher.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,24,"
  14 |   byte[] encrypted = Encrypt(original, password);
  15 |   Console.WriteLine(""Encrypted message: "" + Convert.ToBase64String(encrypted));
  16 |
  17 |   // Decrypt the message
  18 |   string decrypted = Decrypt(encrypted, password);
  19 |   Console.WriteLine(""Decrypted message: "" + decrypted);
  20 |
  21 |
  22 | blic static byte[] Encrypt(string original, string password)
  23 |
> 24 |   using (Blowfish blowfish = new Blowfish(password))
  25 |   {
  26 |       return blowfish.Encrypt(System.Text.Encoding.UTF8.GetBytes(original));
  27 |   }
  28 |
  29 |
  30 | blic static string Decrypt(byte[] encrypted, string password)
  31 |
  32 |   using (Blowfish blowfish = new Blowfish(password))
  33 |   {
  34 |       return System.Text.Encoding.UTF8.GetString(blowfish.Decrypt(encrypted));
     ^ Col 10
",c_sharp.c_sharp_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_blowfish_cipher.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,32,"
  18 |   string decrypted = Decrypt(encrypted, password);
  19 |   Console.WriteLine(""Decrypted message: "" + decrypted);
  20 |
  21 |
  22 | blic static byte[] Encrypt(string original, string password)
  23 |
  24 |   using (Blowfish blowfish = new Blowfish(password))
  25 |   {
  26 |       return blowfish.Encrypt(System.Text.Encoding.UTF8.GetBytes(original));
  27 |   }
  28 |
  29 |
  30 | blic static string Decrypt(byte[] encrypted, string password)
  31 |
> 32 |   using (Blowfish blowfish = new Blowfish(password))
  33 |   {
  34 |       return System.Text.Encoding.UTF8.GetString(blowfish.Decrypt(encrypted));
  35 |   }
  36 |
  37 |
  38 |
     ^ Col 10
",c_sharp.c_sharp_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,15,"
   1 | ng System.Security.Cryptography;
   2 |
   3 | espace Cypher_Example
   4 |
   5 |  class CypherExample
   6 |  {
   7 |      public static void Main()
   8 |      {
   9 |          MD5 myAes = MD5.Create();
  10 |          SHA1 myAes = SHA1.Create();
  11 |          HMACMD5 myAes = HMACMD5.Create();
  12 |          DES myAes = DES.Create();
  13 |          TripleDES myAes = TripleDES.Create();
  14 |          var hashProvider3 = new SHA1Managed();
> 15 |          var hashProvider3 = new RC2CryptoServiceProvider();
  16 |      }
  17 |  }
  18 |
     ^ Col 3
",c_sharp.c_sharp_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,13,"
   1 | sing System.Security.Cryptography;
   2 |
   3 | amespace Cypher_Example
   4 |
   5 |    class CypherExample
   6 |    {
   7 |        public static void Main()
   8 |        {
   9 |            MD5 myAes = MD5.Create();
  10 |            SHA1 myAes = SHA1.Create();
  11 |            HMACMD5 myAes = HMACMD5.Create();
  12 |            DES myAes = DES.Create();
> 13 |            TripleDES myAes = TripleDES.Create();
  14 |            var hashProvider3 = new SHA1Managed();
  15 |            var hashProvider3 = new RC2CryptoServiceProvider();
  16 |        }
  17 |    }
  18 |
     ^ Col 1
",c_sharp.c_sharp_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,12,"
   1 | using System.Security.Cryptography;
   2 |
   3 | namespace Cypher_Example
   4 | {
   5 |     class CypherExample
   6 |     {
   7 |         public static void Main()
   8 |         {
   9 |             MD5 myAes = MD5.Create();
  10 |             SHA1 myAes = SHA1.Create();
  11 |             HMACMD5 myAes = HMACMD5.Create();
> 12 |             DES myAes = DES.Create();
  13 |             TripleDES myAes = TripleDES.Create();
  14 |             var hashProvider3 = new SHA1Managed();
  15 |             var hashProvider3 = new RC2CryptoServiceProvider();
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,15,"
   1 | using System;
   2 | class cipher{
   3 |
   4 |    public void Encrypt()
   5 |  {
   6 |       var insecure_rsa = new RSACryptoServiceProvider();
   7 |       var secure_rsa = new RSACryptoServiceProvider(2048);
   8 |
   9 |   var insecure_dsa = new DSACng(1024);
  10 |       var secure_dsa = new DSACng();
  11 |       var secure_dsa2 = new DSACng(2048);
  12 |
  13 |       var insecure_rsa = new RSACng(1024);
  14 |       int key = 1024;
> 15 |       var insecure_rsa2 = new RSACng(key);
  16 |       var secure_rsa = new RSACng();
  17 |       int secure_key = 2048;
  18 |       var secure_rsa2 = new RSACng(secure_key);
  19 |  }
  20 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_keys
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,13,"
   1 | using System;
   2 | class cipher{
   3 |
   4 |    public void Encrypt()
   5 |  {
   6 |       var insecure_rsa = new RSACryptoServiceProvider();
   7 |       var secure_rsa = new RSACryptoServiceProvider(2048);
   8 |
   9 |   var insecure_dsa = new DSACng(1024);
  10 |       var secure_dsa = new DSACng();
  11 |       var secure_dsa2 = new DSACng(2048);
  12 |
> 13 |       var insecure_rsa = new RSACng(1024);
  14 |       int key = 1024;
  15 |       var insecure_rsa2 = new RSACng(key);
  16 |       var secure_rsa = new RSACng();
  17 |       int secure_key = 2048;
  18 |       var secure_rsa2 = new RSACng(secure_key);
  19 |  }
  20 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_keys
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
   1 | using System;
   2 | class cipher{
   3 |
   4 |    public void Encrypt()
   5 |  {
   6 |       var insecure_rsa = new RSACryptoServiceProvider();
   7 |       var secure_rsa = new RSACryptoServiceProvider(2048);
   8 |
>  9 |   var insecure_dsa = new DSACng(1024);
  10 |       var secure_dsa = new DSACng();
  11 |       var secure_dsa2 = new DSACng(2048);
  12 |
  13 |       var insecure_rsa = new RSACng(1024);
  14 |       int key = 1024;
  15 |       var insecure_rsa2 = new RSACng(key);
  16 |       var secure_rsa = new RSACng();
  17 |       int secure_key = 2048;
  18 |       var secure_rsa2 = new RSACng(secure_key);
  19 |  }
  20 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_keys
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | using System;
   2 | class cipher{
   3 |
   4 |    public void Encrypt()
   5 |  {
>  6 |       var insecure_rsa = new RSACryptoServiceProvider();
   7 |       var secure_rsa = new RSACryptoServiceProvider(2048);
   8 |
   9 |   var insecure_dsa = new DSACng(1024);
  10 |       var secure_dsa = new DSACng();
  11 |       var secure_dsa2 = new DSACng(2048);
  12 |
  13 |       var insecure_rsa = new RSACng(1024);
  14 |       int key = 1024;
  15 |       var insecure_rsa2 = new RSACng(key);
  16 |       var secure_rsa = new RSACng();
  17 |       int secure_key = 2048;
  18 |       var secure_rsa2 = new RSACng(secure_key);
  19 |  }
  20 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_keys
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rijndael.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
   1 | tem;
   2 | tem.IO;
   3 | tem.Security.Cryptography;
   4 |
   5 | t {
   6 |  static void Main() {
>  7 | ndaelManaged aes_insecure3 = new RijndaelManaged
   8 |
   9 | KeySize = 128,
  10 | BlockSize = 128,
  11 | Mode = CipherMode.CTS,
  12 | Padding = PaddingMode.PKCS7
  13 |
  14 |
  15 |
     ^ Col 9
",c_sharp.c_sharp_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
   1 | ystem;
   2 | wtbuild {
   3 |
   4 | ic static void Main() {
   5 |
   6 | CryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
   7 |  secure_enc = RSA2.Encrypt(dataToEncrypt, true);
   8 |
>  9 | CryptoServiceProvider RSA3 = new RSACryptoServiceProvider();
  10 |  insecure_enc = RSA3.Encrypt(dataToEncrypt, false);
  11 |
  12 |  key_eval = false;
  13 | insecure_enc2 = RSA3.Encrypt(dataToEncrypt, key_eval);
  14 |
  15 |
     ^ Col 7
",c_sharp.c_sharp_insecure_keys
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | ystem;
   2 | wtbuild {
   3 |
   4 | ic static void Main() {
   5 |
>  6 | CryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
   7 |  secure_enc = RSA2.Encrypt(dataToEncrypt, true);
   8 |
   9 | CryptoServiceProvider RSA3 = new RSACryptoServiceProvider();
  10 |  insecure_enc = RSA3.Encrypt(dataToEncrypt, false);
  11 |
  12 |  key_eval = false;
  13 | insecure_enc2 = RSA3.Encrypt(dataToEncrypt, key_eval);
  14 |
  15 |
     ^ Col 7
",c_sharp.c_sharp_insecure_keys
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,13,"
   1 | using System;
   2 | class jwtbuild {
   3 |
   4 |    public static void Main() {
   5 |
   6 |     RSACryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
   7 |     var secure_enc = RSA2.Encrypt(dataToEncrypt, true);
   8 |
   9 |     RSACryptoServiceProvider RSA3 = new RSACryptoServiceProvider();
  10 |     var insecure_enc = RSA3.Encrypt(dataToEncrypt, false);
  11 |
  12 |    bool key_eval = false;
> 13 |    var insecure_enc2 = RSA3.Encrypt(dataToEncrypt, key_eval);
  14 |    }
  15 | }
     ^ Col 0
",c_sharp.c_sharp_rsa_secure_mode
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | using System;
   2 | class jwtbuild {
   3 |
   4 |    public static void Main() {
   5 |
   6 |     RSACryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
   7 |     var secure_enc = RSA2.Encrypt(dataToEncrypt, true);
   8 |
   9 |     RSACryptoServiceProvider RSA3 = new RSACryptoServiceProvider();
> 10 |     var insecure_enc = RSA3.Encrypt(dataToEncrypt, false);
  11 |
  12 |    bool key_eval = false;
  13 |    var insecure_enc2 = RSA3.Encrypt(dataToEncrypt, key_eval);
  14 |    }
  15 | }
     ^ Col 0
",c_sharp.c_sharp_rsa_secure_mode
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,27,"
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 |  ""crypto/cipher""
  11 |  ""crypto/blowfish""
  12 |  ""fmt""
  13 | )
  14 |
  15 |
  16 | func main() {
  17 |
  18 |  Hripemd:= ripemd160.New()
  19 |  Hmd4 = md4.New()
  20 |  Hmd5 = md5.New()
  21 |  Hsha1 := sha1.New()
  22 |  Hsha512 := sha512.New()
  23 |
  24 |  ede2Key := []byte(""example key 1234"")
  25 |
  26 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
> 27 |  block, _ := blowfish.NewCipher(key)
  28 | }
     ^ Col 0
",go.go_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,26,"
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 |  ""crypto/cipher""
  11 |  ""crypto/blowfish""
  12 |  ""fmt""
  13 | )
  14 |
  15 |
  16 | func main() {
  17 |
  18 |  Hripemd:= ripemd160.New()
  19 |  Hmd4 = md4.New()
  20 |  Hmd5 = md5.New()
  21 |  Hsha1 := sha1.New()
  22 |  Hsha512 := sha512.New()
  23 |
  24 |  ede2Key := []byte(""example key 1234"")
  25 |
> 26 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  27 |  block, _ := blowfish.NewCipher(key)
  28 | }
     ^ Col 0
",go.go_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_cipher_jmqi.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | import com.ibm.mq.*;
   2 | import com.ibm.mq.jmqi.JmqiUtils;
   3 | import org.apache.log4j.Logger;
   4 |
   5 | class Test {
   6 |
   7 |  private final String cipherSuite = ""TLS_RSA_WITH_AES_128_CBC_SHA256"";
   8 |
   9 |  public void insecure() {
> 10 |   JmqiUtils.toCipherSuite(cipherSuite);
  11 |  }
  12 |
  13 |  public void secure() {
  14 |   String safeSuite = ""TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256"";
  15 |   JmqiUtils.toCipherSuite(safeSuite);
  16 |  }
  17 |
  18 | }
     ^ Col 0
",java.java_insecure_cipher_jmqi
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_cipher.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
   1 | mport javax.net.ssl.SSLContext;
   2 | mport javax.net.ssl.SSLSession;
   3 |
   4 | Component
   5 | ublic class SslInsecure {
   6 | private static final String SSL=""SSL"";
   7 | public void SslVerification(boolean disable) {
   8 |  try {
>  9 |   SSLContext unsafecontext = SSLContext.getInstance(SSL);
  10 |  } catch (NoSuchAlgorithmException | KeyManagementException e) {
  11 |      //Do something
  12 |  }
  13 | }
  14 |
  15 |
  16 | Component
  17 | ublic class SslSecure {
  18 | private static final String SSL=""TLSv1.2"";
  19 | public void SslVerification(boolean disable) {
  20 |  try {
  21 |   SSLContext safecontext = SSLContext.getInstance(SSL);
     ^ Col 1
",java.java_insecure_cipher_ssl
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,11,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
> 11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
> 10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
>  9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,8,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
>  8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
>  7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,12,"
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
> 12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,13,"
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
> 13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,14,"
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
> 14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,15,"
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
> 15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,16,"
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
> 16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,17,"
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
> 17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,18,"
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
> 18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,19,"
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
> 19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,20,"
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
> 20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,21,"
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
> 21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,22,"
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
> 22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
     ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,23,"
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
> 23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
     ^ Col 0
",java.java_insecure_cipher_ssl
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,8,"
   1 | function insecureModes() {
   2 |     var unsafe_1 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   3 |         mode: CryptoJS.mode.CBC,
   4 |         padding: CryptoJS.pad.AnsiX923
   5 |     });
   6 |
   7 |     var crypto = CryptoJS.mode.ECB
>  8 |     var unsafe_2 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   9 |         mode: crypto,
  10 |         padding: CryptoJS.pad.AnsiX923
  11 |     });
  12 |
  13 |     var unsafe_3 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
  14 |         padding: CryptoJS.pad.AnsiX923
  15 |     });
  16 | }
  17 |
  18 | function secureMode() {
  19 |     var safe_mode = CryptoJS.mode.CTR
  20 |     var safe = CryptoJS.AES.encrypt(""Message"", ""passphrase"", {
  21 |         mode: safe_mode,
     ^ Col 0
",javascript.javascript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,2,"
   1 | function insecureModes() {
>  2 |     var unsafe_1 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   3 |         mode: CryptoJS.mode.CBC,
   4 |         padding: CryptoJS.pad.AnsiX923
   5 |     });
   6 |
   7 |     var crypto = CryptoJS.mode.ECB
   8 |     var unsafe_2 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   9 |         mode: crypto,
  10 |         padding: CryptoJS.pad.AnsiX923
  11 |     });
  12 |
  13 |     var unsafe_3 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
  14 |         padding: CryptoJS.pad.AnsiX923
  15 |     });
  16 | }
  17 |
  18 | function secureMode() {
  19 |     var safe_mode = CryptoJS.mode.CTR
  20 |     var safe = CryptoJS.AES.encrypt(""Message"", ""passphrase"", {
  21 |         mode: safe_mode,
     ^ Col 0
",javascript.javascript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,13,"
   3 |         mode: CryptoJS.mode.CBC,
   4 |         padding: CryptoJS.pad.AnsiX923
   5 |     });
   6 |
   7 |     var crypto = CryptoJS.mode.ECB
   8 |     var unsafe_2 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   9 |         mode: crypto,
  10 |         padding: CryptoJS.pad.AnsiX923
  11 |     });
  12 |
> 13 |     var unsafe_3 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
  14 |         padding: CryptoJS.pad.AnsiX923
  15 |     });
  16 | }
  17 |
  18 | function secureMode() {
  19 |     var safe_mode = CryptoJS.mode.CTR
  20 |     var safe = CryptoJS.AES.encrypt(""Message"", ""passphrase"", {
  21 |         mode: safe_mode,
  22 |         padding: CryptoJS.pad.AnsiX923
  23 |     });
     ^ Col 0
",javascript.javascript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_create_cipher.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | const crypto = require(""crypto"");
   2 |
   3 | let keyString = ""*4wQZgn+U2RW_mb="";
   4 | const key = Buffer.from(keyString.substring(0, 8), ""utf8"");
   5 |
>  6 | const cipher = crypto.createCipheriv(""des-ecb"", key, """");
   7 |
   8 | let encrypted = """";
   9 | cipher.on(""readable"", () => {
  10 |   let chunk;
  11 |   while (null !== (chunk = cipher.read())) {
  12 |     encrypted += chunk.toString(""hex"");
  13 |   }
  14 | });
  15 | cipher.on(""end"", () => {
  16 |   console.log(encrypted);
  17 | });
  18 |
  19 | cipher.write(""some clear text data"");
  20 | cipher.end();
     ^ Col 0
",javascript.javascript_insecure_create_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,11,"
   1 | import { Router } from ""express"";
   2 | let CryptoJS = require(""crypto-js"");
   3 | let router = Router();
   4 |
   5 | router.get(""/test120/:target"", function (req, res) {
   6 |   const keyString = ""*4wQZgn+U2RW_mb="";
   7 |
   8 |   let parameters = req.params;
   9 |   let target = parameters[""target""];
  10 |
> 11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
     ^ Col 0
",javascript.javascript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,16,"
   6 |   const keyString = ""*4wQZgn+U2RW_mb="";
   7 |
   8 |   let parameters = req.params;
   9 |   let target = parameters[""target""];
  10 |
  11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
> 16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
  26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
     ^ Col 0
",javascript.javascript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,21,"
  11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
> 21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
  26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
  27 |     mode: CryptoJS.mode.CBC,
  28 |     padding: CryptoJS.pad.NoPadding,
  29 |   }).toString();
  30 |   res.json({ encryptedRSA: encryptedRSA });
  31 | });
     ^ Col 0
",javascript.javascript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,26,"
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
> 26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
  27 |     mode: CryptoJS.mode.CBC,
  28 |     padding: CryptoJS.pad.NoPadding,
  29 |   }).toString();
  30 |   res.json({ encryptedRSA: encryptedRSA });
  31 | });
  32 |
  33 | export default router;
     ^ Col 0
",javascript.javascript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_hash.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,8,"
   1 | import { Router } from ""express"";
   2 | import crypto from ""crypto"";
   3 |
   4 | const router = Router();
   5 |
   6 | router.get(""/test139/:target"", function (req, res) {
   7 |   let target = req.params[""target""];
>  8 |   const hash = crypto.createHash(""RSA-MD4"");
   9 |
  10 |   hash.on(""readable"", () => {
  11 |     const data = hash.read();
  12 |     if (data) {
  13 |       res.json({ hash: data.toString(""hex"") });
  14 |     }
  15 |   });
  16 |   hash.write(target);
  17 |   hash.end();
  18 | });
  19 |
  20 | export default router;
     ^ Col 0
",javascript.javascript_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,15,"
   5 | import java.security.spec.ECGenParameterSpec
   6 | import java.security.spec.RSAKeyGenParameterSpec
   7 | import javax.crypto.Cipher
   8 | import javax.crypto.NoSuchPaddingException
   9 |
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
> 15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,16,"
   6 | import java.security.spec.RSAKeyGenParameterSpec
   7 | import javax.crypto.Cipher
   8 | import javax.crypto.NoSuchPaddingException
   9 |
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
> 16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,17,"
   7 | import javax.crypto.Cipher
   8 | import javax.crypto.NoSuchPaddingException
   9 |
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
> 17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,18,"
   8 | import javax.crypto.NoSuchPaddingException
   9 |
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
> 18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,20,"
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
> 20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,21,"
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
> 21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,22,"
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
> 22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,23,"
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
> 23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,24,"
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
> 24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,25,"
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
> 25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,26,"
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
> 26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,27,"
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
> 27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,28,"
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
> 28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,29,"
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
> 29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,30,"
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
> 30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |             val spec1: ConnectionSpec = (
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,41,"
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |             val spec1: ConnectionSpec = (
> 41 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  42 |                     .tlsVersions(TlsVersion.TLS_1_1)
  43 |                     .build()
  44 |             )
  45 |             val spec2: ConnectionSpec = (
  46 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  47 |                     .tlsVersions(TlsVersion.TLS_1_2)
  48 |                     .build()
  49 |             )
  50 |
  51 |             val md2: MessageDigest = MessageDigest.getInstance(""SHA1"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kt_insecure_key_generator.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,11,"
   1 | val keyPairGen1 = KeyPairGenerator.getInstance(""RSA"")
   2 | keyPairGen1.initialize(1024) // Noncompliant
   3 |
   4 |
   5 | val keyGen1 = KeyGenerator.getInstance(""AES"")
   6 | keyGen1.init(64) // Noncompliant
   7 |
   8 |
   9 |
  10 |
> 11 | val keyPairGen6 = KeyPairGenerator.getInstance(""RSA"")
  12 | keyPairGen6.initialize(2048) // Compliant
  13 |
  14 |
  15 | val keyGen2safe = KeyGenerator.getInstance(""AES"")
  16 | keyGen2safe.init(128) // Compliant
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kt_insecure_key_generator.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,1,"
>  1 | val keyPairGen1 = KeyPairGenerator.getInstance(""RSA"")
   2 | keyPairGen1.initialize(1024) // Noncompliant
   3 |
   4 |
   5 | val keyGen1 = KeyGenerator.getInstance(""AES"")
   6 | keyGen1.init(64) // Noncompliant
   7 |
   8 |
   9 |
  10 |
  11 | val keyPairGen6 = KeyPairGenerator.getInstance(""RSA"")
  12 | keyPairGen6.initialize(2048) // Compliant
  13 |
  14 |
  15 | val keyGen2safe = KeyGenerator.getInstance(""AES"")
  16 | keyGen2safe.init(128) // Compliant
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kt_insecure_pair_generator.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
  1 |
  2 |
  3 | val keyPairGen1 = KeyPairGenerator.getInstance(""RSA"")
  4 | keyPairGen1.initialize(1024) // Noncompliant
  5 |
> 6 | val keyPairGen6 = KeyPairGenerator.getInstance(""RSA"")
  7 | keyPairGen6.initialize(2048) // Compliant
    ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kt_insecure_pair_generator.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,3,"
  1 |
  2 |
> 3 | val keyPairGen1 = KeyPairGenerator.getInstance(""RSA"")
  4 | keyPairGen1.initialize(1024) // Noncompliant
  5 |
  6 | val keyPairGen6 = KeyPairGenerator.getInstance(""RSA"")
  7 | keyPairGen6.initialize(2048) // Compliant
    ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kt_iv_parameter_spec.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
   1 |
   2 | val bytesIV = ""7cVgr5cbdCZVw5WY"".toByteArray(charset(""UTF-8"")) // Predictable / hardcoded IV
   3 |
   4 | val iv = IvParameterSpec(bytesIV)
   5 | val skeySpec = SecretKeySpec(secretKey.toByteArray(), ""AES"")
   6 |
>  7 | val cipher: Cipher = Cipher.getInstance(""AES/CBC/PKCS5PADDING"")
   8 | cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv) // Noncompliant (s3329)
   9 |
  10 | val encryptedBytes: ByteArray = cipher.doFinal(""foo"".toByteArray())
     ^ Col 0
",kotlin.kotlin_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/python_insecure_ciphers.py,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,21,"
   4 | )
   5 | from cryptography.hazmat.primitives.ciphers import (
   6 |     algorithms,
   7 |     Cipher,
   8 |     modes,
   9 | )
  10 | import os
  11 |
  12 | key = os.urandom(16)
  13 | iv = os.urandom(16)
  14 |
  15 | # Noncompliant: vulnerable algorithms
  16 | tdes4 = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend())
  17 | bf3 = Cipher(algorithms.Blowfish(key), mode=None, backend=default_backend())
  18 | rc42 = Cipher(algorithms.ARC4(key), mode=None, backend=default_backend())
  19 |
  20 | # Non Compliant: vulnerable modes
> 21 | aes = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
  22 |
  23 | # Compliant
  24 | aes2 = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
     ^ Col 0
",python.python_unsafe_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/python_insecure_ciphers.py,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,18,"
   4 | )
   5 | from cryptography.hazmat.primitives.ciphers import (
   6 |     algorithms,
   7 |     Cipher,
   8 |     modes,
   9 | )
  10 | import os
  11 |
  12 | key = os.urandom(16)
  13 | iv = os.urandom(16)
  14 |
  15 | # Noncompliant: vulnerable algorithms
  16 | tdes4 = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend())
  17 | bf3 = Cipher(algorithms.Blowfish(key), mode=None, backend=default_backend())
> 18 | rc42 = Cipher(algorithms.ARC4(key), mode=None, backend=default_backend())
  19 |
  20 | # Non Compliant: vulnerable modes
  21 | aes = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
  22 |
  23 | # Compliant
  24 | aes2 = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
     ^ Col 0
",python.python_unsafe_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/python_insecure_ciphers.py,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,17,"
   4 | )
   5 | from cryptography.hazmat.primitives.ciphers import (
   6 |     algorithms,
   7 |     Cipher,
   8 |     modes,
   9 | )
  10 | import os
  11 |
  12 | key = os.urandom(16)
  13 | iv = os.urandom(16)
  14 |
  15 | # Noncompliant: vulnerable algorithms
  16 | tdes4 = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend())
> 17 | bf3 = Cipher(algorithms.Blowfish(key), mode=None, backend=default_backend())
  18 | rc42 = Cipher(algorithms.ARC4(key), mode=None, backend=default_backend())
  19 |
  20 | # Non Compliant: vulnerable modes
  21 | aes = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
  22 |
  23 | # Compliant
  24 | aes2 = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
     ^ Col 0
",python.python_unsafe_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/python_insecure_ciphers.py,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,16,"
   4 | )
   5 | from cryptography.hazmat.primitives.ciphers import (
   6 |     algorithms,
   7 |     Cipher,
   8 |     modes,
   9 | )
  10 | import os
  11 |
  12 | key = os.urandom(16)
  13 | iv = os.urandom(16)
  14 |
  15 | # Noncompliant: vulnerable algorithms
> 16 | tdes4 = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend())
  17 | bf3 = Cipher(algorithms.Blowfish(key), mode=None, backend=default_backend())
  18 | rc42 = Cipher(algorithms.ARC4(key), mode=None, backend=default_backend())
  19 |
  20 | # Non Compliant: vulnerable modes
  21 | aes = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
  22 |
  23 | # Compliant
  24 | aes2 = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
     ^ Col 0
",python.python_unsafe_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/python_sha1_haslib_not_alias.py,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,18,"
   1 | # pylint: skip-file
   2 | # type: ignore
   3 | import hashlib
   4 |
   5 | # Safe
   6 | m = hashlib.sha256()
   7 | m.update(b""Nobody inspects"")
   8 | m.update(b"" the spammish repetition"")
   9 | m.digest()
  10 |
  11 | # Unsafe line 12 must be marked
  12 | m = hashlib.sha1()
  13 | m.update(b""Nobody inspects"")
  14 | m.update(b"" the spammish repetition"")
  15 | m.digest()
  16 |
  17 | # unsafe line 18 must be marked
> 18 | hashlib.sha1(""Sensitive DATA"")
     ^ Col 0
",python.python_insec_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/python_sha1_haslib_not_alias.py,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,12,"
   1 | # pylint: skip-file
   2 | # type: ignore
   3 | import hashlib
   4 |
   5 | # Safe
   6 | m = hashlib.sha256()
   7 | m.update(b""Nobody inspects"")
   8 | m.update(b"" the spammish repetition"")
   9 | m.digest()
  10 |
  11 | # Unsafe line 12 must be marked
> 12 | m = hashlib.sha1()
  13 | m.update(b""Nobody inspects"")
  14 | m.update(b"" the spammish repetition"")
  15 | m.digest()
  16 |
  17 | # unsafe line 18 must be marked
  18 | hashlib.sha1(""Sensitive DATA"")
     ^ Col 0
",python.python_insec_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/python_sha1_haslib_with_alias.py,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,15,"
   1 | # pylint: skip-file
   2 | # type: ignore
   3 |
   4 | from hashlib import (
   5 |     sha1 as danger,
   6 | )
   7 |
   8 | # Unsafe line 9 must be marked
   9 | m = danger()
  10 | m.update(b""Nobody inspects"")
  11 | m.update(b"" the spammish repetition"")
  12 | m.digest()
  13 |
  14 | # unsafe line 15 must be marked
> 15 | danger(""Sensitive DATA"")
     ^ Col 0
",python.python_insec_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/python_sha1_haslib_with_alias.py,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
   1 | # pylint: skip-file
   2 | # type: ignore
   3 |
   4 | from hashlib import (
   5 |     sha1 as danger,
   6 | )
   7 |
   8 | # Unsafe line 9 must be marked
>  9 | m = danger()
  10 | m.update(b""Nobody inspects"")
  11 | m.update(b"" the spammish repetition"")
  12 | m.digest()
  13 |
  14 | # unsafe line 15 must be marked
  15 | danger(""Sensitive DATA"")
     ^ Col 0
",python.python_insec_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/swift_insecure_cipher.swift,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | import CommonCrypto
   2 | import IDZSwiftCommonCrypto
   3 | import CryptoSwift
   4 |
   5 | import Crypto
   6 |
   7 |
   8 | let algorithm = CCAlgorithm(kCCAlgorithmDES) // Noncompliant: 64 bits block size
   9 |
> 10 | let algorithm = .des // Noncompliant: 64 bits block size
  11 |
  12 | let blowfish = try Blowfish(key: key, blockMode: GCM(iv: iv, mode: .combined), padding: .pkcs7)
  13 |  // Noncompliant: 64 bits block size
  14 |
  15 |
  16 |
  17 |
  18 |
  19 | let sealedBox = try AES.GCM.seal(input, using: key) // Compliant
  20 |
  21 | let algorithm = CCAlgorithm(kCCAlgorithmAES) // Compliant
     ^ Col 0
",swift.swift_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/swift_insecure_cipher.swift,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,8,"
   1 | import CommonCrypto
   2 | import IDZSwiftCommonCrypto
   3 | import CryptoSwift
   4 |
   5 | import Crypto
   6 |
   7 |
>  8 | let algorithm = CCAlgorithm(kCCAlgorithmDES) // Noncompliant: 64 bits block size
   9 |
  10 | let algorithm = .des // Noncompliant: 64 bits block size
  11 |
  12 | let blowfish = try Blowfish(key: key, blockMode: GCM(iv: iv, mode: .combined), padding: .pkcs7)
  13 |  // Noncompliant: 64 bits block size
  14 |
  15 |
  16 |
  17 |
  18 |
  19 | let sealedBox = try AES.GCM.seal(input, using: key) // Compliant
  20 |
  21 | let algorithm = CCAlgorithm(kCCAlgorithmAES) // Compliant
     ^ Col 0
",swift.swift_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/swift_insecure_cipher.swift,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,12,"
   2 | import IDZSwiftCommonCrypto
   3 | import CryptoSwift
   4 |
   5 | import Crypto
   6 |
   7 |
   8 | let algorithm = CCAlgorithm(kCCAlgorithmDES) // Noncompliant: 64 bits block size
   9 |
  10 | let algorithm = .des // Noncompliant: 64 bits block size
  11 |
> 12 | let blowfish = try Blowfish(key: key, blockMode: GCM(iv: iv, mode: .combined), padding: .pkcs7)
  13 |  // Noncompliant: 64 bits block size
  14 |
  15 |
  16 |
  17 |
  18 |
  19 | let sealedBox = try AES.GCM.seal(input, using: key) // Compliant
  20 |
  21 | let algorithm = CCAlgorithm(kCCAlgorithmAES) // Compliant
  22 |
     ^ Col 0
",swift.swift_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/swift_insecurre_cryptor.swift,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 |
   2 |
   3 | let cryptor = try Cryptor(operation: .encrypt, algorithm: .des, options: .none, key: key, iv: []) // Noncompliant
   4 |
   5 | let crypt = CkoCrypt2()
>  6 | crypt.CryptAlgorithm = ""3des"" // Noncompliant
   7 |
   8 |
   9 |
  10 | let cryptor = try Cryptor(operation: .encrypt, algorithm: .aes, options: .none, key: key, iv: []) // Compliant
  11 |
  12 | let crypt = CkoCrypt2()
  13 | crypt.CryptAlgorithm = ""aes"" // Compliant
     ^ Col 0
",swift.swift_insecure_cryptor
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/swift_insecurre_cryptor.swift,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,3,"
   1 |
   2 |
>  3 | let cryptor = try Cryptor(operation: .encrypt, algorithm: .des, options: .none, key: key, iv: []) // Noncompliant
   4 |
   5 | let crypt = CkoCrypt2()
   6 | crypt.CryptAlgorithm = ""3des"" // Noncompliant
   7 |
   8 |
   9 |
  10 | let cryptor = try Cryptor(operation: .encrypt, algorithm: .aes, options: .none, key: key, iv: []) // Compliant
  11 |
  12 | let crypt = CkoCrypt2()
  13 | crypt.CryptAlgorithm = ""aes"" // Compliant
     ^ Col 0
",swift.swift_insecure_cryptor
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_cipher.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | import crypto from 'crypto';
   2 |
   3 | function unsafe_encrypt(password:string, algorithm: string = 'aes-256-cbc'): string {
   4 |     var cipher = crypto.createCipher(algorithm, password);
   5 |     return cipher;
   6 | }
   7 |
   8 | function unsafe_decrypt(password:string): string {
   9 |     const algo:string = 'rc4'
> 10 |     var decipher = crypto.createDecipher(algo, password);
  11 |     return decipher;
  12 | }
  13 |
  14 |
  15 | function safe_decrypt(password:string): string {
  16 |     const algo:string = 'ecdsa-aria-128-gcm'
  17 |     var decipher = crypto.createDecipher(algo, password);
  18 |     return decipher;
  19 | }
     ^ Col 0
",typescript.ts_insecure_create_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_cipher.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,4,"
   1 | import crypto from 'crypto';
   2 |
   3 | function unsafe_encrypt(password:string, algorithm: string = 'aes-256-cbc'): string {
>  4 |     var cipher = crypto.createCipher(algorithm, password);
   5 |     return cipher;
   6 | }
   7 |
   8 | function unsafe_decrypt(password:string): string {
   9 |     const algo:string = 'rc4'
  10 |     var decipher = crypto.createDecipher(algo, password);
  11 |     return decipher;
  12 | }
  13 |
  14 |
  15 | function safe_decrypt(password:string): string {
  16 |     const algo:string = 'ecdsa-aria-128-gcm'
  17 |     var decipher = crypto.createDecipher(algo, password);
  18 |     return decipher;
  19 | }
     ^ Col 0
",typescript.ts_insecure_create_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_ciphers.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
   1 | import * as CryptoJS from 'crypto-js';
   2 |
   3 | export class EncryptionService {
   4 |   constructor() {}
   5 |
   6 |  unsafe1(plainText: string, key: string) {
>  7 |     const encrypted = CryptoJS.RC4.encrypt(plainText, key, {
   8 |       mode: CryptoJS.mode.ECB,
   9 |     });
  10 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  11 |   }
  12 |
  13 |   unsafe2(plainText: string, key: string) {
  14 |   const cipher_mode = CryptoJS.mode.CBC;
  15 |   const config = {mode: cipher_mode, padding: CryptoJS.pad.NoPadding};
  16 |     const encrypted = CryptoJS.AES.encrypt(plainText, key, config);
  17 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  18 |   }
  19 |
  20 |  safe(plainText: string, key: string) {
  21 |     const encrypted = CryptoJS.AES.encrypt(plainText, key, {
     ^ Col 0
",typescript.typescript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_ciphers.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,16,"
   6 |  unsafe1(plainText: string, key: string) {
   7 |     const encrypted = CryptoJS.RC4.encrypt(plainText, key, {
   8 |       mode: CryptoJS.mode.ECB,
   9 |     });
  10 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  11 |   }
  12 |
  13 |   unsafe2(plainText: string, key: string) {
  14 |   const cipher_mode = CryptoJS.mode.CBC;
  15 |   const config = {mode: cipher_mode, padding: CryptoJS.pad.NoPadding};
> 16 |     const encrypted = CryptoJS.AES.encrypt(plainText, key, config);
  17 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  18 |   }
  19 |
  20 |  safe(plainText: string, key: string) {
  21 |     const encrypted = CryptoJS.AES.encrypt(plainText, key, {
  22 |       mode: CryptoJS.mode.GCM,
  23 |     });
  24 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  25 |   }
  26 |
     ^ Col 0
",typescript.typescript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,11,"
   1 | import { Router } from ""express"";
   2 | let CryptoJS = require(""crypto-js"");
   3 | let router = Router();
   4 |
   5 | router.get(""/test120/:target"", function (req, res) {
   6 |   const keyString = ""*4wQZgn+U2RW_mb="";
   7 |
   8 |   let parameters = req.params;
   9 |   let target = parameters[""target""];
  10 |
> 11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
     ^ Col 0
",typescript.typescript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,16,"
   6 |   const keyString = ""*4wQZgn+U2RW_mb="";
   7 |
   8 |   let parameters = req.params;
   9 |   let target = parameters[""target""];
  10 |
  11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
> 16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
  26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
     ^ Col 0
",typescript.typescript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,21,"
  11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
> 21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
  26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
  27 |     mode: CryptoJS.mode.CBC,
  28 |     padding: CryptoJS.pad.NoPadding,
  29 |   }).toString();
  30 |   res.json({ encryptedRSA: encryptedRSA });
  31 | });
     ^ Col 0
",typescript.typescript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,26,"
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
> 26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
  27 |     mode: CryptoJS.mode.CBC,
  28 |     padding: CryptoJS.pad.NoPadding,
  29 |   }).toString();
  30 |   res.json({ encryptedRSA: encryptedRSA });
  31 | });
  32 |
  33 | export default router;
     ^ Col 0
",typescript.typescript_insecure_encrypt
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_hash.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
   1 | import { Router } from ""express"";
   2 | import crypto from ""crypto"";
   3 |
   4 |
   5 | const router = Router();
   6 |
   7 | router.get(""/test139/:target"", function (req, res) {
   8 |   let target = req.params[""target""];
>  9 |   const hash = crypto.createHash(""RSA-MD4"");
  10 |
  11 |   hash.on(""readable"", () => {
  12 |     const data = hash.read();
  13 |     if (data) {
  14 |       res.json({ hash: data.toString(""hex"") });
  15 |     }
  16 |   });
  17 |   hash.write(target);
  18 |   hash.end();
  19 | });
  20 |
  21 | export default router
     ^ Col 0
",typescript.typescript_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,14,"
   1 | ng System.Security.Cryptography;
   2 |
   3 | espace Cypher_Example
   4 |
   5 |  class CypherExample
   6 |  {
   7 |      public static void Main()
   8 |      {
   9 |          MD5 myAes = MD5.Create();
  10 |          SHA1 myAes = SHA1.Create();
  11 |          HMACMD5 myAes = HMACMD5.Create();
  12 |          DES myAes = DES.Create();
  13 |          TripleDES myAes = TripleDES.Create();
> 14 |          var hashProvider3 = new SHA1Managed();
  15 |          var hashProvider3 = new RC2CryptoServiceProvider();
  16 |      }
  17 |  }
  18 |
     ^ Col 3
",c_sharp.c_sharp_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,11,"
   1 | using System.Security.Cryptography;
   2 |
   3 | namespace Cypher_Example
   4 | {
   5 |     class CypherExample
   6 |     {
   7 |         public static void Main()
   8 |         {
   9 |             MD5 myAes = MD5.Create();
  10 |             SHA1 myAes = SHA1.Create();
> 11 |             HMACMD5 myAes = HMACMD5.Create();
  12 |             DES myAes = DES.Create();
  13 |             TripleDES myAes = TripleDES.Create();
  14 |             var hashProvider3 = new SHA1Managed();
  15 |             var hashProvider3 = new RC2CryptoServiceProvider();
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | using System.Security.Cryptography;
   2 |
   3 | namespace Cypher_Example
   4 | {
   5 |     class CypherExample
   6 |     {
   7 |         public static void Main()
   8 |         {
   9 |             MD5 myAes = MD5.Create();
> 10 |             SHA1 myAes = SHA1.Create();
  11 |             HMACMD5 myAes = HMACMD5.Create();
  12 |             DES myAes = DES.Create();
  13 |             TripleDES myAes = TripleDES.Create();
  14 |             var hashProvider3 = new SHA1Managed();
  15 |             var hashProvider3 = new RC2CryptoServiceProvider();
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
   1 | using System.Security.Cryptography;
   2 |
   3 | namespace Cypher_Example
   4 | {
   5 |     class CypherExample
   6 |     {
   7 |         public static void Main()
   8 |         {
>  9 |             MD5 myAes = MD5.Create();
  10 |             SHA1 myAes = SHA1.Create();
  11 |             HMACMD5 myAes = HMACMD5.Create();
  12 |             DES myAes = DES.Create();
  13 |             TripleDES myAes = TripleDES.Create();
  14 |             var hashProvider3 = new SHA1Managed();
  15 |             var hashProvider3 = new RC2CryptoServiceProvider();
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,21,"
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 |  ""crypto/cipher""
  11 |  ""crypto/blowfish""
  12 |  ""fmt""
  13 | )
  14 |
  15 |
  16 | func main() {
  17 |
  18 |  Hripemd:= ripemd160.New()
  19 |  Hmd4 = md4.New()
  20 |  Hmd5 = md5.New()
> 21 |  Hsha1 := sha1.New()
  22 |  Hsha512 := sha512.New()
  23 |
  24 |  ede2Key := []byte(""example key 1234"")
  25 |
  26 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  27 |  block, _ := blowfish.NewCipher(key)
  28 | }
     ^ Col 0
",go.go_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,20,"
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 |  ""crypto/cipher""
  11 |  ""crypto/blowfish""
  12 |  ""fmt""
  13 | )
  14 |
  15 |
  16 | func main() {
  17 |
  18 |  Hripemd:= ripemd160.New()
  19 |  Hmd4 = md4.New()
> 20 |  Hmd5 = md5.New()
  21 |  Hsha1 := sha1.New()
  22 |  Hsha512 := sha512.New()
  23 |
  24 |  ede2Key := []byte(""example key 1234"")
  25 |
  26 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  27 |  block, _ := blowfish.NewCipher(key)
  28 | }
     ^ Col 0
",go.go_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,19,"
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 |  ""crypto/cipher""
  11 |  ""crypto/blowfish""
  12 |  ""fmt""
  13 | )
  14 |
  15 |
  16 | func main() {
  17 |
  18 |  Hripemd:= ripemd160.New()
> 19 |  Hmd4 = md4.New()
  20 |  Hmd5 = md5.New()
  21 |  Hsha1 := sha1.New()
  22 |  Hsha512 := sha512.New()
  23 |
  24 |  ede2Key := []byte(""example key 1234"")
  25 |
  26 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  27 |  block, _ := blowfish.NewCipher(key)
  28 | }
     ^ Col 0
",go.go_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,18,"
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 |  ""crypto/cipher""
  11 |  ""crypto/blowfish""
  12 |  ""fmt""
  13 | )
  14 |
  15 |
  16 | func main() {
  17 |
> 18 |  Hripemd:= ripemd160.New()
  19 |  Hmd4 = md4.New()
  20 |  Hmd5 = md5.New()
  21 |  Hsha1 := sha1.New()
  22 |  Hsha512 := sha512.New()
  23 |
  24 |  ede2Key := []byte(""example key 1234"")
  25 |
  26 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  27 |  block, _ := blowfish.NewCipher(key)
  28 | }
     ^ Col 0
",go.go_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,25,"
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
> 25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
     ^ Col 0
",java.java_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,26,"
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
> 26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
     ^ Col 0
",java.java_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,27,"
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
> 27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
     ^ Col 0
",java.java_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,29,"
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
> 29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
     ^ Col 0
",java.java_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,30,"
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
> 30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
  40 |
     ^ Col 0
",java.java_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
> 9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,8,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
> 8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
> 7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
> 6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,5,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
> 5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
> 9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,8,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
> 8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
> 7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
> 6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,5,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
> 5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,51,"
  37 |     val k3 = ECGenParameterSpec(""secp521r1"")
  38 |     val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |     val spec1: ConnectionSpec = (
  41 |         ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  42 |             .tlsVersions(TlsVersion.TLS_1_1)
  43 |             .build()
  44 |     )
  45 |     val spec2: ConnectionSpec = (
  46 |         ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  47 |             .tlsVersions(TlsVersion.TLS_1_2)
  48 |             .build()
  49 |     )
  50 |
> 51 |     val md2: MessageDigest = MessageDigest.getInstance(""SHA1"")
  52 |     val md3: MessageDigest = MessageDigest.getInstance(""SHA-512"")
  53 | } catch (e: NoSuchAlgorithmException) {
  54 | } catch (e: NoSuchPaddingException) {
  55 | }
  56 |
  57 |
     ^ Col 8
",kotlin.kotlin_insecure_hash
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_require.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,10,"
   1 | declare function require(name:string);
   2 | const anyName = require(""js-sha1"")
   3 |
   4 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
   5 |
   6 | anyName("""");
   7 | anyName.hex("""");
   8 | anyName.array("""");
   9 | anyName.digest("""");
> 10 | anyName.arrayBuffer('');
     ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_require.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
   1 | declare function require(name:string);
   2 | const anyName = require(""js-sha1"")
   3 |
   4 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
   5 |
   6 | anyName("""");
   7 | anyName.hex("""");
   8 | anyName.array("""");
>  9 | anyName.digest("""");
  10 | anyName.arrayBuffer('');
     ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_require.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,8,"
   1 | declare function require(name:string);
   2 | const anyName = require(""js-sha1"")
   3 |
   4 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
   5 |
   6 | anyName("""");
   7 | anyName.hex("""");
>  8 | anyName.array("""");
   9 | anyName.digest("""");
  10 | anyName.arrayBuffer('');
     ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_require.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
   1 | declare function require(name:string);
   2 | const anyName = require(""js-sha1"")
   3 |
   4 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
   5 |
   6 | anyName("""");
>  7 | anyName.hex("""");
   8 | anyName.array("""");
   9 | anyName.digest("""");
  10 | anyName.arrayBuffer('');
     ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_require.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | declare function require(name:string);
   2 | const anyName = require(""js-sha1"")
   3 |
   4 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
   5 |
>  6 | anyName("""");
   7 | anyName.hex("""");
   8 | anyName.array("""");
   9 | anyName.digest("""");
  10 | anyName.arrayBuffer('');
     ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_use.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,9,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
> 9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_use.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,8,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
> 8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_use.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,7,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
> 7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_use.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
> 6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/ts_insecure_sha1_use.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,5,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
> 5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,34,"
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
> 34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
  40 |
  41 |     public static void safe(String[] args) {
  42 |
  43 |         MessageDigest md = MessageDigest.getInstance(""ShA-256"");
  44 |
     ^ Col 0
",java.java_insecure_key_ec
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,32,"
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
> 32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
  40 |
  41 |     public static void safe(String[] args) {
  42 |
     ^ Col 0
",java.java_insecure_key_rsa
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,38,"
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
> 38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
  40 |
  41 |     public static void safe(String[] args) {
  42 |
  43 |         MessageDigest md = MessageDigest.getInstance(""ShA-256"");
  44 |
  45 |         DigestUtils.sha3_256(""test"");
  46 |         Hashing.sha256().hashString(password,StandardCharsets.UTF_8).toString();
  47 |
  48 |         Cipher c = Cipher.getInstance(""AES"");
     ^ Col 0
",java.java_insecure_key_secret
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/js_insecure_ec_keypair.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | import { Router } from ""express"";
   2 | const router = Router();
   3 | const { generateKeyPair } = require(""crypto"");
   4 |
   5 | function test(req, res) {
>  6 |   generateKeyPair(
   7 |     ""ec"",
   8 |     {
   9 |       namedCurve: ""secp192k1"",
  10 |       publicKeyEncoding: {
  11 |         type: ""spki"",
  12 |         format: ""pem"",
  13 |       },
  14 |       privateKeyEncoding: {
  15 |         type: ""pkcs8"",
  16 |         format: ""pem"",
  17 |       },
  18 |     },
  19 |     (err, publicKey, privateKey) => {
  20 |       if (err) console.log(""Error!"", err);
  21 |       res.send(publicKey);
     ^ Col 0
",javascript.javascript_insecure_ec_keypair
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/js_insecure_ecdh.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | import { Router } from ""express"";
   2 | import * as crypto from ""crypto"";
   3 | const router = Router();
   4 |
   5 | router.get(""/test127"", function (req, res) {
>  6 |   const bob = crypto.createECDH(""c2pnb163v2"");
   7 |   const bobKey = bob.generateKeys();
   8 |   res.send(bobKey.toString(""hex""));
   9 | });
  10 |
  11 | export default router;
     ^ Col 0
",javascript.javascript_insecure_ecdh_key
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/js_insecure_rsa_keypair.js,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,20,"
  10 |       type: ""pkcs1"",
  11 |       format: ""pem"",
  12 |     },
  13 |     privateKeyEncoding: {
  14 |       type: ""pkcs1"",
  15 |       format: ""pem"",
  16 |       //cipher: ""aes-256-cbc"", //Optional
  17 |       //passphrase: """", //Optional
  18 |     },
  19 |   };
> 20 |   generateKeyPair(
  21 |     ""rsa"",
  22 |     key_options,
  23 |     (err, publicKey, _privateKey) => {
  24 |       if (err) console.log(""Error!"", err);
  25 |       res.send(publicKey);
  26 |     }
  27 |   );
  28 | }
  29 |
  30 | router.get(""/test130"", test);
     ^ Col 0
",javascript.javascript_insecure_rsa_keypair
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,36,"
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
> 36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |             val spec1: ConnectionSpec = (
  41 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  42 |                     .tlsVersions(TlsVersion.TLS_1_1)
  43 |                     .build()
  44 |             )
  45 |             val spec2: ConnectionSpec = (
  46 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
     ^ Col 0
",kotlin.kotlin_insecure_key
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,38,"
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
> 38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |             val spec1: ConnectionSpec = (
  41 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  42 |                     .tlsVersions(TlsVersion.TLS_1_1)
  43 |                     .build()
  44 |             )
  45 |             val spec2: ConnectionSpec = (
  46 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  47 |                     .tlsVersions(TlsVersion.TLS_1_2)
  48 |                     .build()
     ^ Col 0
",kotlin.kotlin_insecure_key
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/kt_insecure_key_generator.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | val keyPairGen1 = KeyPairGenerator.getInstance(""RSA"")
   2 | keyPairGen1.initialize(1024) // Noncompliant
   3 |
   4 |
   5 | val keyGen1 = KeyGenerator.getInstance(""AES"")
>  6 | keyGen1.init(64) // Noncompliant
   7 |
   8 |
   9 |
  10 |
  11 | val keyPairGen6 = KeyPairGenerator.getInstance(""RSA"")
  12 | keyPairGen6.initialize(2048) // Compliant
  13 |
  14 |
  15 | val keyGen2safe = KeyGenerator.getInstance(""AES"")
  16 | keyGen2safe.init(128) // Compliant
     ^ Col 0
",kotlin.kt_insecure_key_gen
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/kt_insecure_key_generator.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,2,"
   1 | val keyPairGen1 = KeyPairGenerator.getInstance(""RSA"")
>  2 | keyPairGen1.initialize(1024) // Noncompliant
   3 |
   4 |
   5 | val keyGen1 = KeyGenerator.getInstance(""AES"")
   6 | keyGen1.init(64) // Noncompliant
   7 |
   8 |
   9 |
  10 |
  11 | val keyPairGen6 = KeyPairGenerator.getInstance(""RSA"")
  12 | keyPairGen6.initialize(2048) // Compliant
  13 |
  14 |
  15 | val keyGen2safe = KeyGenerator.getInstance(""AES"")
  16 | keyGen2safe.init(128) // Compliant
     ^ Col 0
",kotlin.kt_insecure_key_pair_gen
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/kt_insecure_pair_generator.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,4,"
  1 |
  2 |
  3 | val keyPairGen1 = KeyPairGenerator.getInstance(""RSA"")
> 4 | keyPairGen1.initialize(1024) // Noncompliant
  5 |
  6 | val keyPairGen6 = KeyPairGenerator.getInstance(""RSA"")
  7 | keyPairGen6.initialize(2048) // Compliant
    ^ Col 0
",kotlin.kt_insecure_key_pair_gen
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/kt_iv_parameter_spec.kt,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,4,"
   1 |
   2 | val bytesIV = ""7cVgr5cbdCZVw5WY"".toByteArray(charset(""UTF-8"")) // Predictable / hardcoded IV
   3 |
>  4 | val iv = IvParameterSpec(bytesIV)
   5 | val skeySpec = SecretKeySpec(secretKey.toByteArray(), ""AES"")
   6 |
   7 | val cipher: Cipher = Cipher.getInstance(""AES/CBC/PKCS5PADDING"")
   8 | cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv) // Noncompliant (s3329)
   9 |
  10 | val encryptedBytes: ByteArray = cipher.doFinal(""foo"".toByteArray())
     ^ Col 0
",kotlin.kt_insecure_parameter_spec
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/ts_insecure_ec_keypair.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | import { Router } from ""express"";
   2 | const router = Router();
   3 | const { generateKeyPair } = require(""crypto"");
   4 |
   5 | function test(req, res) {
>  6 |   generateKeyPair(
   7 |     ""ec"",
   8 |     {
   9 |       namedCurve: ""secp192k1"",
  10 |       publicKeyEncoding: {
  11 |         type: ""spki"",
  12 |         format: ""pem"",
  13 |       },
  14 |       privateKeyEncoding: {
  15 |         type: ""pkcs8"",
  16 |         format: ""pem"",
  17 |       },
  18 |     },
  19 |     (err, publicKey, privateKey) => {
  20 |       if (err) console.log(""Error!"", err);
  21 |       res.send(publicKey);
     ^ Col 0
",typescript.typescript_insecure_ec_keypair
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/ts_insecure_ecdh.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,6,"
   1 | import { Router } from ""express"";
   2 | import * as crypto from ""crypto"";
   3 | const router = Router();
   4 |
   5 | router.get(""/test127"", function test (req, res) {
>  6 |   const bob = crypto.createECDH(""c2pnb163v2"");
   7 |   const bobKey = bob.generateKeys();
   8 |   res.send(bobKey.toString(""hex""));
   9 | });
  10 |
  11 | export default router;
     ^ Col 0
",typescript.ts_insecure_ecdh_key
052. Insecure encryption algorithm,CWE-310,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/ts_insecure_rsa_keypair.ts,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,20,"
   6 | router.get(""/test130"", (_req, res) => {
   7 |   let key_options = {
   8 |     modulusLength: 1024,
   9 |     publicKeyEncoding: {
  10 |       type: ""pkcs1"",
  11 |       format: ""pem"",
  12 |     },
  13 |     privateKeyEncoding: {
  14 |       type: ""pkcs1"",
  15 |       format: ""pem"",
  16 |       //cipher: ""aes-256-cbc"", //Optional
  17 |       //passphrase: """", //Optional
  18 |     },
  19 |   };
> 20 |   generateKeyPair(""rsa"", key_options, (err: any, publicKey: any, _privateKey: any) => {
  21 |     if (err) console.log(""Error!"", err);
  22 |     res.send(publicKey);
  23 |   });
  24 | });
  25 |
  26 | export default router;
     ^ Col 0
",typescript.ts_insecure_rsa_keypair
052. Insecure encryption algorithm,CWE-310,Use of insecure password encoder in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,36,"
  26 | MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 | MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 | DigestUtils.sha1Hex(""test""); //
  30 | Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 | new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 | new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
> 36 | ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 | SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |
  40 |
  41 | ic static void safe(String[] args) {
  42 |
  43 | MessageDigest md = MessageDigest.getInstance(""ShA-256"");
  44 |
  45 | DigestUtils.sha3_256(""test"");
  46 | Hashing.sha256().hashString(password,StandardCharsets.UTF_8).toString();
     ^ Col 8
",java.java_insecure_pass
Summary: 167 vulnerabilities were found in your targets.