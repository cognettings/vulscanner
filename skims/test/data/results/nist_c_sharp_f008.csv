title,cwe,description,cvss,finding,stream,kind,where,snippet,method
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
  48 |                 }
  49 |             }
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         if (data != null)
  56 |         {
  57 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 58 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  59 |         }
  60 |     }
  61 | #endif //omitbad
  62 | #if (!OMITGOOD)
  63 |     public override void Good(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         GoodG2B(req, resp);
  66 |     }
  67 |
  68 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (false)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (5 != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  74 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (PRIVATE_CONST_FALSE)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  74 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (privateFalse)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  73 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (PRIVATE_CONST_FIVE != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  73 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (privateFive != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         }
   72 |         else
   73 |         {
   74 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   75 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   76 |             data = null;
   77 |         }
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  81 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   87 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   88 |     {
   89 |         string data;
   90 |         if (PrivateReturnsFalse())
   91 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FALSE)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFalse)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.StaticReturnsFalse())
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |             }
  57 |         }
  58 |         else
  59 |         {
  60 |             /* FIX: Use a hardcoded string */
  61 |             data = ""foo"";
  62 |         }
  63 |         if (data != null)
  64 |         {
  65 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 66 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  72 |      * both branches use the GoodSource */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FIVE != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFive != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |             break;
   59 |         default:
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |             break;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  68 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data = null;
   77 |         switch (5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,62,"
  52 |                 catch (IOException exceptIO)
  53 |                 {
  54 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  55 |                 }
  56 |             }
  57 |             break;
  58 |         }
  59 |         if (data != null)
  60 |         {
  61 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 62 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  63 |         }
  64 |     }
  65 | #endif //omitbad
  66 | #if (!OMITGOOD)
  67 |     /* goodG2B() - use goodsource and badsink */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
  71 |         while (true)
  72 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         for (int i = 0; i < 1; i++)
  56 |         {
  57 |             if (data != null)
  58 |             {
  59 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 60 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  61 |             }
  62 |         }
  63 |     }
  64 | #endif //omitbad
  65 | #if (!OMITGOOD)
  66 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  67 |      * for statement with the one in the for statement */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,42,"
   32 |     private bool badPrivate = false;
   33 | #if (!OMITBAD)
   34 |     public override void Bad(HttpRequest req, HttpResponse resp)
   35 |     {
   36 |         string data;
   37 |         badPrivate = true;
   38 |         data = Bad_source(req, resp);
   39 |         if (data != null)
   40 |         {
   41 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  42 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   43 |         }
   44 |     }
   45 |
   46 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   47 |     {
   48 |         string data;
   49 |         if (badPrivate)
   50 |         {
   51 |             data = """"; /* Initialize data */
   52 |             /* Read data using an outbound tcp connection */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  56 |                 }
  57 |             }
  58 |             dataCopy = data;
  59 |         }
  60 |         {
  61 |             string data = dataCopy;
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 65 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     public override void Good(HttpRequest req, HttpResponse resp)
  72 |     {
  73 |         GoodG2B(req, resp);
  74 |     }
  75 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Connect_tcp_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,64,"
  54 |         return data;
  55 |     }
  56 |
  57 |     /* use badsource and badsink */
  58 |     public override void Bad(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data = BadSource(req, resp);
  61 |         if (data != null)
  62 |         {
  63 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 64 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  65 |         }
  66 |     }
  67 | #endif //omitbad
  68 | #if (!OMITGOOD)
  69 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
  72 |         /* FIX: Use a hardcoded string */
  73 |         data = ""foo"";
  74 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,63,"
  53 |                 }
  54 |             }
  55 |             catch (SqlException exceptSql)
  56 |             {
  57 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  58 |             }
  59 |         }
  60 |         if (data != null)
  61 |         {
  62 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 63 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  64 |         }
  65 |     }
  66 | #endif //omitbad
  67 | #if (!OMITGOOD)
  68 |     public override void Good(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         GoodG2B(req, resp);
  71 |     }
  72 |
  73 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  72 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (false)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  72 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (5 != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |         }
   70 |         else
   71 |         {
   72 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   73 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   74 |             data = null;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  79 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   85 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         if (PRIVATE_CONST_FALSE)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |         }
   70 |         else
   71 |         {
   72 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   73 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   74 |             data = null;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  79 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   85 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         if (privateFalse)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,78,"
   68 |         }
   69 |         else
   70 |         {
   71 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   72 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   73 |             data = null;
   74 |         }
   75 |         if (data != null)
   76 |         {
   77 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  78 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   84 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   85 |     {
   86 |         string data;
   87 |         if (PRIVATE_CONST_FIVE != 5)
   88 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,78,"
   68 |         }
   69 |         else
   70 |         {
   71 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   72 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   73 |             data = null;
   74 |         }
   75 |         if (data != null)
   76 |         {
   77 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  78 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   84 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   85 |     {
   86 |         string data;
   87 |         if (privateFive != 5)
   88 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,86,"
   76 |         }
   77 |         else
   78 |         {
   79 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   80 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   81 |             data = null;
   82 |         }
   83 |         if (data != null)
   84 |         {
   85 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  86 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   87 |         }
   88 |     }
   89 | #endif //omitbad
   90 | #if (!OMITGOOD)
   91 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   92 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   93 |     {
   94 |         string data;
   95 |         if (PrivateReturnsFalse())
   96 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  72 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.STATIC_READONLY_FALSE)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  72 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.staticFalse)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  72 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.StaticReturnsFalse())
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,71,"
   61 |             }
   62 |         }
   63 |         else
   64 |         {
   65 |             /* FIX: Use a hardcoded string */
   66 |             data = ""foo"";
   67 |         }
   68 |         if (data != null)
   69 |         {
   70 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  71 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   72 |         }
   73 |     }
   74 | #endif //omitbad
   75 | #if (!OMITGOOD)
   76 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   77 |      * both branches use the GoodSource */
   78 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  72 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.STATIC_READONLY_FIVE != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  72 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.staticFive != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |             break;
   64 |         default:
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |             break;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  73 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data = null;
   82 |         switch (5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
  57 |                 catch (SqlException exceptSql)
  58 |                 {
  59 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  60 |                 }
  61 |             }
  62 |             break;
  63 |         }
  64 |         if (data != null)
  65 |         {
  66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  68 |         }
  69 |     }
  70 | #endif //omitbad
  71 | #if (!OMITGOOD)
  72 |     /* goodG2B() - use goodsource and badsink */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         while (true)
  77 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |             catch (SqlException exceptSql)
  56 |             {
  57 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  58 |             }
  59 |         }
  60 |         for (int i = 0; i < 1; i++)
  61 |         {
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 65 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  72 |      * for statement with the one in the for statement */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
   31 |     private bool badPrivate = false;
   32 | #if (!OMITBAD)
   33 |     public override void Bad(HttpRequest req, HttpResponse resp)
   34 |     {
   35 |         string data;
   36 |         badPrivate = true;
   37 |         data = Bad_source(req, resp);
   38 |         if (data != null)
   39 |         {
   40 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  41 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   42 |         }
   43 |     }
   44 |
   45 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   46 |     {
   47 |         string data;
   48 |         if (badPrivate)
   49 |         {
   50 |             data = """"; /* Initialize data */
   51 |             /* Read data from a database */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,70,"
   60 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
   61 |                 }
   62 |             }
   63 |             dataCopy = data;
   64 |         }
   65 |         {
   66 |             string data = dataCopy;
   67 |             if (data != null)
   68 |             {
   69 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
>  70 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   71 |             }
   72 |         }
   73 |     }
   74 | #endif //omitbad
   75 | #if (!OMITGOOD)
   76 |     public override void Good(HttpRequest req, HttpResponse resp)
   77 |     {
   78 |         GoodG2B(req, resp);
   79 |     }
   80 |
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Database_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,69,"
  59 |         return data;
  60 |     }
  61 |
  62 |     /* use badsource and badsink */
  63 |     public override void Bad(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         string data = BadSource(req, resp);
  66 |         if (data != null)
  67 |         {
  68 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 69 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  70 |         }
  71 |     }
  72 | #endif //omitbad
  73 | #if (!OMITGOOD)
  74 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  75 |     {
  76 |         string data;
  77 |         /* FIX: Use a hardcoded string */
  78 |         data = ""foo"";
  79 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             HttpCookieCollection cookieSources = req.Cookies;
  36 |             if (cookieSources != null)
  37 |             {
  38 |                 /* POTENTIAL FLAW: Read data from the first cookie value */
  39 |                 data = cookieSources[0].Value;
  40 |             }
  41 |         }
  42 |         if (data != null)
  43 |         {
  44 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 45 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     public override void Good(HttpRequest req, HttpResponse resp)
  51 |     {
  52 |         GoodG2B(req, resp);
  53 |     }
  54 |
  55 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  54 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (false)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  54 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (5 != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         }
   52 |         else
   53 |         {
   54 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   55 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   56 |             data = null;
   57 |         }
   58 |         if (data != null)
   59 |         {
   60 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  61 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (PRIVATE_CONST_FALSE)
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         }
   52 |         else
   53 |         {
   54 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   55 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   56 |             data = null;
   57 |         }
   58 |         if (data != null)
   59 |         {
   60 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  61 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (privateFalse)
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  60 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (PRIVATE_CONST_FIVE != 5)
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  60 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (privateFive != 5)
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         }
   59 |         else
   60 |         {
   61 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   62 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   63 |             data = null;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  68 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (PrivateReturnsFalse())
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  54 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.STATIC_READONLY_FALSE)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  54 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.staticFalse)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  54 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.StaticReturnsFalse())
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
  43 |             }
  44 |         }
  45 |         else
  46 |         {
  47 |             /* FIX: Use a hardcoded string */
  48 |             data = ""foo"";
  49 |         }
  50 |         if (data != null)
  51 |         {
  52 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 53 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  54 |         }
  55 |     }
  56 | #endif //omitbad
  57 | #if (!OMITGOOD)
  58 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  59 |      * both branches use the GoodSource */
  60 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  61 |     {
  62 |         string data;
  63 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  54 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.STATIC_READONLY_FIVE != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  54 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.staticFive != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |             break;
   46 |         default:
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |             break;
   51 |         }
   52 |         if (data != null)
   53 |         {
   54 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  55 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data = null;
   64 |         switch (5)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,49,"
  39 |                 {
  40 |                     /* POTENTIAL FLAW: Read data from the first cookie value */
  41 |                     data = cookieSources[0].Value;
  42 |                 }
  43 |             }
  44 |             break;
  45 |         }
  46 |         if (data != null)
  47 |         {
  48 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 49 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  50 |         }
  51 |     }
  52 | #endif //omitbad
  53 | #if (!OMITGOOD)
  54 |     /* goodG2B() - use goodsource and badsink */
  55 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  56 |     {
  57 |         string data;
  58 |         while (true)
  59 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
  37 |             {
  38 |                 /* POTENTIAL FLAW: Read data from the first cookie value */
  39 |                 data = cookieSources[0].Value;
  40 |             }
  41 |         }
  42 |         for (int i = 0; i < 1; i++)
  43 |         {
  44 |             if (data != null)
  45 |             {
  46 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 47 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  48 |             }
  49 |         }
  50 |     }
  51 | #endif //omitbad
  52 | #if (!OMITGOOD)
  53 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  54 |      * for statement with the one in the for statement */
  55 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  56 |     {
  57 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
   30 |     private bool badPrivate = false;
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  40 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   41 |         }
   42 |     }
   43 |
   44 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   45 |     {
   46 |         string data;
   47 |         if (badPrivate)
   48 |         {
   49 |             data = """"; /* initialize data in case there are no cookies */
   50 |             /* Read data from cookies */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
  42 |                     data = cookieSources[0].Value;
  43 |                 }
  44 |             }
  45 |             dataCopy = data;
  46 |         }
  47 |         {
  48 |             string data = dataCopy;
  49 |             if (data != null)
  50 |             {
  51 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 52 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  53 |             }
  54 |         }
  55 |     }
  56 | #endif //omitbad
  57 | #if (!OMITGOOD)
  58 |     public override void Good(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         GoodG2B(req, resp);
  61 |     }
  62 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Get_Cookies_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,51,"
  41 |         return data;
  42 |     }
  43 |
  44 |     /* use badsource and badsink */
  45 |     public override void Bad(HttpRequest req, HttpResponse resp)
  46 |     {
  47 |         string data = BadSource(req, resp);
  48 |         if (data != null)
  49 |         {
  50 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 51 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  52 |         }
  53 |     }
  54 | #endif //omitbad
  55 | #if (!OMITGOOD)
  56 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  57 |     {
  58 |         string data;
  59 |         /* FIX: Use a hardcoded string */
  60 |         data = ""foo"";
  61 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,75,"
  65 |                     catch(SocketException se)
  66 |                     {
  67 |                         IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
  68 |                     }
  69 |                 }
  70 |             }
  71 |         }
  72 |         if (data != null)
  73 |         {
  74 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 75 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  76 |         }
  77 |     }
  78 | #endif //omitbad
  79 | #if (!OMITGOOD)
  80 |     public override void Good(HttpRequest req, HttpResponse resp)
  81 |     {
  82 |         GoodG2B(req, resp);
  83 |     }
  84 |
  85 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  84 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (false)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  84 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (5 != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,91,"
   81 |         }
   82 |         else
   83 |         {
   84 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   85 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   86 |             data = null;
   87 |         }
   88 |         if (data != null)
   89 |         {
   90 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  91 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   92 |         }
   93 |     }
   94 | #endif //omitbad
   95 | #if (!OMITGOOD)
   96 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   97 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   98 |     {
   99 |         string data;
  100 |         if (PRIVATE_CONST_FALSE)
  101 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,91,"
   81 |         }
   82 |         else
   83 |         {
   84 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   85 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   86 |             data = null;
   87 |         }
   88 |         if (data != null)
   89 |         {
   90 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  91 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   92 |         }
   93 |     }
   94 | #endif //omitbad
   95 | #if (!OMITGOOD)
   96 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   97 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   98 |     {
   99 |         string data;
  100 |         if (privateFalse)
  101 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,90,"
   80 |         }
   81 |         else
   82 |         {
   83 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   84 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   85 |             data = null;
   86 |         }
   87 |         if (data != null)
   88 |         {
   89 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  90 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   91 |         }
   92 |     }
   93 | #endif //omitbad
   94 | #if (!OMITGOOD)
   95 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   96 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   97 |     {
   98 |         string data;
   99 |         if (PRIVATE_CONST_FIVE != 5)
  100 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,90,"
   80 |         }
   81 |         else
   82 |         {
   83 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   84 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   85 |             data = null;
   86 |         }
   87 |         if (data != null)
   88 |         {
   89 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  90 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   91 |         }
   92 |     }
   93 | #endif //omitbad
   94 | #if (!OMITGOOD)
   95 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   96 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   97 |     {
   98 |         string data;
   99 |         if (privateFive != 5)
  100 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,98,"
   88 |         }
   89 |         else
   90 |         {
   91 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   92 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   93 |             data = null;
   94 |         }
   95 |         if (data != null)
   96 |         {
   97 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  98 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   99 |         }
  100 |     }
  101 | #endif //omitbad
  102 | #if (!OMITGOOD)
  103 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
  104 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
  105 |     {
  106 |         string data;
  107 |         if (PrivateReturnsFalse())
  108 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  84 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.STATIC_READONLY_FALSE)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  84 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.staticFalse)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  84 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.StaticReturnsFalse())
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,83,"
   73 |             }
   74 |         }
   75 |         else
   76 |         {
   77 |             /* FIX: Use a hardcoded string */
   78 |             data = ""foo"";
   79 |         }
   80 |         if (data != null)
   81 |         {
   82 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  83 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   84 |         }
   85 |     }
   86 | #endif //omitbad
   87 | #if (!OMITGOOD)
   88 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   89 |      * both branches use the GoodSource */
   90 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  84 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.STATIC_READONLY_FIVE != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  84 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.staticFive != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |             break;
   76 |         default:
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |             break;
   81 |         }
   82 |         if (data != null)
   83 |         {
   84 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  85 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data = null;
   94 |         switch (5)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |                             IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
   70 |                         }
   71 |                     }
   72 |                 }
   73 |             }
   74 |             break;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  79 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B() - use goodsource and badsink */
   85 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         while (true)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,77,"
   67 |                         IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
   68 |                     }
   69 |                 }
   70 |             }
   71 |         }
   72 |         for (int i = 0; i < 1; i++)
   73 |         {
   74 |             if (data != null)
   75 |             {
   76 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
>  77 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   78 |             }
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
   84 |      * for statement with the one in the for statement */
   85 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
   33 |     private bool badPrivate = false;
   34 | #if (!OMITBAD)
   35 |     public override void Bad(HttpRequest req, HttpResponse resp)
   36 |     {
   37 |         string data;
   38 |         badPrivate = true;
   39 |         data = Bad_source(req, resp);
   40 |         if (data != null)
   41 |         {
   42 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  43 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   44 |         }
   45 |     }
   46 |
   47 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   48 |     {
   49 |         string data;
   50 |         if (badPrivate)
   51 |         {
   52 |             data = """"; /* Initialize data */
   53 |             /* Read data using a listening tcp connection */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,82,"
   72 |                     }
   73 |                 }
   74 |             }
   75 |             dataCopy = data;
   76 |         }
   77 |         {
   78 |             string data = dataCopy;
   79 |             if (data != null)
   80 |             {
   81 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
>  82 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   83 |             }
   84 |         }
   85 |     }
   86 | #endif //omitbad
   87 | #if (!OMITGOOD)
   88 |     public override void Good(HttpRequest req, HttpResponse resp)
   89 |     {
   90 |         GoodG2B(req, resp);
   91 |     }
   92 |
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Listen_tcp_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         return data;
   72 |     }
   73 |
   74 |     /* use badsource and badsink */
   75 |     public override void Bad(HttpRequest req, HttpResponse resp)
   76 |     {
   77 |         string data = BadSource(req, resp);
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  81 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
   87 |     {
   88 |         string data;
   89 |         /* FIX: Use a hardcoded string */
   90 |         data = ""foo"";
   91 |         return data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
  48 |                 }
  49 |             }
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         if (data != null)
  56 |         {
  57 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 58 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  59 |         }
  60 |     }
  61 | #endif //omitbad
  62 | #if (!OMITGOOD)
  63 |     public override void Good(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         GoodG2B(req, resp);
  66 |     }
  67 |
  68 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (false)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (5 != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  74 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (PRIVATE_CONST_FALSE)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  74 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (privateFalse)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  73 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (PRIVATE_CONST_FIVE != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  73 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (privateFive != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         }
   72 |         else
   73 |         {
   74 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   75 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   76 |             data = null;
   77 |         }
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  81 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   87 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   88 |     {
   89 |         string data;
   90 |         if (PrivateReturnsFalse())
   91 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FALSE)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFalse)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.StaticReturnsFalse())
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |             }
  57 |         }
  58 |         else
  59 |         {
  60 |             /* FIX: Use a hardcoded string */
  61 |             data = ""foo"";
  62 |         }
  63 |         if (data != null)
  64 |         {
  65 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 66 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  72 |      * both branches use the GoodSource */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FIVE != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  67 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFive != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |             break;
   59 |         default:
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |             break;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  68 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data = null;
   77 |         switch (5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,62,"
  52 |                 catch (IOException exceptIO)
  53 |                 {
  54 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  55 |                 }
  56 |             }
  57 |             break;
  58 |         }
  59 |         if (data != null)
  60 |         {
  61 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 62 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  63 |         }
  64 |     }
  65 | #endif //omitbad
  66 | #if (!OMITGOOD)
  67 |     /* goodG2B() - use goodsource and badsink */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
  71 |         while (true)
  72 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         for (int i = 0; i < 1; i++)
  56 |         {
  57 |             if (data != null)
  58 |             {
  59 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 60 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  61 |             }
  62 |         }
  63 |     }
  64 | #endif //omitbad
  65 | #if (!OMITGOOD)
  66 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  67 |      * for statement with the one in the for statement */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,42,"
   32 |     private bool badPrivate = false;
   33 | #if (!OMITBAD)
   34 |     public override void Bad(HttpRequest req, HttpResponse resp)
   35 |     {
   36 |         string data;
   37 |         badPrivate = true;
   38 |         data = Bad_source(req, resp);
   39 |         if (data != null)
   40 |         {
   41 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  42 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   43 |         }
   44 |     }
   45 |
   46 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   47 |     {
   48 |         string data;
   49 |         if (badPrivate)
   50 |         {
   51 |             data = """"; /* Initialize data */
   52 |             /* read input from WebClient */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  56 |                 }
  57 |             }
  58 |             dataCopy = data;
  59 |         }
  60 |         {
  61 |             string data = dataCopy;
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 65 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     public override void Good(HttpRequest req, HttpResponse resp)
  72 |     {
  73 |         GoodG2B(req, resp);
  74 |     }
  75 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_NetClient_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,64,"
  54 |         return data;
  55 |     }
  56 |
  57 |     /* use badsource and badsink */
  58 |     public override void Bad(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data = BadSource(req, resp);
  61 |         if (data != null)
  62 |         {
  63 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 64 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  65 |         }
  66 |     }
  67 | #endif //omitbad
  68 | #if (!OMITGOOD)
  69 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
  72 |         /* FIX: Use a hardcoded string */
  73 |         data = ""foo"";
  74 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,37,"
  27 | #if (!OMITBAD)
  28 |     /* uses badsource and badsink */
  29 |     public override void Bad(HttpRequest req, HttpResponse resp)
  30 |     {
  31 |         string data;
  32 |         /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  33 |         data = req.Params.Get(""name"");
  34 |         if (data != null)
  35 |         {
  36 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 37 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  38 |         }
  39 |     }
  40 | #endif //omitbad
  41 | #if (!OMITGOOD)
  42 |     public override void Good(HttpRequest req, HttpResponse resp)
  43 |     {
  44 |         GoodG2B(req, resp);
  45 |     }
  46 |
  47 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  46 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (false)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  46 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (5 != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         }
   44 |         else
   45 |         {
   46 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   47 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   48 |             data = null;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  53 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (PRIVATE_CONST_FALSE)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         }
   44 |         else
   45 |         {
   46 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   47 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   48 |             data = null;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  53 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (privateFalse)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (PRIVATE_CONST_FIVE != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (privateFive != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  60 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (PrivateReturnsFalse())
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  46 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.STATIC_READONLY_FALSE)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  46 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.staticFalse)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  46 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.StaticReturnsFalse())
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             data = req.Params.Get(""name"");
  36 |         }
  37 |         else
  38 |         {
  39 |             /* FIX: Use a hardcoded string */
  40 |             data = ""foo"";
  41 |         }
  42 |         if (data != null)
  43 |         {
  44 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 45 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  51 |      * both branches use the GoodSource */
  52 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  53 |     {
  54 |         string data;
  55 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  46 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.STATIC_READONLY_FIVE != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  46 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.staticFive != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |             break;
   38 |         default:
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |             break;
   43 |         }
   44 |         if (data != null)
   45 |         {
   46 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  47 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data = null;
   56 |         switch (5)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
  31 |         string data;
  32 |         while (true)
  33 |         {
  34 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  35 |             data = req.Params.Get(""name"");
  36 |             break;
  37 |         }
  38 |         if (data != null)
  39 |         {
  40 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 41 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  42 |         }
  43 |     }
  44 | #endif //omitbad
  45 | #if (!OMITGOOD)
  46 |     /* goodG2B() - use goodsource and badsink */
  47 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  48 |     {
  49 |         string data;
  50 |         while (true)
  51 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,39,"
  29 |     public override void Bad(HttpRequest req, HttpResponse resp)
  30 |     {
  31 |         string data;
  32 |         /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  33 |         data = req.Params.Get(""name"");
  34 |         for (int i = 0; i < 1; i++)
  35 |         {
  36 |             if (data != null)
  37 |             {
  38 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 39 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  40 |             }
  41 |         }
  42 |     }
  43 | #endif //omitbad
  44 | #if (!OMITGOOD)
  45 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  46 |      * for statement with the one in the for statement */
  47 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  48 |     {
  49 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
   30 |     private bool badPrivate = false;
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  40 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   41 |         }
   42 |     }
   43 |
   44 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   45 |     {
   46 |         string data;
   47 |         if (badPrivate)
   48 |         {
   49 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
   50 |             data = req.Params.Get(""name"");
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,44,"
  34 |             string data;
  35 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  36 |             data = req.Params.Get(""name"");
  37 |             dataCopy = data;
  38 |         }
  39 |         {
  40 |             string data = dataCopy;
  41 |             if (data != null)
  42 |             {
  43 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 44 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  45 |             }
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     public override void Good(HttpRequest req, HttpResponse resp)
  51 |     {
  52 |         GoodG2B(req, resp);
  53 |     }
  54 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_Params_Get_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
  33 |         return data;
  34 |     }
  35 |
  36 |     /* use badsource and badsink */
  37 |     public override void Bad(HttpRequest req, HttpResponse resp)
  38 |     {
  39 |         string data = BadSource(req, resp);
  40 |         if (data != null)
  41 |         {
  42 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 43 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  44 |         }
  45 |     }
  46 | #endif //omitbad
  47 | #if (!OMITGOOD)
  48 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  49 |     {
  50 |         string data;
  51 |         /* FIX: Use a hardcoded string */
  52 |         data = ""foo"";
  53 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
  33 |         /* POTENTIAL FLAW: Parse id param out of the URL querystring (without using getParameter()) */
  34 |         {
  35 |             if (req.QueryString[""id""] != null)
  36 |             {
  37 |                 data = req.QueryString[""id""];
  38 |             }
  39 |         }
  40 |         if (data != null)
  41 |         {
  42 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 43 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  44 |         }
  45 |     }
  46 | #endif //omitbad
  47 | #if (!OMITGOOD)
  48 |     public override void Good(HttpRequest req, HttpResponse resp)
  49 |     {
  50 |         GoodG2B(req, resp);
  51 |     }
  52 |
  53 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (false)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (5 != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,59,"
   49 |         }
   50 |         else
   51 |         {
   52 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   53 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   54 |             data = null;
   55 |         }
   56 |         if (data != null)
   57 |         {
   58 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  59 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   60 |         }
   61 |     }
   62 | #endif //omitbad
   63 | #if (!OMITGOOD)
   64 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   65 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   66 |     {
   67 |         string data;
   68 |         if (PRIVATE_CONST_FALSE)
   69 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,59,"
   49 |         }
   50 |         else
   51 |         {
   52 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   53 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   54 |             data = null;
   55 |         }
   56 |         if (data != null)
   57 |         {
   58 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  59 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   60 |         }
   61 |     }
   62 | #endif //omitbad
   63 | #if (!OMITGOOD)
   64 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   65 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   66 |     {
   67 |         string data;
   68 |         if (privateFalse)
   69 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
   48 |         }
   49 |         else
   50 |         {
   51 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   52 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   53 |             data = null;
   54 |         }
   55 |         if (data != null)
   56 |         {
   57 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  58 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   59 |         }
   60 |     }
   61 | #endif //omitbad
   62 | #if (!OMITGOOD)
   63 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   64 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   65 |     {
   66 |         string data;
   67 |         if (PRIVATE_CONST_FIVE != 5)
   68 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
   48 |         }
   49 |         else
   50 |         {
   51 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   52 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   53 |             data = null;
   54 |         }
   55 |         if (data != null)
   56 |         {
   57 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  58 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   59 |         }
   60 |     }
   61 | #endif //omitbad
   62 | #if (!OMITGOOD)
   63 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   64 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   65 |     {
   66 |         string data;
   67 |         if (privateFive != 5)
   68 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
   56 |         }
   57 |         else
   58 |         {
   59 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   60 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   61 |             data = null;
   62 |         }
   63 |         if (data != null)
   64 |         {
   65 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  66 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   67 |         }
   68 |     }
   69 | #endif //omitbad
   70 | #if (!OMITGOOD)
   71 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   72 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   73 |     {
   74 |         string data;
   75 |         if (PrivateReturnsFalse())
   76 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.STATIC_READONLY_FALSE)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.staticFalse)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.StaticReturnsFalse())
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,51,"
  41 |             }
  42 |         }
  43 |         else
  44 |         {
  45 |             /* FIX: Use a hardcoded string */
  46 |             data = ""foo"";
  47 |         }
  48 |         if (data != null)
  49 |         {
  50 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 51 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  52 |         }
  53 |     }
  54 | #endif //omitbad
  55 | #if (!OMITGOOD)
  56 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  57 |      * both branches use the GoodSource */
  58 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data;
  61 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.STATIC_READONLY_FIVE != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  52 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.staticFive != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |             break;
   44 |         default:
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |             break;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  53 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data = null;
   62 |         switch (5)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
  37 |                 if (req.QueryString[""id""] != null)
  38 |                 {
  39 |                     data = req.QueryString[""id""];
  40 |                 }
  41 |             }
  42 |             break;
  43 |         }
  44 |         if (data != null)
  45 |         {
  46 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 47 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  48 |         }
  49 |     }
  50 | #endif //omitbad
  51 | #if (!OMITGOOD)
  52 |     /* goodG2B() - use goodsource and badsink */
  53 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  54 |     {
  55 |         string data;
  56 |         while (true)
  57 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             if (req.QueryString[""id""] != null)
  36 |             {
  37 |                 data = req.QueryString[""id""];
  38 |             }
  39 |         }
  40 |         for (int i = 0; i < 1; i++)
  41 |         {
  42 |             if (data != null)
  43 |             {
  44 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 45 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  46 |             }
  47 |         }
  48 |     }
  49 | #endif //omitbad
  50 | #if (!OMITGOOD)
  51 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  52 |      * for statement with the one in the for statement */
  53 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  54 |     {
  55 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
   30 |     private bool badPrivate = false;
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
>  40 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
   41 |         }
   42 |     }
   43 |
   44 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   45 |     {
   46 |         string data;
   47 |         if (badPrivate)
   48 |         {
   49 |             data = """"; /* initialize data in case id is not in query string */
   50 |             /* POTENTIAL FLAW: Parse id param out of the URL querystring (without using getParameter()) */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,50,"
  40 |                     data = req.QueryString[""id""];
  41 |                 }
  42 |             }
  43 |             dataCopy = data;
  44 |         }
  45 |         {
  46 |             string data = dataCopy;
  47 |             if (data != null)
  48 |             {
  49 |                 /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will st
> 50 |                 resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  51 |             }
  52 |         }
  53 |     }
  54 | #endif //omitbad
  55 | #if (!OMITGOOD)
  56 |     public override void Good(HttpRequest req, HttpResponse resp)
  57 |     {
  58 |         GoodG2B(req, resp);
  59 |     }
  60 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__CWE182_Web_QueryString_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,49,"
  39 |         return data;
  40 |     }
  41 |
  42 |     /* use badsource and badsink */
  43 |     public override void Bad(HttpRequest req, HttpResponse resp)
  44 |     {
  45 |         string data = BadSource(req, resp);
  46 |         if (data != null)
  47 |         {
  48 |             /* POTENTIAL FLAW: Display of data in web page after using Replace() to remove script tags, which will still
> 49 |             resp.Write(""<br>Bad(): data = "" + data.Replace(""(<script>)"", """"));
  50 |         }
  51 |     }
  52 | #endif //omitbad
  53 | #if (!OMITGOOD)
  54 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  55 |     {
  56 |         string data;
  57 |         /* FIX: Use a hardcoded string */
  58 |         data = ""foo"";
  59 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
  48 |                 }
  49 |             }
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         if (data != null)
  56 |         {
  57 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 58 |             resp.Write(""<br>Bad(): data = "" + data);
  59 |         }
  60 |     }
  61 | #endif //omitbad
  62 | #if (!OMITGOOD)
  63 |     public override void Good(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         GoodG2B(req, resp);
  66 |     }
  67 |
  68 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (false)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (5 != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  74 |             resp.Write(""<br>Bad(): data = "" + data);
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (PRIVATE_CONST_FALSE)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  74 |             resp.Write(""<br>Bad(): data = "" + data);
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (privateFalse)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  73 |             resp.Write(""<br>Bad(): data = "" + data);
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (PRIVATE_CONST_FIVE != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  73 |             resp.Write(""<br>Bad(): data = "" + data);
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (privateFive != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         }
   72 |         else
   73 |         {
   74 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   75 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   76 |             data = null;
   77 |         }
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  81 |             resp.Write(""<br>Bad(): data = "" + data);
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   87 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   88 |     {
   89 |         string data;
   90 |         if (PrivateReturnsFalse())
   91 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FALSE)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFalse)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.StaticReturnsFalse())
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |             }
  57 |         }
  58 |         else
  59 |         {
  60 |             /* FIX: Use a hardcoded string */
  61 |             data = ""foo"";
  62 |         }
  63 |         if (data != null)
  64 |         {
  65 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 66 |             resp.Write(""<br>Bad(): data = "" + data);
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  72 |      * both branches use the GoodSource */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FIVE != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFive != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |             break;
   59 |         default:
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |             break;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  68 |             resp.Write(""<br>Bad(): data = "" + data);
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data = null;
   77 |         switch (5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,62,"
  52 |                 catch (IOException exceptIO)
  53 |                 {
  54 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  55 |                 }
  56 |             }
  57 |             break;
  58 |         }
  59 |         if (data != null)
  60 |         {
  61 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 62 |             resp.Write(""<br>Bad(): data = "" + data);
  63 |         }
  64 |     }
  65 | #endif //omitbad
  66 | #if (!OMITGOOD)
  67 |     /* goodG2B() - use goodsource and badsink */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
  71 |         while (true)
  72 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         for (int i = 0; i < 1; i++)
  56 |         {
  57 |             if (data != null)
  58 |             {
  59 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 60 |                 resp.Write(""<br>Bad(): data = "" + data);
  61 |             }
  62 |         }
  63 |     }
  64 | #endif //omitbad
  65 | #if (!OMITGOOD)
  66 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  67 |      * for statement with the one in the for statement */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,42,"
   32 |     private bool badPrivate = false;
   33 | #if (!OMITBAD)
   34 |     public override void Bad(HttpRequest req, HttpResponse resp)
   35 |     {
   36 |         string data;
   37 |         badPrivate = true;
   38 |         data = Bad_source(req, resp);
   39 |         if (data != null)
   40 |         {
   41 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  42 |             resp.Write(""<br>Bad(): data = "" + data);
   43 |         }
   44 |     }
   45 |
   46 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   47 |     {
   48 |         string data;
   49 |         if (badPrivate)
   50 |         {
   51 |             data = """"; /* Initialize data */
   52 |             /* Read data using an outbound tcp connection */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  56 |                 }
  57 |             }
  58 |             dataCopy = data;
  59 |         }
  60 |         {
  61 |             string data = dataCopy;
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 65 |                 resp.Write(""<br>Bad(): data = "" + data);
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     public override void Good(HttpRequest req, HttpResponse resp)
  72 |     {
  73 |         GoodG2B(req, resp);
  74 |     }
  75 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Connect_tcp_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,64,"
  54 |         return data;
  55 |     }
  56 |
  57 |     /* use badsource and badsink */
  58 |     public override void Bad(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data = BadSource(req, resp);
  61 |         if (data != null)
  62 |         {
  63 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 64 |             resp.Write(""<br>Bad(): data = "" + data);
  65 |         }
  66 |     }
  67 | #endif //omitbad
  68 | #if (!OMITGOOD)
  69 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
  72 |         /* FIX: Use a hardcoded string */
  73 |         data = ""foo"";
  74 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,63,"
  53 |                 }
  54 |             }
  55 |             catch (SqlException exceptSql)
  56 |             {
  57 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  58 |             }
  59 |         }
  60 |         if (data != null)
  61 |         {
  62 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 63 |             resp.Write(""<br>Bad(): data = "" + data);
  64 |         }
  65 |     }
  66 | #endif //omitbad
  67 | #if (!OMITGOOD)
  68 |     public override void Good(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         GoodG2B(req, resp);
  71 |     }
  72 |
  73 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  72 |             resp.Write(""<br>Bad(): data = "" + data);
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (false)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  72 |             resp.Write(""<br>Bad(): data = "" + data);
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (5 != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |         }
   70 |         else
   71 |         {
   72 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   73 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   74 |             data = null;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  79 |             resp.Write(""<br>Bad(): data = "" + data);
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   85 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         if (PRIVATE_CONST_FALSE)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |         }
   70 |         else
   71 |         {
   72 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   73 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   74 |             data = null;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  79 |             resp.Write(""<br>Bad(): data = "" + data);
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   85 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         if (privateFalse)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,78,"
   68 |         }
   69 |         else
   70 |         {
   71 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   72 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   73 |             data = null;
   74 |         }
   75 |         if (data != null)
   76 |         {
   77 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  78 |             resp.Write(""<br>Bad(): data = "" + data);
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   84 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   85 |     {
   86 |         string data;
   87 |         if (PRIVATE_CONST_FIVE != 5)
   88 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,78,"
   68 |         }
   69 |         else
   70 |         {
   71 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   72 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   73 |             data = null;
   74 |         }
   75 |         if (data != null)
   76 |         {
   77 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  78 |             resp.Write(""<br>Bad(): data = "" + data);
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   84 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   85 |     {
   86 |         string data;
   87 |         if (privateFive != 5)
   88 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,86,"
   76 |         }
   77 |         else
   78 |         {
   79 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   80 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   81 |             data = null;
   82 |         }
   83 |         if (data != null)
   84 |         {
   85 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  86 |             resp.Write(""<br>Bad(): data = "" + data);
   87 |         }
   88 |     }
   89 | #endif //omitbad
   90 | #if (!OMITGOOD)
   91 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   92 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   93 |     {
   94 |         string data;
   95 |         if (PrivateReturnsFalse())
   96 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  72 |             resp.Write(""<br>Bad(): data = "" + data);
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.STATIC_READONLY_FALSE)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  72 |             resp.Write(""<br>Bad(): data = "" + data);
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.staticFalse)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  72 |             resp.Write(""<br>Bad(): data = "" + data);
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.StaticReturnsFalse())
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,71,"
   61 |             }
   62 |         }
   63 |         else
   64 |         {
   65 |             /* FIX: Use a hardcoded string */
   66 |             data = ""foo"";
   67 |         }
   68 |         if (data != null)
   69 |         {
   70 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  71 |             resp.Write(""<br>Bad(): data = "" + data);
   72 |         }
   73 |     }
   74 | #endif //omitbad
   75 | #if (!OMITGOOD)
   76 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   77 |      * both branches use the GoodSource */
   78 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  72 |             resp.Write(""<br>Bad(): data = "" + data);
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.STATIC_READONLY_FIVE != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  72 |             resp.Write(""<br>Bad(): data = "" + data);
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.staticFive != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |             break;
   64 |         default:
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |             break;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  73 |             resp.Write(""<br>Bad(): data = "" + data);
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data = null;
   82 |         switch (5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
  57 |                 catch (SqlException exceptSql)
  58 |                 {
  59 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  60 |                 }
  61 |             }
  62 |             break;
  63 |         }
  64 |         if (data != null)
  65 |         {
  66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 67 |             resp.Write(""<br>Bad(): data = "" + data);
  68 |         }
  69 |     }
  70 | #endif //omitbad
  71 | #if (!OMITGOOD)
  72 |     /* goodG2B() - use goodsource and badsink */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         while (true)
  77 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |             catch (SqlException exceptSql)
  56 |             {
  57 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  58 |             }
  59 |         }
  60 |         for (int i = 0; i < 1; i++)
  61 |         {
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 65 |                 resp.Write(""<br>Bad(): data = "" + data);
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  72 |      * for statement with the one in the for statement */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
   31 |     private bool badPrivate = false;
   32 | #if (!OMITBAD)
   33 |     public override void Bad(HttpRequest req, HttpResponse resp)
   34 |     {
   35 |         string data;
   36 |         badPrivate = true;
   37 |         data = Bad_source(req, resp);
   38 |         if (data != null)
   39 |         {
   40 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  41 |             resp.Write(""<br>Bad(): data = "" + data);
   42 |         }
   43 |     }
   44 |
   45 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   46 |     {
   47 |         string data;
   48 |         if (badPrivate)
   49 |         {
   50 |             data = """"; /* Initialize data */
   51 |             /* Read data from a database */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,70,"
   60 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
   61 |                 }
   62 |             }
   63 |             dataCopy = data;
   64 |         }
   65 |         {
   66 |             string data = dataCopy;
   67 |             if (data != null)
   68 |             {
   69 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  70 |                 resp.Write(""<br>Bad(): data = "" + data);
   71 |             }
   72 |         }
   73 |     }
   74 | #endif //omitbad
   75 | #if (!OMITGOOD)
   76 |     public override void Good(HttpRequest req, HttpResponse resp)
   77 |     {
   78 |         GoodG2B(req, resp);
   79 |     }
   80 |
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Database_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,69,"
  59 |         return data;
  60 |     }
  61 |
  62 |     /* use badsource and badsink */
  63 |     public override void Bad(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         string data = BadSource(req, resp);
  66 |         if (data != null)
  67 |         {
  68 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 69 |             resp.Write(""<br>Bad(): data = "" + data);
  70 |         }
  71 |     }
  72 | #endif //omitbad
  73 | #if (!OMITGOOD)
  74 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  75 |     {
  76 |         string data;
  77 |         /* FIX: Use a hardcoded string */
  78 |         data = ""foo"";
  79 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             HttpCookieCollection cookieSources = req.Cookies;
  36 |             if (cookieSources != null)
  37 |             {
  38 |                 /* POTENTIAL FLAW: Read data from the first cookie value */
  39 |                 data = cookieSources[0].Value;
  40 |             }
  41 |         }
  42 |         if (data != null)
  43 |         {
  44 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 45 |             resp.Write(""<br>Bad(): data = "" + data);
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     public override void Good(HttpRequest req, HttpResponse resp)
  51 |     {
  52 |         GoodG2B(req, resp);
  53 |     }
  54 |
  55 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  54 |             resp.Write(""<br>Bad(): data = "" + data);
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (false)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  54 |             resp.Write(""<br>Bad(): data = "" + data);
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (5 != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         }
   52 |         else
   53 |         {
   54 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   55 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   56 |             data = null;
   57 |         }
   58 |         if (data != null)
   59 |         {
   60 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  61 |             resp.Write(""<br>Bad(): data = "" + data);
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (PRIVATE_CONST_FALSE)
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         }
   52 |         else
   53 |         {
   54 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   55 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   56 |             data = null;
   57 |         }
   58 |         if (data != null)
   59 |         {
   60 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  61 |             resp.Write(""<br>Bad(): data = "" + data);
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (privateFalse)
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  60 |             resp.Write(""<br>Bad(): data = "" + data);
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (PRIVATE_CONST_FIVE != 5)
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  60 |             resp.Write(""<br>Bad(): data = "" + data);
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (privateFive != 5)
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         }
   59 |         else
   60 |         {
   61 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   62 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   63 |             data = null;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  68 |             resp.Write(""<br>Bad(): data = "" + data);
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (PrivateReturnsFalse())
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  54 |             resp.Write(""<br>Bad(): data = "" + data);
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.STATIC_READONLY_FALSE)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  54 |             resp.Write(""<br>Bad(): data = "" + data);
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.staticFalse)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  54 |             resp.Write(""<br>Bad(): data = "" + data);
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.StaticReturnsFalse())
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
  43 |             }
  44 |         }
  45 |         else
  46 |         {
  47 |             /* FIX: Use a hardcoded string */
  48 |             data = ""foo"";
  49 |         }
  50 |         if (data != null)
  51 |         {
  52 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 53 |             resp.Write(""<br>Bad(): data = "" + data);
  54 |         }
  55 |     }
  56 | #endif //omitbad
  57 | #if (!OMITGOOD)
  58 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  59 |      * both branches use the GoodSource */
  60 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  61 |     {
  62 |         string data;
  63 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  54 |             resp.Write(""<br>Bad(): data = "" + data);
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.STATIC_READONLY_FIVE != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  54 |             resp.Write(""<br>Bad(): data = "" + data);
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.staticFive != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |             break;
   46 |         default:
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |             break;
   51 |         }
   52 |         if (data != null)
   53 |         {
   54 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  55 |             resp.Write(""<br>Bad(): data = "" + data);
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data = null;
   64 |         switch (5)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,49,"
  39 |                 {
  40 |                     /* POTENTIAL FLAW: Read data from the first cookie value */
  41 |                     data = cookieSources[0].Value;
  42 |                 }
  43 |             }
  44 |             break;
  45 |         }
  46 |         if (data != null)
  47 |         {
  48 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 49 |             resp.Write(""<br>Bad(): data = "" + data);
  50 |         }
  51 |     }
  52 | #endif //omitbad
  53 | #if (!OMITGOOD)
  54 |     /* goodG2B() - use goodsource and badsink */
  55 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  56 |     {
  57 |         string data;
  58 |         while (true)
  59 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
  37 |             {
  38 |                 /* POTENTIAL FLAW: Read data from the first cookie value */
  39 |                 data = cookieSources[0].Value;
  40 |             }
  41 |         }
  42 |         for (int i = 0; i < 1; i++)
  43 |         {
  44 |             if (data != null)
  45 |             {
  46 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 47 |                 resp.Write(""<br>Bad(): data = "" + data);
  48 |             }
  49 |         }
  50 |     }
  51 | #endif //omitbad
  52 | #if (!OMITGOOD)
  53 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  54 |      * for statement with the one in the for statement */
  55 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  56 |     {
  57 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
   30 |     private bool badPrivate = false;
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  40 |             resp.Write(""<br>Bad(): data = "" + data);
   41 |         }
   42 |     }
   43 |
   44 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   45 |     {
   46 |         string data;
   47 |         if (badPrivate)
   48 |         {
   49 |             data = """"; /* initialize data in case there are no cookies */
   50 |             /* Read data from cookies */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
  42 |                     data = cookieSources[0].Value;
  43 |                 }
  44 |             }
  45 |             dataCopy = data;
  46 |         }
  47 |         {
  48 |             string data = dataCopy;
  49 |             if (data != null)
  50 |             {
  51 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 52 |                 resp.Write(""<br>Bad(): data = "" + data);
  53 |             }
  54 |         }
  55 |     }
  56 | #endif //omitbad
  57 | #if (!OMITGOOD)
  58 |     public override void Good(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         GoodG2B(req, resp);
  61 |     }
  62 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Get_Cookies_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,51,"
  41 |         return data;
  42 |     }
  43 |
  44 |     /* use badsource and badsink */
  45 |     public override void Bad(HttpRequest req, HttpResponse resp)
  46 |     {
  47 |         string data = BadSource(req, resp);
  48 |         if (data != null)
  49 |         {
  50 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 51 |             resp.Write(""<br>Bad(): data = "" + data);
  52 |         }
  53 |     }
  54 | #endif //omitbad
  55 | #if (!OMITGOOD)
  56 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  57 |     {
  58 |         string data;
  59 |         /* FIX: Use a hardcoded string */
  60 |         data = ""foo"";
  61 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,75,"
  65 |                     catch(SocketException se)
  66 |                     {
  67 |                         IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
  68 |                     }
  69 |                 }
  70 |             }
  71 |         }
  72 |         if (data != null)
  73 |         {
  74 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 75 |             resp.Write(""<br>Bad(): data = "" + data);
  76 |         }
  77 |     }
  78 | #endif //omitbad
  79 | #if (!OMITGOOD)
  80 |     public override void Good(HttpRequest req, HttpResponse resp)
  81 |     {
  82 |         GoodG2B(req, resp);
  83 |     }
  84 |
  85 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  84 |             resp.Write(""<br>Bad(): data = "" + data);
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (false)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  84 |             resp.Write(""<br>Bad(): data = "" + data);
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (5 != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,91,"
   81 |         }
   82 |         else
   83 |         {
   84 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   85 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   86 |             data = null;
   87 |         }
   88 |         if (data != null)
   89 |         {
   90 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  91 |             resp.Write(""<br>Bad(): data = "" + data);
   92 |         }
   93 |     }
   94 | #endif //omitbad
   95 | #if (!OMITGOOD)
   96 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   97 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   98 |     {
   99 |         string data;
  100 |         if (PRIVATE_CONST_FALSE)
  101 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,91,"
   81 |         }
   82 |         else
   83 |         {
   84 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   85 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   86 |             data = null;
   87 |         }
   88 |         if (data != null)
   89 |         {
   90 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  91 |             resp.Write(""<br>Bad(): data = "" + data);
   92 |         }
   93 |     }
   94 | #endif //omitbad
   95 | #if (!OMITGOOD)
   96 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   97 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   98 |     {
   99 |         string data;
  100 |         if (privateFalse)
  101 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,90,"
   80 |         }
   81 |         else
   82 |         {
   83 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   84 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   85 |             data = null;
   86 |         }
   87 |         if (data != null)
   88 |         {
   89 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  90 |             resp.Write(""<br>Bad(): data = "" + data);
   91 |         }
   92 |     }
   93 | #endif //omitbad
   94 | #if (!OMITGOOD)
   95 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   96 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   97 |     {
   98 |         string data;
   99 |         if (PRIVATE_CONST_FIVE != 5)
  100 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,90,"
   80 |         }
   81 |         else
   82 |         {
   83 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   84 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   85 |             data = null;
   86 |         }
   87 |         if (data != null)
   88 |         {
   89 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  90 |             resp.Write(""<br>Bad(): data = "" + data);
   91 |         }
   92 |     }
   93 | #endif //omitbad
   94 | #if (!OMITGOOD)
   95 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   96 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   97 |     {
   98 |         string data;
   99 |         if (privateFive != 5)
  100 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,98,"
   88 |         }
   89 |         else
   90 |         {
   91 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   92 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   93 |             data = null;
   94 |         }
   95 |         if (data != null)
   96 |         {
   97 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  98 |             resp.Write(""<br>Bad(): data = "" + data);
   99 |         }
  100 |     }
  101 | #endif //omitbad
  102 | #if (!OMITGOOD)
  103 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
  104 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
  105 |     {
  106 |         string data;
  107 |         if (PrivateReturnsFalse())
  108 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  84 |             resp.Write(""<br>Bad(): data = "" + data);
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.STATIC_READONLY_FALSE)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  84 |             resp.Write(""<br>Bad(): data = "" + data);
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.staticFalse)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  84 |             resp.Write(""<br>Bad(): data = "" + data);
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.StaticReturnsFalse())
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,83,"
   73 |             }
   74 |         }
   75 |         else
   76 |         {
   77 |             /* FIX: Use a hardcoded string */
   78 |             data = ""foo"";
   79 |         }
   80 |         if (data != null)
   81 |         {
   82 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  83 |             resp.Write(""<br>Bad(): data = "" + data);
   84 |         }
   85 |     }
   86 | #endif //omitbad
   87 | #if (!OMITGOOD)
   88 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   89 |      * both branches use the GoodSource */
   90 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  84 |             resp.Write(""<br>Bad(): data = "" + data);
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.STATIC_READONLY_FIVE != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  84 |             resp.Write(""<br>Bad(): data = "" + data);
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.staticFive != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |             break;
   76 |         default:
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |             break;
   81 |         }
   82 |         if (data != null)
   83 |         {
   84 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  85 |             resp.Write(""<br>Bad(): data = "" + data);
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data = null;
   94 |         switch (5)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |                             IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
   70 |                         }
   71 |                     }
   72 |                 }
   73 |             }
   74 |             break;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  79 |             resp.Write(""<br>Bad(): data = "" + data);
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B() - use goodsource and badsink */
   85 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         while (true)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,77,"
   67 |                         IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
   68 |                     }
   69 |                 }
   70 |             }
   71 |         }
   72 |         for (int i = 0; i < 1; i++)
   73 |         {
   74 |             if (data != null)
   75 |             {
   76 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  77 |                 resp.Write(""<br>Bad(): data = "" + data);
   78 |             }
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
   84 |      * for statement with the one in the for statement */
   85 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
   33 |     private bool badPrivate = false;
   34 | #if (!OMITBAD)
   35 |     public override void Bad(HttpRequest req, HttpResponse resp)
   36 |     {
   37 |         string data;
   38 |         badPrivate = true;
   39 |         data = Bad_source(req, resp);
   40 |         if (data != null)
   41 |         {
   42 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  43 |             resp.Write(""<br>Bad(): data = "" + data);
   44 |         }
   45 |     }
   46 |
   47 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   48 |     {
   49 |         string data;
   50 |         if (badPrivate)
   51 |         {
   52 |             data = """"; /* Initialize data */
   53 |             /* Read data using a listening tcp connection */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,82,"
   72 |                     }
   73 |                 }
   74 |             }
   75 |             dataCopy = data;
   76 |         }
   77 |         {
   78 |             string data = dataCopy;
   79 |             if (data != null)
   80 |             {
   81 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  82 |                 resp.Write(""<br>Bad(): data = "" + data);
   83 |             }
   84 |         }
   85 |     }
   86 | #endif //omitbad
   87 | #if (!OMITGOOD)
   88 |     public override void Good(HttpRequest req, HttpResponse resp)
   89 |     {
   90 |         GoodG2B(req, resp);
   91 |     }
   92 |
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Listen_tcp_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         return data;
   72 |     }
   73 |
   74 |     /* use badsource and badsink */
   75 |     public override void Bad(HttpRequest req, HttpResponse resp)
   76 |     {
   77 |         string data = BadSource(req, resp);
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  81 |             resp.Write(""<br>Bad(): data = "" + data);
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
   87 |     {
   88 |         string data;
   89 |         /* FIX: Use a hardcoded string */
   90 |         data = ""foo"";
   91 |         return data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
  48 |                 }
  49 |             }
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         if (data != null)
  56 |         {
  57 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 58 |             resp.Write(""<br>Bad(): data = "" + data);
  59 |         }
  60 |     }
  61 | #endif //omitbad
  62 | #if (!OMITGOOD)
  63 |     public override void Good(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         GoodG2B(req, resp);
  66 |     }
  67 |
  68 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (false)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (5 != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  74 |             resp.Write(""<br>Bad(): data = "" + data);
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (PRIVATE_CONST_FALSE)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  74 |             resp.Write(""<br>Bad(): data = "" + data);
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (privateFalse)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  73 |             resp.Write(""<br>Bad(): data = "" + data);
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (PRIVATE_CONST_FIVE != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  73 |             resp.Write(""<br>Bad(): data = "" + data);
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (privateFive != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         }
   72 |         else
   73 |         {
   74 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   75 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   76 |             data = null;
   77 |         }
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  81 |             resp.Write(""<br>Bad(): data = "" + data);
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   87 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   88 |     {
   89 |         string data;
   90 |         if (PrivateReturnsFalse())
   91 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FALSE)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFalse)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.StaticReturnsFalse())
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |             }
  57 |         }
  58 |         else
  59 |         {
  60 |             /* FIX: Use a hardcoded string */
  61 |             data = ""foo"";
  62 |         }
  63 |         if (data != null)
  64 |         {
  65 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 66 |             resp.Write(""<br>Bad(): data = "" + data);
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  72 |      * both branches use the GoodSource */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FIVE != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  67 |             resp.Write(""<br>Bad(): data = "" + data);
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFive != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |             break;
   59 |         default:
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |             break;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  68 |             resp.Write(""<br>Bad(): data = "" + data);
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data = null;
   77 |         switch (5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,62,"
  52 |                 catch (IOException exceptIO)
  53 |                 {
  54 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  55 |                 }
  56 |             }
  57 |             break;
  58 |         }
  59 |         if (data != null)
  60 |         {
  61 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 62 |             resp.Write(""<br>Bad(): data = "" + data);
  63 |         }
  64 |     }
  65 | #endif //omitbad
  66 | #if (!OMITGOOD)
  67 |     /* goodG2B() - use goodsource and badsink */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
  71 |         while (true)
  72 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         for (int i = 0; i < 1; i++)
  56 |         {
  57 |             if (data != null)
  58 |             {
  59 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 60 |                 resp.Write(""<br>Bad(): data = "" + data);
  61 |             }
  62 |         }
  63 |     }
  64 | #endif //omitbad
  65 | #if (!OMITGOOD)
  66 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  67 |      * for statement with the one in the for statement */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,42,"
   32 |     private bool badPrivate = false;
   33 | #if (!OMITBAD)
   34 |     public override void Bad(HttpRequest req, HttpResponse resp)
   35 |     {
   36 |         string data;
   37 |         badPrivate = true;
   38 |         data = Bad_source(req, resp);
   39 |         if (data != null)
   40 |         {
   41 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  42 |             resp.Write(""<br>Bad(): data = "" + data);
   43 |         }
   44 |     }
   45 |
   46 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   47 |     {
   48 |         string data;
   49 |         if (badPrivate)
   50 |         {
   51 |             data = """"; /* Initialize data */
   52 |             /* read input from WebClient */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  56 |                 }
  57 |             }
  58 |             dataCopy = data;
  59 |         }
  60 |         {
  61 |             string data = dataCopy;
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 65 |                 resp.Write(""<br>Bad(): data = "" + data);
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     public override void Good(HttpRequest req, HttpResponse resp)
  72 |     {
  73 |         GoodG2B(req, resp);
  74 |     }
  75 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_NetClient_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,64,"
  54 |         return data;
  55 |     }
  56 |
  57 |     /* use badsource and badsink */
  58 |     public override void Bad(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data = BadSource(req, resp);
  61 |         if (data != null)
  62 |         {
  63 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 64 |             resp.Write(""<br>Bad(): data = "" + data);
  65 |         }
  66 |     }
  67 | #endif //omitbad
  68 | #if (!OMITGOOD)
  69 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
  72 |         /* FIX: Use a hardcoded string */
  73 |         data = ""foo"";
  74 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,37,"
  27 | #if (!OMITBAD)
  28 |     /* uses badsource and badsink */
  29 |     public override void Bad(HttpRequest req, HttpResponse resp)
  30 |     {
  31 |         string data;
  32 |         /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  33 |         data = req.Params.Get(""name"");
  34 |         if (data != null)
  35 |         {
  36 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 37 |             resp.Write(""<br>Bad(): data = "" + data);
  38 |         }
  39 |     }
  40 | #endif //omitbad
  41 | #if (!OMITGOOD)
  42 |     public override void Good(HttpRequest req, HttpResponse resp)
  43 |     {
  44 |         GoodG2B(req, resp);
  45 |     }
  46 |
  47 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  46 |             resp.Write(""<br>Bad(): data = "" + data);
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (false)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  46 |             resp.Write(""<br>Bad(): data = "" + data);
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (5 != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         }
   44 |         else
   45 |         {
   46 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   47 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   48 |             data = null;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  53 |             resp.Write(""<br>Bad(): data = "" + data);
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (PRIVATE_CONST_FALSE)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         }
   44 |         else
   45 |         {
   46 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   47 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   48 |             data = null;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  53 |             resp.Write(""<br>Bad(): data = "" + data);
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (privateFalse)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  52 |             resp.Write(""<br>Bad(): data = "" + data);
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (PRIVATE_CONST_FIVE != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  52 |             resp.Write(""<br>Bad(): data = "" + data);
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (privateFive != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  60 |             resp.Write(""<br>Bad(): data = "" + data);
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (PrivateReturnsFalse())
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  46 |             resp.Write(""<br>Bad(): data = "" + data);
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.STATIC_READONLY_FALSE)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  46 |             resp.Write(""<br>Bad(): data = "" + data);
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.staticFalse)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  46 |             resp.Write(""<br>Bad(): data = "" + data);
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.StaticReturnsFalse())
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             data = req.Params.Get(""name"");
  36 |         }
  37 |         else
  38 |         {
  39 |             /* FIX: Use a hardcoded string */
  40 |             data = ""foo"";
  41 |         }
  42 |         if (data != null)
  43 |         {
  44 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 45 |             resp.Write(""<br>Bad(): data = "" + data);
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  51 |      * both branches use the GoodSource */
  52 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  53 |     {
  54 |         string data;
  55 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  46 |             resp.Write(""<br>Bad(): data = "" + data);
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.STATIC_READONLY_FIVE != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  46 |             resp.Write(""<br>Bad(): data = "" + data);
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.staticFive != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |             break;
   38 |         default:
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |             break;
   43 |         }
   44 |         if (data != null)
   45 |         {
   46 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  47 |             resp.Write(""<br>Bad(): data = "" + data);
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data = null;
   56 |         switch (5)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
  31 |         string data;
  32 |         while (true)
  33 |         {
  34 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  35 |             data = req.Params.Get(""name"");
  36 |             break;
  37 |         }
  38 |         if (data != null)
  39 |         {
  40 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 41 |             resp.Write(""<br>Bad(): data = "" + data);
  42 |         }
  43 |     }
  44 | #endif //omitbad
  45 | #if (!OMITGOOD)
  46 |     /* goodG2B() - use goodsource and badsink */
  47 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  48 |     {
  49 |         string data;
  50 |         while (true)
  51 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,39,"
  29 |     public override void Bad(HttpRequest req, HttpResponse resp)
  30 |     {
  31 |         string data;
  32 |         /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  33 |         data = req.Params.Get(""name"");
  34 |         for (int i = 0; i < 1; i++)
  35 |         {
  36 |             if (data != null)
  37 |             {
  38 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 39 |                 resp.Write(""<br>Bad(): data = "" + data);
  40 |             }
  41 |         }
  42 |     }
  43 | #endif //omitbad
  44 | #if (!OMITGOOD)
  45 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  46 |      * for statement with the one in the for statement */
  47 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  48 |     {
  49 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
   30 |     private bool badPrivate = false;
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
>  40 |             resp.Write(""<br>Bad(): data = "" + data);
   41 |         }
   42 |     }
   43 |
   44 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   45 |     {
   46 |         string data;
   47 |         if (badPrivate)
   48 |         {
   49 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
   50 |             data = req.Params.Get(""name"");
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,44,"
  34 |             string data;
  35 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  36 |             data = req.Params.Get(""name"");
  37 |             dataCopy = data;
  38 |         }
  39 |         {
  40 |             string data = dataCopy;
  41 |             if (data != null)
  42 |             {
  43 |                 /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 44 |                 resp.Write(""<br>Bad(): data = "" + data);
  45 |             }
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     public override void Good(HttpRequest req, HttpResponse resp)
  51 |     {
  52 |         GoodG2B(req, resp);
  53 |     }
  54 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE80_XSS/s01/CWE80_XSS__Web_Params_Get_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
  33 |         return data;
  34 |     }
  35 |
  36 |     /* use badsource and badsink */
  37 |     public override void Bad(HttpRequest req, HttpResponse resp)
  38 |     {
  39 |         string data = BadSource(req, resp);
  40 |         if (data != null)
  41 |         {
  42 |             /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */
> 43 |             resp.Write(""<br>Bad(): data = "" + data);
  44 |         }
  45 |     }
  46 | #endif //omitbad
  47 | #if (!OMITGOOD)
  48 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  49 |     {
  50 |         string data;
  51 |         /* FIX: Use a hardcoded string */
  52 |         data = ""foo"";
  53 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,59,"
  49 |             }
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         if (data != null)
  56 |         {
  57 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  58 |             resp.StatusCode = 404;
> 59 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  60 |         }
  61 |     }
  62 | #endif //omitbad
  63 | #if (!OMITGOOD)
  64 |     public override void Good(HttpRequest req, HttpResponse resp)
  65 |     {
  66 |         GoodG2B(req, resp);
  67 |     }
  68 |
  69 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (false)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (5 != 5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,75,"
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   74 |             resp.StatusCode = 404;
>  75 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   76 |         }
   77 |     }
   78 | #endif //omitbad
   79 | #if (!OMITGOOD)
   80 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   81 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   82 |     {
   83 |         string data;
   84 |         if (PRIVATE_CONST_FALSE)
   85 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,75,"
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   74 |             resp.StatusCode = 404;
>  75 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   76 |         }
   77 |     }
   78 | #endif //omitbad
   79 | #if (!OMITGOOD)
   80 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   81 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   82 |     {
   83 |         string data;
   84 |         if (privateFalse)
   85 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   73 |             resp.StatusCode = 404;
>  74 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (PRIVATE_CONST_FIVE != 5)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   73 |             resp.StatusCode = 404;
>  74 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (privateFive != 5)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,82,"
   72 |         else
   73 |         {
   74 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   75 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   76 |             data = null;
   77 |         }
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   81 |             resp.StatusCode = 404;
>  82 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   83 |         }
   84 |     }
   85 | #endif //omitbad
   86 | #if (!OMITGOOD)
   87 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   88 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   89 |     {
   90 |         string data;
   91 |         if (PrivateReturnsFalse())
   92 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.STATIC_READONLY_FALSE)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.staticFalse)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.StaticReturnsFalse())
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* FIX: Use a hardcoded string */
   61 |             data = ""foo"";
   62 |         }
   63 |         if (data != null)
   64 |         {
   65 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   66 |             resp.StatusCode = 404;
>  67 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   73 |      * both branches use the GoodSource */
   74 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.STATIC_READONLY_FIVE != 5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.staticFive != 5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,69,"
   59 |         default:
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |             break;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   68 |             resp.StatusCode = 404;
>  69 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   70 |         }
   71 |     }
   72 | #endif //omitbad
   73 | #if (!OMITGOOD)
   74 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   75 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   76 |     {
   77 |         string data = null;
   78 |         switch (5)
   79 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,63,"
  53 |                 {
  54 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  55 |                 }
  56 |             }
  57 |             break;
  58 |         }
  59 |         if (data != null)
  60 |         {
  61 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  62 |             resp.StatusCode = 404;
> 63 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  64 |         }
  65 |     }
  66 | #endif //omitbad
  67 | #if (!OMITGOOD)
  68 |     /* goodG2B() - use goodsource and badsink */
  69 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
  72 |         while (true)
  73 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         for (int i = 0; i < 1; i++)
  56 |         {
  57 |             if (data != null)
  58 |             {
  59 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  60 |                 resp.StatusCode = 404;
> 61 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  62 |             }
  63 |         }
  64 |     }
  65 | #endif //omitbad
  66 | #if (!OMITGOOD)
  67 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  68 |      * for statement with the one in the for statement */
  69 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
   33 | #if (!OMITBAD)
   34 |     public override void Bad(HttpRequest req, HttpResponse resp)
   35 |     {
   36 |         string data;
   37 |         badPrivate = true;
   38 |         data = Bad_source(req, resp);
   39 |         if (data != null)
   40 |         {
   41 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   42 |             resp.StatusCode = 404;
>  43 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   44 |         }
   45 |     }
   46 |
   47 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   48 |     {
   49 |         string data;
   50 |         if (badPrivate)
   51 |         {
   52 |             data = """"; /* Initialize data */
   53 |             /* Read data using an outbound tcp connection */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |                 }
  57 |             }
  58 |             dataCopy = data;
  59 |         }
  60 |         {
  61 |             string data = dataCopy;
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  65 |                 resp.StatusCode = 404;
> 66 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  67 |             }
  68 |         }
  69 |     }
  70 | #endif //omitbad
  71 | #if (!OMITGOOD)
  72 |     public override void Good(HttpRequest req, HttpResponse resp)
  73 |     {
  74 |         GoodG2B(req, resp);
  75 |     }
  76 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Connect_tcp_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |     }
  56 |
  57 |     /* use badsource and badsink */
  58 |     public override void Bad(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data = BadSource(req, resp);
  61 |         if (data != null)
  62 |         {
  63 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  64 |             resp.StatusCode = 404;
> 65 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  66 |         }
  67 |     }
  68 | #endif //omitbad
  69 | #if (!OMITGOOD)
  70 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  71 |     {
  72 |         string data;
  73 |         /* FIX: Use a hardcoded string */
  74 |         data = ""foo"";
  75 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,64,"
  54 |             }
  55 |             catch (SqlException exceptSql)
  56 |             {
  57 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  58 |             }
  59 |         }
  60 |         if (data != null)
  61 |         {
  62 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  63 |             resp.StatusCode = 404;
> 64 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  65 |         }
  66 |     }
  67 | #endif //omitbad
  68 | #if (!OMITGOOD)
  69 |     public override void Good(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         GoodG2B(req, resp);
  72 |     }
  73 |
  74 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   72 |             resp.StatusCode = 404;
>  73 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (false)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   72 |             resp.StatusCode = 404;
>  73 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (5 != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,80,"
   70 |         else
   71 |         {
   72 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   73 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   74 |             data = null;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   79 |             resp.StatusCode = 404;
>  80 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   81 |         }
   82 |     }
   83 | #endif //omitbad
   84 | #if (!OMITGOOD)
   85 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   86 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   87 |     {
   88 |         string data;
   89 |         if (PRIVATE_CONST_FALSE)
   90 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,80,"
   70 |         else
   71 |         {
   72 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   73 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   74 |             data = null;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   79 |             resp.StatusCode = 404;
>  80 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   81 |         }
   82 |     }
   83 | #endif //omitbad
   84 | #if (!OMITGOOD)
   85 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   86 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   87 |     {
   88 |         string data;
   89 |         if (privateFalse)
   90 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |         else
   70 |         {
   71 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   72 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   73 |             data = null;
   74 |         }
   75 |         if (data != null)
   76 |         {
   77 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   78 |             resp.StatusCode = 404;
>  79 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   85 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         if (PRIVATE_CONST_FIVE != 5)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |         else
   70 |         {
   71 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   72 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   73 |             data = null;
   74 |         }
   75 |         if (data != null)
   76 |         {
   77 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   78 |             resp.StatusCode = 404;
>  79 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   85 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         if (privateFive != 5)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,87,"
   77 |         else
   78 |         {
   79 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   80 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   81 |             data = null;
   82 |         }
   83 |         if (data != null)
   84 |         {
   85 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   86 |             resp.StatusCode = 404;
>  87 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   88 |         }
   89 |     }
   90 | #endif //omitbad
   91 | #if (!OMITGOOD)
   92 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   93 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   94 |     {
   95 |         string data;
   96 |         if (PrivateReturnsFalse())
   97 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   72 |             resp.StatusCode = 404;
>  73 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (IO.STATIC_READONLY_FALSE)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   72 |             resp.StatusCode = 404;
>  73 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (IO.staticFalse)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   72 |             resp.StatusCode = 404;
>  73 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (IO.StaticReturnsFalse())
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* FIX: Use a hardcoded string */
   66 |             data = ""foo"";
   67 |         }
   68 |         if (data != null)
   69 |         {
   70 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   71 |             resp.StatusCode = 404;
>  72 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   78 |      * both branches use the GoodSource */
   79 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   72 |             resp.StatusCode = 404;
>  73 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (IO.STATIC_READONLY_FIVE != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   72 |             resp.StatusCode = 404;
>  73 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (IO.staticFive != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         default:
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |             break;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   73 |             resp.StatusCode = 404;
>  74 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data = null;
   83 |         switch (5)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
  58 |                 {
  59 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  60 |                 }
  61 |             }
  62 |             break;
  63 |         }
  64 |         if (data != null)
  65 |         {
  66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  67 |             resp.StatusCode = 404;
> 68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  69 |         }
  70 |     }
  71 | #endif //omitbad
  72 | #if (!OMITGOOD)
  73 |     /* goodG2B() - use goodsource and badsink */
  74 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  75 |     {
  76 |         string data;
  77 |         while (true)
  78 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |             {
  57 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  58 |             }
  59 |         }
  60 |         for (int i = 0; i < 1; i++)
  61 |         {
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  65 |                 resp.StatusCode = 404;
> 66 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  67 |             }
  68 |         }
  69 |     }
  70 | #endif //omitbad
  71 | #if (!OMITGOOD)
  72 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  73 |      * for statement with the one in the for statement */
  74 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  75 |     {
  76 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,42,"
   32 | #if (!OMITBAD)
   33 |     public override void Bad(HttpRequest req, HttpResponse resp)
   34 |     {
   35 |         string data;
   36 |         badPrivate = true;
   37 |         data = Bad_source(req, resp);
   38 |         if (data != null)
   39 |         {
   40 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   41 |             resp.StatusCode = 404;
>  42 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   43 |         }
   44 |     }
   45 |
   46 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   47 |     {
   48 |         string data;
   49 |         if (badPrivate)
   50 |         {
   51 |             data = """"; /* Initialize data */
   52 |             /* Read data from a database */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,71,"
   61 |                 }
   62 |             }
   63 |             dataCopy = data;
   64 |         }
   65 |         {
   66 |             string data = dataCopy;
   67 |             if (data != null)
   68 |             {
   69 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   70 |                 resp.StatusCode = 404;
>  71 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   72 |             }
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     public override void Good(HttpRequest req, HttpResponse resp)
   78 |     {
   79 |         GoodG2B(req, resp);
   80 |     }
   81 |
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Database_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,70,"
   60 |     }
   61 |
   62 |     /* use badsource and badsink */
   63 |     public override void Bad(HttpRequest req, HttpResponse resp)
   64 |     {
   65 |         string data = BadSource(req, resp);
   66 |         if (data != null)
   67 |         {
   68 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   69 |             resp.StatusCode = 404;
>  70 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   71 |         }
   72 |     }
   73 | #endif //omitbad
   74 | #if (!OMITGOOD)
   75 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
   76 |     {
   77 |         string data;
   78 |         /* FIX: Use a hardcoded string */
   79 |         data = ""foo"";
   80 |         return data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
  36 |             if (cookieSources != null)
  37 |             {
  38 |                 /* POTENTIAL FLAW: Read data from the first cookie value */
  39 |                 data = cookieSources[0].Value;
  40 |             }
  41 |         }
  42 |         if (data != null)
  43 |         {
  44 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  45 |             resp.StatusCode = 404;
> 46 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  47 |         }
  48 |     }
  49 | #endif //omitbad
  50 | #if (!OMITGOOD)
  51 |     public override void Good(HttpRequest req, HttpResponse resp)
  52 |     {
  53 |         GoodG2B(req, resp);
  54 |     }
  55 |
  56 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   54 |             resp.StatusCode = 404;
>  55 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data;
   64 |         if (false)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   54 |             resp.StatusCode = 404;
>  55 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data;
   64 |         if (5 != 5)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,62,"
   52 |         else
   53 |         {
   54 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   55 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   56 |             data = null;
   57 |         }
   58 |         if (data != null)
   59 |         {
   60 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   61 |             resp.StatusCode = 404;
>  62 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   63 |         }
   64 |     }
   65 | #endif //omitbad
   66 | #if (!OMITGOOD)
   67 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   68 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   69 |     {
   70 |         string data;
   71 |         if (PRIVATE_CONST_FALSE)
   72 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,62,"
   52 |         else
   53 |         {
   54 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   55 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   56 |             data = null;
   57 |         }
   58 |         if (data != null)
   59 |         {
   60 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   61 |             resp.StatusCode = 404;
>  62 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   63 |         }
   64 |     }
   65 | #endif //omitbad
   66 | #if (!OMITGOOD)
   67 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   68 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   69 |     {
   70 |         string data;
   71 |         if (privateFalse)
   72 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   60 |             resp.StatusCode = 404;
>  61 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (PRIVATE_CONST_FIVE != 5)
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   60 |             resp.StatusCode = 404;
>  61 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (privateFive != 5)
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,69,"
   59 |         else
   60 |         {
   61 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   62 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   63 |             data = null;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   68 |             resp.StatusCode = 404;
>  69 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   70 |         }
   71 |     }
   72 | #endif //omitbad
   73 | #if (!OMITGOOD)
   74 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   75 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   76 |     {
   77 |         string data;
   78 |         if (PrivateReturnsFalse())
   79 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   54 |             resp.StatusCode = 404;
>  55 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data;
   64 |         if (IO.STATIC_READONLY_FALSE)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   54 |             resp.StatusCode = 404;
>  55 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data;
   64 |         if (IO.staticFalse)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   54 |             resp.StatusCode = 404;
>  55 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data;
   64 |         if (IO.StaticReturnsFalse())
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
  44 |         }
  45 |         else
  46 |         {
  47 |             /* FIX: Use a hardcoded string */
  48 |             data = ""foo"";
  49 |         }
  50 |         if (data != null)
  51 |         {
  52 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  53 |             resp.StatusCode = 404;
> 54 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  55 |         }
  56 |     }
  57 | #endif //omitbad
  58 | #if (!OMITGOOD)
  59 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  60 |      * both branches use the GoodSource */
  61 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  62 |     {
  63 |         string data;
  64 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   54 |             resp.StatusCode = 404;
>  55 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data;
   64 |         if (IO.STATIC_READONLY_FIVE != 5)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   54 |             resp.StatusCode = 404;
>  55 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data;
   64 |         if (IO.staticFive != 5)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,56,"
   46 |         default:
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |             break;
   51 |         }
   52 |         if (data != null)
   53 |         {
   54 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   55 |             resp.StatusCode = 404;
>  56 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   57 |         }
   58 |     }
   59 | #endif //omitbad
   60 | #if (!OMITGOOD)
   61 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   62 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   63 |     {
   64 |         string data = null;
   65 |         switch (5)
   66 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,50,"
  40 |                     /* POTENTIAL FLAW: Read data from the first cookie value */
  41 |                     data = cookieSources[0].Value;
  42 |                 }
  43 |             }
  44 |             break;
  45 |         }
  46 |         if (data != null)
  47 |         {
  48 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  49 |             resp.StatusCode = 404;
> 50 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  51 |         }
  52 |     }
  53 | #endif //omitbad
  54 | #if (!OMITGOOD)
  55 |     /* goodG2B() - use goodsource and badsink */
  56 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  57 |     {
  58 |         string data;
  59 |         while (true)
  60 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,48,"
  38 |                 /* POTENTIAL FLAW: Read data from the first cookie value */
  39 |                 data = cookieSources[0].Value;
  40 |             }
  41 |         }
  42 |         for (int i = 0; i < 1; i++)
  43 |         {
  44 |             if (data != null)
  45 |             {
  46 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  47 |                 resp.StatusCode = 404;
> 48 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  49 |             }
  50 |         }
  51 |     }
  52 | #endif //omitbad
  53 | #if (!OMITGOOD)
  54 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  55 |      * for statement with the one in the for statement */
  56 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  57 |     {
  58 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   40 |             resp.StatusCode = 404;
>  41 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   42 |         }
   43 |     }
   44 |
   45 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   46 |     {
   47 |         string data;
   48 |         if (badPrivate)
   49 |         {
   50 |             data = """"; /* initialize data in case there are no cookies */
   51 |             /* Read data from cookies */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
  43 |                 }
  44 |             }
  45 |             dataCopy = data;
  46 |         }
  47 |         {
  48 |             string data = dataCopy;
  49 |             if (data != null)
  50 |             {
  51 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  52 |                 resp.StatusCode = 404;
> 53 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  54 |             }
  55 |         }
  56 |     }
  57 | #endif //omitbad
  58 | #if (!OMITGOOD)
  59 |     public override void Good(HttpRequest req, HttpResponse resp)
  60 |     {
  61 |         GoodG2B(req, resp);
  62 |     }
  63 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Get_Cookies_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
  42 |     }
  43 |
  44 |     /* use badsource and badsink */
  45 |     public override void Bad(HttpRequest req, HttpResponse resp)
  46 |     {
  47 |         string data = BadSource(req, resp);
  48 |         if (data != null)
  49 |         {
  50 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  51 |             resp.StatusCode = 404;
> 52 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  53 |         }
  54 |     }
  55 | #endif //omitbad
  56 | #if (!OMITGOOD)
  57 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  58 |     {
  59 |         string data;
  60 |         /* FIX: Use a hardcoded string */
  61 |         data = ""foo"";
  62 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,76,"
   66 |                     {
   67 |                         IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
   68 |                     }
   69 |                 }
   70 |             }
   71 |         }
   72 |         if (data != null)
   73 |         {
   74 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   75 |             resp.StatusCode = 404;
>  76 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   77 |         }
   78 |     }
   79 | #endif //omitbad
   80 | #if (!OMITGOOD)
   81 |     public override void Good(HttpRequest req, HttpResponse resp)
   82 |     {
   83 |         GoodG2B(req, resp);
   84 |     }
   85 |
   86 |     /* goodG2B() - uses goodsource and badsink */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   84 |             resp.StatusCode = 404;
>  85 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data;
   94 |         if (false)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   84 |             resp.StatusCode = 404;
>  85 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data;
   94 |         if (5 != 5)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,92,"
   82 |         else
   83 |         {
   84 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   85 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   86 |             data = null;
   87 |         }
   88 |         if (data != null)
   89 |         {
   90 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   91 |             resp.StatusCode = 404;
>  92 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   93 |         }
   94 |     }
   95 | #endif //omitbad
   96 | #if (!OMITGOOD)
   97 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   98 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   99 |     {
  100 |         string data;
  101 |         if (PRIVATE_CONST_FALSE)
  102 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,92,"
   82 |         else
   83 |         {
   84 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   85 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   86 |             data = null;
   87 |         }
   88 |         if (data != null)
   89 |         {
   90 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   91 |             resp.StatusCode = 404;
>  92 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   93 |         }
   94 |     }
   95 | #endif //omitbad
   96 | #if (!OMITGOOD)
   97 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   98 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   99 |     {
  100 |         string data;
  101 |         if (privateFalse)
  102 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,91,"
   81 |         else
   82 |         {
   83 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   84 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   85 |             data = null;
   86 |         }
   87 |         if (data != null)
   88 |         {
   89 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   90 |             resp.StatusCode = 404;
>  91 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   92 |         }
   93 |     }
   94 | #endif //omitbad
   95 | #if (!OMITGOOD)
   96 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   97 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   98 |     {
   99 |         string data;
  100 |         if (PRIVATE_CONST_FIVE != 5)
  101 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,91,"
   81 |         else
   82 |         {
   83 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   84 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   85 |             data = null;
   86 |         }
   87 |         if (data != null)
   88 |         {
   89 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   90 |             resp.StatusCode = 404;
>  91 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   92 |         }
   93 |     }
   94 | #endif //omitbad
   95 | #if (!OMITGOOD)
   96 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   97 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   98 |     {
   99 |         string data;
  100 |         if (privateFive != 5)
  101 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,99,"
   89 |         else
   90 |         {
   91 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   92 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   93 |             data = null;
   94 |         }
   95 |         if (data != null)
   96 |         {
   97 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   98 |             resp.StatusCode = 404;
>  99 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  100 |         }
  101 |     }
  102 | #endif //omitbad
  103 | #if (!OMITGOOD)
  104 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
  105 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
  106 |     {
  107 |         string data;
  108 |         if (PrivateReturnsFalse())
  109 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   84 |             resp.StatusCode = 404;
>  85 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data;
   94 |         if (IO.STATIC_READONLY_FALSE)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   84 |             resp.StatusCode = 404;
>  85 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data;
   94 |         if (IO.staticFalse)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   84 |             resp.StatusCode = 404;
>  85 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data;
   94 |         if (IO.StaticReturnsFalse())
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* FIX: Use a hardcoded string */
   78 |             data = ""foo"";
   79 |         }
   80 |         if (data != null)
   81 |         {
   82 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   83 |             resp.StatusCode = 404;
>  84 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   90 |      * both branches use the GoodSource */
   91 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data;
   94 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   84 |             resp.StatusCode = 404;
>  85 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data;
   94 |         if (IO.STATIC_READONLY_FIVE != 5)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   84 |             resp.StatusCode = 404;
>  85 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data;
   94 |         if (IO.staticFive != 5)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,86,"
   76 |         default:
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |             break;
   81 |         }
   82 |         if (data != null)
   83 |         {
   84 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   85 |             resp.StatusCode = 404;
>  86 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   87 |         }
   88 |     }
   89 | #endif //omitbad
   90 | #if (!OMITGOOD)
   91 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   92 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   93 |     {
   94 |         string data = null;
   95 |         switch (5)
   96 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,80,"
   70 |                         }
   71 |                     }
   72 |                 }
   73 |             }
   74 |             break;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   79 |             resp.StatusCode = 404;
>  80 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   81 |         }
   82 |     }
   83 | #endif //omitbad
   84 | #if (!OMITGOOD)
   85 |     /* goodG2B() - use goodsource and badsink */
   86 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   87 |     {
   88 |         string data;
   89 |         while (true)
   90 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,78,"
   68 |                     }
   69 |                 }
   70 |             }
   71 |         }
   72 |         for (int i = 0; i < 1; i++)
   73 |         {
   74 |             if (data != null)
   75 |             {
   76 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   77 |                 resp.StatusCode = 404;
>  78 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   79 |             }
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
   85 |      * for statement with the one in the for statement */
   86 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   87 |     {
   88 |         string data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,44,"
   34 | #if (!OMITBAD)
   35 |     public override void Bad(HttpRequest req, HttpResponse resp)
   36 |     {
   37 |         string data;
   38 |         badPrivate = true;
   39 |         data = Bad_source(req, resp);
   40 |         if (data != null)
   41 |         {
   42 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   43 |             resp.StatusCode = 404;
>  44 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   45 |         }
   46 |     }
   47 |
   48 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   49 |     {
   50 |         string data;
   51 |         if (badPrivate)
   52 |         {
   53 |             data = """"; /* Initialize data */
   54 |             /* Read data using a listening tcp connection */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,83,"
   73 |                 }
   74 |             }
   75 |             dataCopy = data;
   76 |         }
   77 |         {
   78 |             string data = dataCopy;
   79 |             if (data != null)
   80 |             {
   81 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   82 |                 resp.StatusCode = 404;
>  83 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   84 |             }
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     public override void Good(HttpRequest req, HttpResponse resp)
   90 |     {
   91 |         GoodG2B(req, resp);
   92 |     }
   93 |
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Listen_tcp_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,82,"
   72 |     }
   73 |
   74 |     /* use badsource and badsink */
   75 |     public override void Bad(HttpRequest req, HttpResponse resp)
   76 |     {
   77 |         string data = BadSource(req, resp);
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   81 |             resp.StatusCode = 404;
>  82 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   83 |         }
   84 |     }
   85 | #endif //omitbad
   86 | #if (!OMITGOOD)
   87 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
   88 |     {
   89 |         string data;
   90 |         /* FIX: Use a hardcoded string */
   91 |         data = ""foo"";
   92 |         return data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,59,"
  49 |             }
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         if (data != null)
  56 |         {
  57 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  58 |             resp.StatusCode = 404;
> 59 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  60 |         }
  61 |     }
  62 | #endif //omitbad
  63 | #if (!OMITGOOD)
  64 |     public override void Good(HttpRequest req, HttpResponse resp)
  65 |     {
  66 |         GoodG2B(req, resp);
  67 |     }
  68 |
  69 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (false)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (5 != 5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,75,"
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   74 |             resp.StatusCode = 404;
>  75 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   76 |         }
   77 |     }
   78 | #endif //omitbad
   79 | #if (!OMITGOOD)
   80 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   81 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   82 |     {
   83 |         string data;
   84 |         if (PRIVATE_CONST_FALSE)
   85 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,75,"
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   74 |             resp.StatusCode = 404;
>  75 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   76 |         }
   77 |     }
   78 | #endif //omitbad
   79 | #if (!OMITGOOD)
   80 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   81 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   82 |     {
   83 |         string data;
   84 |         if (privateFalse)
   85 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   73 |             resp.StatusCode = 404;
>  74 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (PRIVATE_CONST_FIVE != 5)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   73 |             resp.StatusCode = 404;
>  74 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (privateFive != 5)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,82,"
   72 |         else
   73 |         {
   74 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   75 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   76 |             data = null;
   77 |         }
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   81 |             resp.StatusCode = 404;
>  82 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   83 |         }
   84 |     }
   85 | #endif //omitbad
   86 | #if (!OMITGOOD)
   87 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   88 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   89 |     {
   90 |         string data;
   91 |         if (PrivateReturnsFalse())
   92 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.STATIC_READONLY_FALSE)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.staticFalse)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.StaticReturnsFalse())
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* FIX: Use a hardcoded string */
   61 |             data = ""foo"";
   62 |         }
   63 |         if (data != null)
   64 |         {
   65 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   66 |             resp.StatusCode = 404;
>  67 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   73 |      * both branches use the GoodSource */
   74 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.STATIC_READONLY_FIVE != 5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   67 |             resp.StatusCode = 404;
>  68 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (IO.staticFive != 5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,69,"
   59 |         default:
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |             break;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   68 |             resp.StatusCode = 404;
>  69 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   70 |         }
   71 |     }
   72 | #endif //omitbad
   73 | #if (!OMITGOOD)
   74 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   75 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   76 |     {
   77 |         string data = null;
   78 |         switch (5)
   79 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,63,"
  53 |                 {
  54 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  55 |                 }
  56 |             }
  57 |             break;
  58 |         }
  59 |         if (data != null)
  60 |         {
  61 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  62 |             resp.StatusCode = 404;
> 63 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  64 |         }
  65 |     }
  66 | #endif //omitbad
  67 | #if (!OMITGOOD)
  68 |     /* goodG2B() - use goodsource and badsink */
  69 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
  72 |         while (true)
  73 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         for (int i = 0; i < 1; i++)
  56 |         {
  57 |             if (data != null)
  58 |             {
  59 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  60 |                 resp.StatusCode = 404;
> 61 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  62 |             }
  63 |         }
  64 |     }
  65 | #endif //omitbad
  66 | #if (!OMITGOOD)
  67 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  68 |      * for statement with the one in the for statement */
  69 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
   33 | #if (!OMITBAD)
   34 |     public override void Bad(HttpRequest req, HttpResponse resp)
   35 |     {
   36 |         string data;
   37 |         badPrivate = true;
   38 |         data = Bad_source(req, resp);
   39 |         if (data != null)
   40 |         {
   41 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   42 |             resp.StatusCode = 404;
>  43 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   44 |         }
   45 |     }
   46 |
   47 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   48 |     {
   49 |         string data;
   50 |         if (badPrivate)
   51 |         {
   52 |             data = """"; /* Initialize data */
   53 |             /* read input from WebClient */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |                 }
  57 |             }
  58 |             dataCopy = data;
  59 |         }
  60 |         {
  61 |             string data = dataCopy;
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  65 |                 resp.StatusCode = 404;
> 66 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  67 |             }
  68 |         }
  69 |     }
  70 | #endif //omitbad
  71 | #if (!OMITGOOD)
  72 |     public override void Good(HttpRequest req, HttpResponse resp)
  73 |     {
  74 |         GoodG2B(req, resp);
  75 |     }
  76 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_NetClient_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |     }
  56 |
  57 |     /* use badsource and badsink */
  58 |     public override void Bad(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data = BadSource(req, resp);
  61 |         if (data != null)
  62 |         {
  63 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  64 |             resp.StatusCode = 404;
> 65 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  66 |         }
  67 |     }
  68 | #endif //omitbad
  69 | #if (!OMITGOOD)
  70 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  71 |     {
  72 |         string data;
  73 |         /* FIX: Use a hardcoded string */
  74 |         data = ""foo"";
  75 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,38,"
  28 |     /* uses badsource and badsink */
  29 |     public override void Bad(HttpRequest req, HttpResponse resp)
  30 |     {
  31 |         string data;
  32 |         /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  33 |         data = req.Params.Get(""name"");
  34 |         if (data != null)
  35 |         {
  36 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  37 |             resp.StatusCode = 404;
> 38 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  39 |         }
  40 |     }
  41 | #endif //omitbad
  42 | #if (!OMITGOOD)
  43 |     public override void Good(HttpRequest req, HttpResponse resp)
  44 |     {
  45 |         GoodG2B(req, resp);
  46 |     }
  47 |
  48 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   46 |             resp.StatusCode = 404;
>  47 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data;
   56 |         if (false)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   46 |             resp.StatusCode = 404;
>  47 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data;
   56 |         if (5 != 5)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         else
   45 |         {
   46 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   47 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   48 |             data = null;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   53 |             resp.StatusCode = 404;
>  54 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (PRIVATE_CONST_FALSE)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         else
   45 |         {
   46 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   47 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   48 |             data = null;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   53 |             resp.StatusCode = 404;
>  54 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (privateFalse)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (PRIVATE_CONST_FIVE != 5)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (privateFive != 5)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   60 |             resp.StatusCode = 404;
>  61 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (PrivateReturnsFalse())
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   46 |             resp.StatusCode = 404;
>  47 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data;
   56 |         if (IO.STATIC_READONLY_FALSE)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   46 |             resp.StatusCode = 404;
>  47 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data;
   56 |         if (IO.staticFalse)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   46 |             resp.StatusCode = 404;
>  47 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data;
   56 |         if (IO.StaticReturnsFalse())
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
  36 |         }
  37 |         else
  38 |         {
  39 |             /* FIX: Use a hardcoded string */
  40 |             data = ""foo"";
  41 |         }
  42 |         if (data != null)
  43 |         {
  44 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  45 |             resp.StatusCode = 404;
> 46 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  47 |         }
  48 |     }
  49 | #endif //omitbad
  50 | #if (!OMITGOOD)
  51 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  52 |      * both branches use the GoodSource */
  53 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  54 |     {
  55 |         string data;
  56 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   46 |             resp.StatusCode = 404;
>  47 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data;
   56 |         if (IO.STATIC_READONLY_FIVE != 5)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   46 |             resp.StatusCode = 404;
>  47 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data;
   56 |         if (IO.staticFive != 5)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,48,"
   38 |         default:
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |             break;
   43 |         }
   44 |         if (data != null)
   45 |         {
   46 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   47 |             resp.StatusCode = 404;
>  48 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   49 |         }
   50 |     }
   51 | #endif //omitbad
   52 | #if (!OMITGOOD)
   53 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   54 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   55 |     {
   56 |         string data = null;
   57 |         switch (5)
   58 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,42,"
  32 |         while (true)
  33 |         {
  34 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  35 |             data = req.Params.Get(""name"");
  36 |             break;
  37 |         }
  38 |         if (data != null)
  39 |         {
  40 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  41 |             resp.StatusCode = 404;
> 42 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  43 |         }
  44 |     }
  45 | #endif //omitbad
  46 | #if (!OMITGOOD)
  47 |     /* goodG2B() - use goodsource and badsink */
  48 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  49 |     {
  50 |         string data;
  51 |         while (true)
  52 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
  30 |     {
  31 |         string data;
  32 |         /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  33 |         data = req.Params.Get(""name"");
  34 |         for (int i = 0; i < 1; i++)
  35 |         {
  36 |             if (data != null)
  37 |             {
  38 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  39 |                 resp.StatusCode = 404;
> 40 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  41 |             }
  42 |         }
  43 |     }
  44 | #endif //omitbad
  45 | #if (!OMITGOOD)
  46 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  47 |      * for statement with the one in the for statement */
  48 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  49 |     {
  50 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   40 |             resp.StatusCode = 404;
>  41 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   42 |         }
   43 |     }
   44 |
   45 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   46 |     {
   47 |         string data;
   48 |         if (badPrivate)
   49 |         {
   50 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
   51 |             data = req.Params.Get(""name"");
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  36 |             data = req.Params.Get(""name"");
  37 |             dataCopy = data;
  38 |         }
  39 |         {
  40 |             string data = dataCopy;
  41 |             if (data != null)
  42 |             {
  43 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  44 |                 resp.StatusCode = 404;
> 45 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  46 |             }
  47 |         }
  48 |     }
  49 | #endif //omitbad
  50 | #if (!OMITGOOD)
  51 |     public override void Good(HttpRequest req, HttpResponse resp)
  52 |     {
  53 |         GoodG2B(req, resp);
  54 |     }
  55 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_Params_Get_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,44,"
  34 |     }
  35 |
  36 |     /* use badsource and badsink */
  37 |     public override void Bad(HttpRequest req, HttpResponse resp)
  38 |     {
  39 |         string data = BadSource(req, resp);
  40 |         if (data != null)
  41 |         {
  42 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  43 |             resp.StatusCode = 404;
> 44 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  45 |         }
  46 |     }
  47 | #endif //omitbad
  48 | #if (!OMITGOOD)
  49 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  50 |     {
  51 |         string data;
  52 |         /* FIX: Use a hardcoded string */
  53 |         data = ""foo"";
  54 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,44,"
  34 |         {
  35 |             if (req.QueryString[""id""] != null)
  36 |             {
  37 |                 data = req.QueryString[""id""];
  38 |             }
  39 |         }
  40 |         if (data != null)
  41 |         {
  42 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  43 |             resp.StatusCode = 404;
> 44 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  45 |         }
  46 |     }
  47 | #endif //omitbad
  48 | #if (!OMITGOOD)
  49 |     public override void Good(HttpRequest req, HttpResponse resp)
  50 |     {
  51 |         GoodG2B(req, resp);
  52 |     }
  53 |
  54 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (false)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (5 != 5)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         else
   51 |         {
   52 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   53 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   54 |             data = null;
   55 |         }
   56 |         if (data != null)
   57 |         {
   58 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   59 |             resp.StatusCode = 404;
>  60 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (PRIVATE_CONST_FALSE)
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         else
   51 |         {
   52 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   53 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   54 |             data = null;
   55 |         }
   56 |         if (data != null)
   57 |         {
   58 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   59 |             resp.StatusCode = 404;
>  60 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (privateFalse)
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,59,"
   49 |         else
   50 |         {
   51 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   52 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   53 |             data = null;
   54 |         }
   55 |         if (data != null)
   56 |         {
   57 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   58 |             resp.StatusCode = 404;
>  59 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   60 |         }
   61 |     }
   62 | #endif //omitbad
   63 | #if (!OMITGOOD)
   64 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   65 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   66 |     {
   67 |         string data;
   68 |         if (PRIVATE_CONST_FIVE != 5)
   69 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,59,"
   49 |         else
   50 |         {
   51 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   52 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   53 |             data = null;
   54 |         }
   55 |         if (data != null)
   56 |         {
   57 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   58 |             resp.StatusCode = 404;
>  59 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   60 |         }
   61 |     }
   62 | #endif //omitbad
   63 | #if (!OMITGOOD)
   64 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   65 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   66 |     {
   67 |         string data;
   68 |         if (privateFive != 5)
   69 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         else
   58 |         {
   59 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   60 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   61 |             data = null;
   62 |         }
   63 |         if (data != null)
   64 |         {
   65 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   66 |             resp.StatusCode = 404;
>  67 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (PrivateReturnsFalse())
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (IO.STATIC_READONLY_FALSE)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (IO.staticFalse)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (IO.StaticReturnsFalse())
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
  42 |         }
  43 |         else
  44 |         {
  45 |             /* FIX: Use a hardcoded string */
  46 |             data = ""foo"";
  47 |         }
  48 |         if (data != null)
  49 |         {
  50 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  51 |             resp.StatusCode = 404;
> 52 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  53 |         }
  54 |     }
  55 | #endif //omitbad
  56 | #if (!OMITGOOD)
  57 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  58 |      * both branches use the GoodSource */
  59 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  60 |     {
  61 |         string data;
  62 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (IO.STATIC_READONLY_FIVE != 5)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   52 |             resp.StatusCode = 404;
>  53 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (IO.staticFive != 5)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         default:
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |             break;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   53 |             resp.StatusCode = 404;
>  54 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data = null;
   63 |         switch (5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,48,"
  38 |                 {
  39 |                     data = req.QueryString[""id""];
  40 |                 }
  41 |             }
  42 |             break;
  43 |         }
  44 |         if (data != null)
  45 |         {
  46 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  47 |             resp.StatusCode = 404;
> 48 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  49 |         }
  50 |     }
  51 | #endif //omitbad
  52 | #if (!OMITGOOD)
  53 |     /* goodG2B() - use goodsource and badsink */
  54 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  55 |     {
  56 |         string data;
  57 |         while (true)
  58 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
  36 |             {
  37 |                 data = req.QueryString[""id""];
  38 |             }
  39 |         }
  40 |         for (int i = 0; i < 1; i++)
  41 |         {
  42 |             if (data != null)
  43 |             {
  44 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  45 |                 resp.StatusCode = 404;
> 46 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  47 |             }
  48 |         }
  49 |     }
  50 | #endif //omitbad
  51 | #if (!OMITGOOD)
  52 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  53 |      * for statement with the one in the for statement */
  54 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  55 |     {
  56 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
   40 |             resp.StatusCode = 404;
>  41 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
   42 |         }
   43 |     }
   44 |
   45 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   46 |     {
   47 |         string data;
   48 |         if (badPrivate)
   49 |         {
   50 |             data = """"; /* initialize data in case id is not in query string */
   51 |             /* POTENTIAL FLAW: Parse id param out of the URL querystring (without using getParameter()) */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,51,"
  41 |                 }
  42 |             }
  43 |             dataCopy = data;
  44 |         }
  45 |         {
  46 |             string data = dataCopy;
  47 |             if (data != null)
  48 |             {
  49 |                 /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  50 |                 resp.StatusCode = 404;
> 51 |                 resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  52 |             }
  53 |         }
  54 |     }
  55 | #endif //omitbad
  56 | #if (!OMITGOOD)
  57 |     public override void Good(HttpRequest req, HttpResponse resp)
  58 |     {
  59 |         GoodG2B(req, resp);
  60 |     }
  61 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE81_XSS_Error_Message/CWE81_XSS_Error_Message__Web_QueryString_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,50,"
  40 |     }
  41 |
  42 |     /* use badsource and badsink */
  43 |     public override void Bad(HttpRequest req, HttpResponse resp)
  44 |     {
  45 |         string data = BadSource(req, resp);
  46 |         if (data != null)
  47 |         {
  48 |             /* POTENTIAL FLAW: script code (e.g. id=<script>alert('xss')</script>) is sent to the client; */
  49 |             resp.StatusCode = 404;
> 50 |             resp.StatusDescription = ""<br>Bad() - Parameter name has value "" + data;
  51 |         }
  52 |     }
  53 | #endif //omitbad
  54 | #if (!OMITGOOD)
  55 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  56 |     {
  57 |         string data;
  58 |         /* FIX: Use a hardcoded string */
  59 |         data = ""foo"";
  60 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
  48 |                 }
  49 |             }
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         if (data != null)
  56 |         {
  57 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 58 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  59 |         }
  60 |     }
  61 | #endif //omitbad
  62 | #if (!OMITGOOD)
  63 |     public override void Good(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         GoodG2B(req, resp);
  66 |     }
  67 |
  68 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (false)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (5 != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  74 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (PRIVATE_CONST_FALSE)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  74 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (privateFalse)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  73 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (PRIVATE_CONST_FIVE != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  73 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (privateFive != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         }
   72 |         else
   73 |         {
   74 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   75 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   76 |             data = null;
   77 |         }
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  81 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   87 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   88 |     {
   89 |         string data;
   90 |         if (PrivateReturnsFalse())
   91 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FALSE)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFalse)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.StaticReturnsFalse())
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |             }
  57 |         }
  58 |         else
  59 |         {
  60 |             /* FIX: Use a hardcoded string */
  61 |             data = ""foo"";
  62 |         }
  63 |         if (data != null)
  64 |         {
  65 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 66 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  72 |      * both branches use the GoodSource */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FIVE != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFive != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |             break;
   59 |         default:
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |             break;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  68 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data = null;
   77 |         switch (5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,62,"
  52 |                 catch (IOException exceptIO)
  53 |                 {
  54 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  55 |                 }
  56 |             }
  57 |             break;
  58 |         }
  59 |         if (data != null)
  60 |         {
  61 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 62 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  63 |         }
  64 |     }
  65 | #endif //omitbad
  66 | #if (!OMITGOOD)
  67 |     /* goodG2B() - use goodsource and badsink */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
  71 |         while (true)
  72 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         for (int i = 0; i < 1; i++)
  56 |         {
  57 |             if (data != null)
  58 |             {
  59 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 60 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  61 |             }
  62 |         }
  63 |     }
  64 | #endif //omitbad
  65 | #if (!OMITGOOD)
  66 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  67 |      * for statement with the one in the for statement */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,42,"
   32 |     private bool badPrivate = false;
   33 | #if (!OMITBAD)
   34 |     public override void Bad(HttpRequest req, HttpResponse resp)
   35 |     {
   36 |         string data;
   37 |         badPrivate = true;
   38 |         data = Bad_source(req, resp);
   39 |         if (data != null)
   40 |         {
   41 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  42 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   43 |         }
   44 |     }
   45 |
   46 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   47 |     {
   48 |         string data;
   49 |         if (badPrivate)
   50 |         {
   51 |             data = """"; /* Initialize data */
   52 |             /* Read data using an outbound tcp connection */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  56 |                 }
  57 |             }
  58 |             dataCopy = data;
  59 |         }
  60 |         {
  61 |             string data = dataCopy;
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 65 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     public override void Good(HttpRequest req, HttpResponse resp)
  72 |     {
  73 |         GoodG2B(req, resp);
  74 |     }
  75 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Connect_tcp_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,64,"
  54 |         return data;
  55 |     }
  56 |
  57 |     /* use badsource and badsink */
  58 |     public override void Bad(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data = BadSource(req, resp);
  61 |         if (data != null)
  62 |         {
  63 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 64 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  65 |         }
  66 |     }
  67 | #endif //omitbad
  68 | #if (!OMITGOOD)
  69 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
  72 |         /* FIX: Use a hardcoded string */
  73 |         data = ""foo"";
  74 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,63,"
  53 |                 }
  54 |             }
  55 |             catch (SqlException exceptSql)
  56 |             {
  57 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  58 |             }
  59 |         }
  60 |         if (data != null)
  61 |         {
  62 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 63 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  64 |         }
  65 |     }
  66 | #endif //omitbad
  67 | #if (!OMITGOOD)
  68 |     public override void Good(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         GoodG2B(req, resp);
  71 |     }
  72 |
  73 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  72 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (false)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  72 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (5 != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |         }
   70 |         else
   71 |         {
   72 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   73 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   74 |             data = null;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  79 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   85 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         if (PRIVATE_CONST_FALSE)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |         }
   70 |         else
   71 |         {
   72 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   73 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   74 |             data = null;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  79 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   85 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         if (privateFalse)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,78,"
   68 |         }
   69 |         else
   70 |         {
   71 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   72 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   73 |             data = null;
   74 |         }
   75 |         if (data != null)
   76 |         {
   77 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  78 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   84 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   85 |     {
   86 |         string data;
   87 |         if (PRIVATE_CONST_FIVE != 5)
   88 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,78,"
   68 |         }
   69 |         else
   70 |         {
   71 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   72 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   73 |             data = null;
   74 |         }
   75 |         if (data != null)
   76 |         {
   77 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  78 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   84 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   85 |     {
   86 |         string data;
   87 |         if (privateFive != 5)
   88 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,86,"
   76 |         }
   77 |         else
   78 |         {
   79 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   80 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   81 |             data = null;
   82 |         }
   83 |         if (data != null)
   84 |         {
   85 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  86 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   87 |         }
   88 |     }
   89 | #endif //omitbad
   90 | #if (!OMITGOOD)
   91 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   92 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   93 |     {
   94 |         string data;
   95 |         if (PrivateReturnsFalse())
   96 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  72 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.STATIC_READONLY_FALSE)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  72 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.staticFalse)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  72 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.StaticReturnsFalse())
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,71,"
   61 |             }
   62 |         }
   63 |         else
   64 |         {
   65 |             /* FIX: Use a hardcoded string */
   66 |             data = ""foo"";
   67 |         }
   68 |         if (data != null)
   69 |         {
   70 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  71 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   72 |         }
   73 |     }
   74 | #endif //omitbad
   75 | #if (!OMITGOOD)
   76 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   77 |      * both branches use the GoodSource */
   78 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  72 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.STATIC_READONLY_FIVE != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,72,"
   62 |         }
   63 |         else
   64 |         {
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |         }
   69 |         if (data != null)
   70 |         {
   71 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  72 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   73 |         }
   74 |     }
   75 | #endif //omitbad
   76 | #if (!OMITGOOD)
   77 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   78 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   79 |     {
   80 |         string data;
   81 |         if (IO.staticFive != 5)
   82 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |             break;
   64 |         default:
   65 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   66 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   67 |             data = null;
   68 |             break;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  73 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data = null;
   82 |         switch (5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
  57 |                 catch (SqlException exceptSql)
  58 |                 {
  59 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  60 |                 }
  61 |             }
  62 |             break;
  63 |         }
  64 |         if (data != null)
  65 |         {
  66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  68 |         }
  69 |     }
  70 | #endif //omitbad
  71 | #if (!OMITGOOD)
  72 |     /* goodG2B() - use goodsource and badsink */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         while (true)
  77 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |             catch (SqlException exceptSql)
  56 |             {
  57 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
  58 |             }
  59 |         }
  60 |         for (int i = 0; i < 1; i++)
  61 |         {
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 65 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  72 |      * for statement with the one in the for statement */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
   31 |     private bool badPrivate = false;
   32 | #if (!OMITBAD)
   33 |     public override void Bad(HttpRequest req, HttpResponse resp)
   34 |     {
   35 |         string data;
   36 |         badPrivate = true;
   37 |         data = Bad_source(req, resp);
   38 |         if (data != null)
   39 |         {
   40 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  41 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   42 |         }
   43 |     }
   44 |
   45 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   46 |     {
   47 |         string data;
   48 |         if (badPrivate)
   49 |         {
   50 |             data = """"; /* Initialize data */
   51 |             /* Read data from a database */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,70,"
   60 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptSql, ""Error with SQL statement"");
   61 |                 }
   62 |             }
   63 |             dataCopy = data;
   64 |         }
   65 |         {
   66 |             string data = dataCopy;
   67 |             if (data != null)
   68 |             {
   69 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  70 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   71 |             }
   72 |         }
   73 |     }
   74 | #endif //omitbad
   75 | #if (!OMITGOOD)
   76 |     public override void Good(HttpRequest req, HttpResponse resp)
   77 |     {
   78 |         GoodG2B(req, resp);
   79 |     }
   80 |
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Database_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,69,"
  59 |         return data;
  60 |     }
  61 |
  62 |     /* use badsource and badsink */
  63 |     public override void Bad(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         string data = BadSource(req, resp);
  66 |         if (data != null)
  67 |         {
  68 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 69 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  70 |         }
  71 |     }
  72 | #endif //omitbad
  73 | #if (!OMITGOOD)
  74 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  75 |     {
  76 |         string data;
  77 |         /* FIX: Use a hardcoded string */
  78 |         data = ""foo"";
  79 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             HttpCookieCollection cookieSources = req.Cookies;
  36 |             if (cookieSources != null)
  37 |             {
  38 |                 /* POTENTIAL FLAW: Read data from the first cookie value */
  39 |                 data = cookieSources[0].Value;
  40 |             }
  41 |         }
  42 |         if (data != null)
  43 |         {
  44 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 45 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     public override void Good(HttpRequest req, HttpResponse resp)
  51 |     {
  52 |         GoodG2B(req, resp);
  53 |     }
  54 |
  55 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  54 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (false)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  54 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (5 != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         }
   52 |         else
   53 |         {
   54 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   55 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   56 |             data = null;
   57 |         }
   58 |         if (data != null)
   59 |         {
   60 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  61 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (PRIVATE_CONST_FALSE)
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,61,"
   51 |         }
   52 |         else
   53 |         {
   54 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   55 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   56 |             data = null;
   57 |         }
   58 |         if (data != null)
   59 |         {
   60 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  61 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   62 |         }
   63 |     }
   64 | #endif //omitbad
   65 | #if (!OMITGOOD)
   66 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   67 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   68 |     {
   69 |         string data;
   70 |         if (privateFalse)
   71 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  60 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (PRIVATE_CONST_FIVE != 5)
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  60 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (privateFive != 5)
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |         }
   59 |         else
   60 |         {
   61 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   62 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   63 |             data = null;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  68 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data;
   77 |         if (PrivateReturnsFalse())
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  54 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.STATIC_READONLY_FALSE)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  54 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.staticFalse)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  54 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.StaticReturnsFalse())
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
  43 |             }
  44 |         }
  45 |         else
  46 |         {
  47 |             /* FIX: Use a hardcoded string */
  48 |             data = ""foo"";
  49 |         }
  50 |         if (data != null)
  51 |         {
  52 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 53 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  54 |         }
  55 |     }
  56 | #endif //omitbad
  57 | #if (!OMITGOOD)
  58 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  59 |      * both branches use the GoodSource */
  60 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  61 |     {
  62 |         string data;
  63 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  54 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.STATIC_READONLY_FIVE != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,54,"
   44 |         }
   45 |         else
   46 |         {
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |         }
   51 |         if (data != null)
   52 |         {
   53 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  54 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   55 |         }
   56 |     }
   57 | #endif //omitbad
   58 | #if (!OMITGOOD)
   59 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   60 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   61 |     {
   62 |         string data;
   63 |         if (IO.staticFive != 5)
   64 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,55,"
   45 |             break;
   46 |         default:
   47 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   48 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   49 |             data = null;
   50 |             break;
   51 |         }
   52 |         if (data != null)
   53 |         {
   54 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  55 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   56 |         }
   57 |     }
   58 | #endif //omitbad
   59 | #if (!OMITGOOD)
   60 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   61 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   62 |     {
   63 |         string data = null;
   64 |         switch (5)
   65 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,49,"
  39 |                 {
  40 |                     /* POTENTIAL FLAW: Read data from the first cookie value */
  41 |                     data = cookieSources[0].Value;
  42 |                 }
  43 |             }
  44 |             break;
  45 |         }
  46 |         if (data != null)
  47 |         {
  48 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 49 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  50 |         }
  51 |     }
  52 | #endif //omitbad
  53 | #if (!OMITGOOD)
  54 |     /* goodG2B() - use goodsource and badsink */
  55 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  56 |     {
  57 |         string data;
  58 |         while (true)
  59 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
  37 |             {
  38 |                 /* POTENTIAL FLAW: Read data from the first cookie value */
  39 |                 data = cookieSources[0].Value;
  40 |             }
  41 |         }
  42 |         for (int i = 0; i < 1; i++)
  43 |         {
  44 |             if (data != null)
  45 |             {
  46 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 47 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  48 |             }
  49 |         }
  50 |     }
  51 | #endif //omitbad
  52 | #if (!OMITGOOD)
  53 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  54 |      * for statement with the one in the for statement */
  55 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  56 |     {
  57 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
   30 |     private bool badPrivate = false;
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  40 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   41 |         }
   42 |     }
   43 |
   44 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   45 |     {
   46 |         string data;
   47 |         if (badPrivate)
   48 |         {
   49 |             data = """"; /* initialize data in case there are no cookies */
   50 |             /* Read data from cookies */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
  42 |                     data = cookieSources[0].Value;
  43 |                 }
  44 |             }
  45 |             dataCopy = data;
  46 |         }
  47 |         {
  48 |             string data = dataCopy;
  49 |             if (data != null)
  50 |             {
  51 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 52 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  53 |             }
  54 |         }
  55 |     }
  56 | #endif //omitbad
  57 | #if (!OMITGOOD)
  58 |     public override void Good(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         GoodG2B(req, resp);
  61 |     }
  62 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Get_Cookies_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,51,"
  41 |         return data;
  42 |     }
  43 |
  44 |     /* use badsource and badsink */
  45 |     public override void Bad(HttpRequest req, HttpResponse resp)
  46 |     {
  47 |         string data = BadSource(req, resp);
  48 |         if (data != null)
  49 |         {
  50 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 51 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  52 |         }
  53 |     }
  54 | #endif //omitbad
  55 | #if (!OMITGOOD)
  56 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  57 |     {
  58 |         string data;
  59 |         /* FIX: Use a hardcoded string */
  60 |         data = ""foo"";
  61 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,75,"
  65 |                     catch(SocketException se)
  66 |                     {
  67 |                         IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
  68 |                     }
  69 |                 }
  70 |             }
  71 |         }
  72 |         if (data != null)
  73 |         {
  74 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 75 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  76 |         }
  77 |     }
  78 | #endif //omitbad
  79 | #if (!OMITGOOD)
  80 |     public override void Good(HttpRequest req, HttpResponse resp)
  81 |     {
  82 |         GoodG2B(req, resp);
  83 |     }
  84 |
  85 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  84 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (false)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  84 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (5 != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,91,"
   81 |         }
   82 |         else
   83 |         {
   84 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   85 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   86 |             data = null;
   87 |         }
   88 |         if (data != null)
   89 |         {
   90 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  91 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   92 |         }
   93 |     }
   94 | #endif //omitbad
   95 | #if (!OMITGOOD)
   96 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   97 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   98 |     {
   99 |         string data;
  100 |         if (PRIVATE_CONST_FALSE)
  101 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,91,"
   81 |         }
   82 |         else
   83 |         {
   84 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   85 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   86 |             data = null;
   87 |         }
   88 |         if (data != null)
   89 |         {
   90 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  91 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   92 |         }
   93 |     }
   94 | #endif //omitbad
   95 | #if (!OMITGOOD)
   96 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   97 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   98 |     {
   99 |         string data;
  100 |         if (privateFalse)
  101 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,90,"
   80 |         }
   81 |         else
   82 |         {
   83 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   84 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   85 |             data = null;
   86 |         }
   87 |         if (data != null)
   88 |         {
   89 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  90 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   91 |         }
   92 |     }
   93 | #endif //omitbad
   94 | #if (!OMITGOOD)
   95 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   96 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   97 |     {
   98 |         string data;
   99 |         if (PRIVATE_CONST_FIVE != 5)
  100 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,90,"
   80 |         }
   81 |         else
   82 |         {
   83 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   84 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   85 |             data = null;
   86 |         }
   87 |         if (data != null)
   88 |         {
   89 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  90 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   91 |         }
   92 |     }
   93 | #endif //omitbad
   94 | #if (!OMITGOOD)
   95 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   96 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   97 |     {
   98 |         string data;
   99 |         if (privateFive != 5)
  100 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,98,"
   88 |         }
   89 |         else
   90 |         {
   91 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   92 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   93 |             data = null;
   94 |         }
   95 |         if (data != null)
   96 |         {
   97 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  98 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   99 |         }
  100 |     }
  101 | #endif //omitbad
  102 | #if (!OMITGOOD)
  103 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
  104 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
  105 |     {
  106 |         string data;
  107 |         if (PrivateReturnsFalse())
  108 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  84 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.STATIC_READONLY_FALSE)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  84 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.staticFalse)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  84 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.StaticReturnsFalse())
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,83,"
   73 |             }
   74 |         }
   75 |         else
   76 |         {
   77 |             /* FIX: Use a hardcoded string */
   78 |             data = ""foo"";
   79 |         }
   80 |         if (data != null)
   81 |         {
   82 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  83 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   84 |         }
   85 |     }
   86 | #endif //omitbad
   87 | #if (!OMITGOOD)
   88 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
   89 |      * both branches use the GoodSource */
   90 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.StaticReturnsTrueOrFalse())
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  84 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.STATIC_READONLY_FIVE != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,84,"
   74 |         }
   75 |         else
   76 |         {
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |         }
   81 |         if (data != null)
   82 |         {
   83 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  84 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   85 |         }
   86 |     }
   87 | #endif //omitbad
   88 | #if (!OMITGOOD)
   89 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   90 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   91 |     {
   92 |         string data;
   93 |         if (IO.staticFive != 5)
   94 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,85,"
   75 |             break;
   76 |         default:
   77 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   78 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   79 |             data = null;
   80 |             break;
   81 |         }
   82 |         if (data != null)
   83 |         {
   84 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  85 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   86 |         }
   87 |     }
   88 | #endif //omitbad
   89 | #if (!OMITGOOD)
   90 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   91 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   92 |     {
   93 |         string data = null;
   94 |         switch (5)
   95 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,79,"
   69 |                             IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
   70 |                         }
   71 |                     }
   72 |                 }
   73 |             }
   74 |             break;
   75 |         }
   76 |         if (data != null)
   77 |         {
   78 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  79 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   80 |         }
   81 |     }
   82 | #endif //omitbad
   83 | #if (!OMITGOOD)
   84 |     /* goodG2B() - use goodsource and badsink */
   85 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
   88 |         while (true)
   89 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,77,"
   67 |                         IO.Logger.Log(NLog.LogLevel.Warn, se, ""Error closing TcpListener"");
   68 |                     }
   69 |                 }
   70 |             }
   71 |         }
   72 |         for (int i = 0; i < 1; i++)
   73 |         {
   74 |             if (data != null)
   75 |             {
   76 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  77 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   78 |             }
   79 |         }
   80 |     }
   81 | #endif //omitbad
   82 | #if (!OMITGOOD)
   83 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
   84 |      * for statement with the one in the for statement */
   85 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
   86 |     {
   87 |         string data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
   33 |     private bool badPrivate = false;
   34 | #if (!OMITBAD)
   35 |     public override void Bad(HttpRequest req, HttpResponse resp)
   36 |     {
   37 |         string data;
   38 |         badPrivate = true;
   39 |         data = Bad_source(req, resp);
   40 |         if (data != null)
   41 |         {
   42 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  43 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   44 |         }
   45 |     }
   46 |
   47 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   48 |     {
   49 |         string data;
   50 |         if (badPrivate)
   51 |         {
   52 |             data = """"; /* Initialize data */
   53 |             /* Read data using a listening tcp connection */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,82,"
   72 |                     }
   73 |                 }
   74 |             }
   75 |             dataCopy = data;
   76 |         }
   77 |         {
   78 |             string data = dataCopy;
   79 |             if (data != null)
   80 |             {
   81 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  82 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   83 |             }
   84 |         }
   85 |     }
   86 | #endif //omitbad
   87 | #if (!OMITGOOD)
   88 |     public override void Good(HttpRequest req, HttpResponse resp)
   89 |     {
   90 |         GoodG2B(req, resp);
   91 |     }
   92 |
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Listen_tcp_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         return data;
   72 |     }
   73 |
   74 |     /* use badsource and badsink */
   75 |     public override void Bad(HttpRequest req, HttpResponse resp)
   76 |     {
   77 |         string data = BadSource(req, resp);
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  81 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
   87 |     {
   88 |         string data;
   89 |         /* FIX: Use a hardcoded string */
   90 |         data = ""foo"";
   91 |         return data;
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
  48 |                 }
  49 |             }
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         if (data != null)
  56 |         {
  57 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 58 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  59 |         }
  60 |     }
  61 | #endif //omitbad
  62 | #if (!OMITGOOD)
  63 |     public override void Good(HttpRequest req, HttpResponse resp)
  64 |     {
  65 |         GoodG2B(req, resp);
  66 |     }
  67 |
  68 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (false)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (5 != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  74 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (PRIVATE_CONST_FALSE)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,74,"
   64 |         }
   65 |         else
   66 |         {
   67 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   68 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   69 |             data = null;
   70 |         }
   71 |         if (data != null)
   72 |         {
   73 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  74 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   75 |         }
   76 |     }
   77 | #endif //omitbad
   78 | #if (!OMITGOOD)
   79 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   80 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   81 |     {
   82 |         string data;
   83 |         if (privateFalse)
   84 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  73 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (PRIVATE_CONST_FIVE != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,73,"
   63 |         }
   64 |         else
   65 |         {
   66 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   67 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   68 |             data = null;
   69 |         }
   70 |         if (data != null)
   71 |         {
   72 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  73 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   74 |         }
   75 |     }
   76 | #endif //omitbad
   77 | #if (!OMITGOOD)
   78 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   79 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   80 |     {
   81 |         string data;
   82 |         if (privateFive != 5)
   83 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,81,"
   71 |         }
   72 |         else
   73 |         {
   74 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   75 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   76 |             data = null;
   77 |         }
   78 |         if (data != null)
   79 |         {
   80 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  81 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   82 |         }
   83 |     }
   84 | #endif //omitbad
   85 | #if (!OMITGOOD)
   86 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   87 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   88 |     {
   89 |         string data;
   90 |         if (PrivateReturnsFalse())
   91 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FALSE)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFalse)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.StaticReturnsFalse())
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
  56 |             }
  57 |         }
  58 |         else
  59 |         {
  60 |             /* FIX: Use a hardcoded string */
  61 |             data = ""foo"";
  62 |         }
  63 |         if (data != null)
  64 |         {
  65 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 66 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  72 |      * both branches use the GoodSource */
  73 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  74 |     {
  75 |         string data;
  76 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.STATIC_READONLY_FIVE != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,67,"
   57 |         }
   58 |         else
   59 |         {
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |         }
   64 |         if (data != null)
   65 |         {
   66 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  67 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   68 |         }
   69 |     }
   70 | #endif //omitbad
   71 | #if (!OMITGOOD)
   72 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   73 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   74 |     {
   75 |         string data;
   76 |         if (IO.staticFive != 5)
   77 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,68,"
   58 |             break;
   59 |         default:
   60 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   61 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   62 |             data = null;
   63 |             break;
   64 |         }
   65 |         if (data != null)
   66 |         {
   67 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  68 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   69 |         }
   70 |     }
   71 | #endif //omitbad
   72 | #if (!OMITGOOD)
   73 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   74 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   75 |     {
   76 |         string data = null;
   77 |         switch (5)
   78 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,62,"
  52 |                 catch (IOException exceptIO)
  53 |                 {
  54 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  55 |                 }
  56 |             }
  57 |             break;
  58 |         }
  59 |         if (data != null)
  60 |         {
  61 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 62 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  63 |         }
  64 |     }
  65 | #endif //omitbad
  66 | #if (!OMITGOOD)
  67 |     /* goodG2B() - use goodsource and badsink */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
  71 |         while (true)
  72 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
  50 |             catch (IOException exceptIO)
  51 |             {
  52 |                 IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  53 |             }
  54 |         }
  55 |         for (int i = 0; i < 1; i++)
  56 |         {
  57 |             if (data != null)
  58 |             {
  59 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 60 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  61 |             }
  62 |         }
  63 |     }
  64 | #endif //omitbad
  65 | #if (!OMITGOOD)
  66 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  67 |      * for statement with the one in the for statement */
  68 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  69 |     {
  70 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,42,"
   32 |     private bool badPrivate = false;
   33 | #if (!OMITBAD)
   34 |     public override void Bad(HttpRequest req, HttpResponse resp)
   35 |     {
   36 |         string data;
   37 |         badPrivate = true;
   38 |         data = Bad_source(req, resp);
   39 |         if (data != null)
   40 |         {
   41 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  42 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   43 |         }
   44 |     }
   45 |
   46 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   47 |     {
   48 |         string data;
   49 |         if (badPrivate)
   50 |         {
   51 |             data = """"; /* Initialize data */
   52 |             /* read input from WebClient */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,65,"
  55 |                     IO.Logger.Log(NLog.LogLevel.Warn, exceptIO, ""Error with stream reading"");
  56 |                 }
  57 |             }
  58 |             dataCopy = data;
  59 |         }
  60 |         {
  61 |             string data = dataCopy;
  62 |             if (data != null)
  63 |             {
  64 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 65 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  66 |             }
  67 |         }
  68 |     }
  69 | #endif //omitbad
  70 | #if (!OMITGOOD)
  71 |     public override void Good(HttpRequest req, HttpResponse resp)
  72 |     {
  73 |         GoodG2B(req, resp);
  74 |     }
  75 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_NetClient_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,64,"
  54 |         return data;
  55 |     }
  56 |
  57 |     /* use badsource and badsink */
  58 |     public override void Bad(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data = BadSource(req, resp);
  61 |         if (data != null)
  62 |         {
  63 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 64 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  65 |         }
  66 |     }
  67 | #endif //omitbad
  68 | #if (!OMITGOOD)
  69 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  70 |     {
  71 |         string data;
  72 |         /* FIX: Use a hardcoded string */
  73 |         data = ""foo"";
  74 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,37,"
  27 | #if (!OMITBAD)
  28 |     /* uses badsource and badsink */
  29 |     public override void Bad(HttpRequest req, HttpResponse resp)
  30 |     {
  31 |         string data;
  32 |         /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  33 |         data = req.Params.Get(""name"");
  34 |         if (data != null)
  35 |         {
  36 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 37 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  38 |         }
  39 |     }
  40 | #endif //omitbad
  41 | #if (!OMITGOOD)
  42 |     public override void Good(HttpRequest req, HttpResponse resp)
  43 |     {
  44 |         GoodG2B(req, resp);
  45 |     }
  46 |
  47 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  46 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (false)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  46 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (5 != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         }
   44 |         else
   45 |         {
   46 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   47 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   48 |             data = null;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  53 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (PRIVATE_CONST_FALSE)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |         }
   44 |         else
   45 |         {
   46 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   47 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   48 |             data = null;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  53 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data;
   62 |         if (privateFalse)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (PRIVATE_CONST_FIVE != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (privateFive != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,60,"
   50 |         }
   51 |         else
   52 |         {
   53 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   54 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   55 |             data = null;
   56 |         }
   57 |         if (data != null)
   58 |         {
   59 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  60 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   61 |         }
   62 |     }
   63 | #endif //omitbad
   64 | #if (!OMITGOOD)
   65 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   66 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   67 |     {
   68 |         string data;
   69 |         if (PrivateReturnsFalse())
   70 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  46 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.STATIC_READONLY_FALSE)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  46 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.staticFalse)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  46 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.StaticReturnsFalse())
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             data = req.Params.Get(""name"");
  36 |         }
  37 |         else
  38 |         {
  39 |             /* FIX: Use a hardcoded string */
  40 |             data = ""foo"";
  41 |         }
  42 |         if (data != null)
  43 |         {
  44 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 45 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  51 |      * both branches use the GoodSource */
  52 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  53 |     {
  54 |         string data;
  55 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  46 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.STATIC_READONLY_FIVE != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,46,"
   36 |         }
   37 |         else
   38 |         {
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |         }
   43 |         if (data != null)
   44 |         {
   45 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  46 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   47 |         }
   48 |     }
   49 | #endif //omitbad
   50 | #if (!OMITGOOD)
   51 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   52 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   53 |     {
   54 |         string data;
   55 |         if (IO.staticFive != 5)
   56 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
   37 |             break;
   38 |         default:
   39 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   40 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   41 |             data = null;
   42 |             break;
   43 |         }
   44 |         if (data != null)
   45 |         {
   46 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  47 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   48 |         }
   49 |     }
   50 | #endif //omitbad
   51 | #if (!OMITGOOD)
   52 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   53 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   54 |     {
   55 |         string data = null;
   56 |         switch (5)
   57 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,41,"
  31 |         string data;
  32 |         while (true)
  33 |         {
  34 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  35 |             data = req.Params.Get(""name"");
  36 |             break;
  37 |         }
  38 |         if (data != null)
  39 |         {
  40 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 41 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  42 |         }
  43 |     }
  44 | #endif //omitbad
  45 | #if (!OMITGOOD)
  46 |     /* goodG2B() - use goodsource and badsink */
  47 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  48 |     {
  49 |         string data;
  50 |         while (true)
  51 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,39,"
  29 |     public override void Bad(HttpRequest req, HttpResponse resp)
  30 |     {
  31 |         string data;
  32 |         /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  33 |         data = req.Params.Get(""name"");
  34 |         for (int i = 0; i < 1; i++)
  35 |         {
  36 |             if (data != null)
  37 |             {
  38 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 39 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  40 |             }
  41 |         }
  42 |     }
  43 | #endif //omitbad
  44 | #if (!OMITGOOD)
  45 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  46 |      * for statement with the one in the for statement */
  47 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  48 |     {
  49 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
   30 |     private bool badPrivate = false;
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  40 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   41 |         }
   42 |     }
   43 |
   44 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   45 |     {
   46 |         string data;
   47 |         if (badPrivate)
   48 |         {
   49 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
   50 |             data = req.Params.Get(""name"");
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,44,"
  34 |             string data;
  35 |             /* POTENTIAL FLAW: Read data from a querystring using Params.Get */
  36 |             data = req.Params.Get(""name"");
  37 |             dataCopy = data;
  38 |         }
  39 |         {
  40 |             string data = dataCopy;
  41 |             if (data != null)
  42 |             {
  43 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 44 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  45 |             }
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     public override void Good(HttpRequest req, HttpResponse resp)
  51 |     {
  52 |         GoodG2B(req, resp);
  53 |     }
  54 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_Params_Get_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
  33 |         return data;
  34 |     }
  35 |
  36 |     /* use badsource and badsink */
  37 |     public override void Bad(HttpRequest req, HttpResponse resp)
  38 |     {
  39 |         string data = BadSource(req, resp);
  40 |         if (data != null)
  41 |         {
  42 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 43 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  44 |         }
  45 |     }
  46 | #endif //omitbad
  47 | #if (!OMITGOOD)
  48 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  49 |     {
  50 |         string data;
  51 |         /* FIX: Use a hardcoded string */
  52 |         data = ""foo"";
  53 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_01.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,43,"
  33 |         /* POTENTIAL FLAW: Parse id param out of the URL querystring (without using getParameter()) */
  34 |         {
  35 |             if (req.QueryString[""id""] != null)
  36 |             {
  37 |                 data = req.QueryString[""id""];
  38 |             }
  39 |         }
  40 |         if (data != null)
  41 |         {
  42 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 43 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  44 |         }
  45 |     }
  46 | #endif //omitbad
  47 | #if (!OMITGOOD)
  48 |     public override void Good(HttpRequest req, HttpResponse resp)
  49 |     {
  50 |         GoodG2B(req, resp);
  51 |     }
  52 |
  53 |     /* goodG2B() - uses goodsource and badsink */
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_02.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing true to false */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (false)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_03.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing 5==5 to 5!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (5 != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_04.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,59,"
   49 |         }
   50 |         else
   51 |         {
   52 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   53 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   54 |             data = null;
   55 |         }
   56 |         if (data != null)
   57 |         {
   58 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  59 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   60 |         }
   61 |     }
   62 | #endif //omitbad
   63 | #if (!OMITGOOD)
   64 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   65 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   66 |     {
   67 |         string data;
   68 |         if (PRIVATE_CONST_FALSE)
   69 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_05.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,59,"
   49 |         }
   50 |         else
   51 |         {
   52 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   53 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   54 |             data = null;
   55 |         }
   56 |         if (data != null)
   57 |         {
   58 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  59 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   60 |         }
   61 |     }
   62 | #endif //omitbad
   63 | #if (!OMITGOOD)
   64 |     /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */
   65 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   66 |     {
   67 |         string data;
   68 |         if (privateFalse)
   69 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_06.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
   48 |         }
   49 |         else
   50 |         {
   51 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   52 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   53 |             data = null;
   54 |         }
   55 |         if (data != null)
   56 |         {
   57 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  58 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   59 |         }
   60 |     }
   61 | #endif //omitbad
   62 | #if (!OMITGOOD)
   63 |     /* goodG2B1() - use goodsource and badsink by changing PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   64 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   65 |     {
   66 |         string data;
   67 |         if (PRIVATE_CONST_FIVE != 5)
   68 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_07.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,58,"
   48 |         }
   49 |         else
   50 |         {
   51 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   52 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   53 |             data = null;
   54 |         }
   55 |         if (data != null)
   56 |         {
   57 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  58 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   59 |         }
   60 |     }
   61 | #endif //omitbad
   62 | #if (!OMITGOOD)
   63 |     /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */
   64 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   65 |     {
   66 |         string data;
   67 |         if (privateFive != 5)
   68 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_08.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,66,"
   56 |         }
   57 |         else
   58 |         {
   59 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   60 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   61 |             data = null;
   62 |         }
   63 |         if (data != null)
   64 |         {
   65 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  66 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   67 |         }
   68 |     }
   69 | #endif //omitbad
   70 | #if (!OMITGOOD)
   71 |     /* goodG2B1() - use goodsource and badsink by changing PrivateReturnsTrue() to PrivateReturnsFalse() */
   72 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   73 |     {
   74 |         string data;
   75 |         if (PrivateReturnsFalse())
   76 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_09.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.STATIC_READONLY_FALSE)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_10.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticTrue to IO.staticFalse */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.staticFalse)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_11.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.StaticReturnsFalse())
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_12.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,51,"
  41 |             }
  42 |         }
  43 |         else
  44 |         {
  45 |             /* FIX: Use a hardcoded string */
  46 |             data = ""foo"";
  47 |         }
  48 |         if (data != null)
  49 |         {
  50 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 51 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  52 |         }
  53 |     }
  54 | #endif //omitbad
  55 | #if (!OMITGOOD)
  56 |     /* goodG2B() - use goodsource and badsink by changing the ""if"" so that
  57 |      * both branches use the GoodSource */
  58 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  59 |     {
  60 |         string data;
  61 |         if (IO.StaticReturnsTrueOrFalse())
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_13.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.STATIC_READONLY_FIVE != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_14.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,52,"
   42 |         }
   43 |         else
   44 |         {
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |         }
   49 |         if (data != null)
   50 |         {
   51 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  52 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */
   58 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   59 |     {
   60 |         string data;
   61 |         if (IO.staticFive != 5)
   62 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_15.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,53,"
   43 |             break;
   44 |         default:
   45 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
   46 |              * but ensure data is inititialized before the Sink to avoid compiler errors */
   47 |             data = null;
   48 |             break;
   49 |         }
   50 |         if (data != null)
   51 |         {
   52 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  53 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   54 |         }
   55 |     }
   56 | #endif //omitbad
   57 | #if (!OMITGOOD)
   58 |     /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */
   59 |     private void GoodG2B1(HttpRequest req, HttpResponse resp)
   60 |     {
   61 |         string data = null;
   62 |         switch (5)
   63 |         {
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_16.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,47,"
  37 |                 if (req.QueryString[""id""] != null)
  38 |                 {
  39 |                     data = req.QueryString[""id""];
  40 |                 }
  41 |             }
  42 |             break;
  43 |         }
  44 |         if (data != null)
  45 |         {
  46 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 47 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  48 |         }
  49 |     }
  50 | #endif //omitbad
  51 | #if (!OMITGOOD)
  52 |     /* goodG2B() - use goodsource and badsink */
  53 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  54 |     {
  55 |         string data;
  56 |         while (true)
  57 |         {
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_17.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,45,"
  35 |             if (req.QueryString[""id""] != null)
  36 |             {
  37 |                 data = req.QueryString[""id""];
  38 |             }
  39 |         }
  40 |         for (int i = 0; i < 1; i++)
  41 |         {
  42 |             if (data != null)
  43 |             {
  44 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 45 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  46 |             }
  47 |         }
  48 |     }
  49 | #endif //omitbad
  50 | #if (!OMITGOOD)
  51 |     /* goodG2B() - use goodsource and badsink by reversing the block outside the
  52 |      * for statement with the one in the for statement */
  53 |     private void GoodG2B(HttpRequest req, HttpResponse resp)
  54 |     {
  55 |         string data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_21.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,40,"
   30 |     private bool badPrivate = false;
   31 | #if (!OMITBAD)
   32 |     public override void Bad(HttpRequest req, HttpResponse resp)
   33 |     {
   34 |         string data;
   35 |         badPrivate = true;
   36 |         data = Bad_source(req, resp);
   37 |         if (data != null)
   38 |         {
   39 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
>  40 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
   41 |         }
   42 |     }
   43 |
   44 |     private string Bad_source(HttpRequest req, HttpResponse resp)
   45 |     {
   46 |         string data;
   47 |         if (badPrivate)
   48 |         {
   49 |             data = """"; /* initialize data in case id is not in query string */
   50 |             /* POTENTIAL FLAW: Parse id param out of the URL querystring (without using getParameter()) */
      ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_31.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,50,"
  40 |                     data = req.QueryString[""id""];
  41 |                 }
  42 |             }
  43 |             dataCopy = data;
  44 |         }
  45 |         {
  46 |             string data = dataCopy;
  47 |             if (data != null)
  48 |             {
  49 |                 /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 50 |                 resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  51 |             }
  52 |         }
  53 |     }
  54 | #endif //omitbad
  55 | #if (!OMITGOOD)
  56 |     public override void Good(HttpRequest req, HttpResponse resp)
  57 |     {
  58 |         GoodG2B(req, resp);
  59 |     }
  60 |
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
008. Reflected cross-site scripting (XSS),CWE-79,"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in NIST/src/testcases/CWE83_XSS_Attribute/CWE83_XSS_Attribute__Web_QueryString_Web_42.cs",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N/E:X/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/008,skims,SAST,49,"
  39 |         return data;
  40 |     }
  41 |
  42 |     /* use badsource and badsink */
  43 |     public override void Bad(HttpRequest req, HttpResponse resp)
  44 |     {
  45 |         string data = BadSource(req, resp);
  46 |         if (data != null)
  47 |         {
  48 |             /* POTENTIAL FLAW: Input is not verified/sanitized before use in an image tag */
> 49 |             resp.Write(""<br>Bad() - <img src=\"""" + data +""\"">"");
  50 |         }
  51 |     }
  52 | #endif //omitbad
  53 | #if (!OMITGOOD)
  54 |     private static string GoodG2BSource(HttpRequest req, HttpResponse resp)
  55 |     {
  56 |         string data;
  57 |         /* FIX: Use a hardcoded string */
  58 |         data = ""foo"";
  59 |         return data;
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
Summary: 540 vulnerabilities were found in your targets.