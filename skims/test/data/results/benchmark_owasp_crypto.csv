title,cwe,description,cvss,finding,stream,kind,where,snippet,method
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,65,"
   55 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   56 |      // 8-byte initialization vector
   57 | //     byte[] iv = {
   58 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   59 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   60 | //     };
   61 |      java.security.SecureRandom random = new java.security.SecureRandom();
   62 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   63 |
   64 |   try {
>  65 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   66 |
   67 |             // Prepare the cipher to encrypt
   68 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = param;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   59 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   60 |
   61 | curity.SecureRandom random = new java.security.SecureRandom();
   62 | = random.generateSeed(8); // DES requires 8 byte keys
   63 |
   64 |
   65 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   66 |
   67 | // Prepare the cipher to encrypt
>  68 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = param;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,52,"
   42 |   response.setContentType(""text/html;charset=UTF-8"");
   43 |
   44 |
   45 |   java.io.InputStream param = request.getInputStream();
   46 |
   47 |
   48 |   try {
   49 |       java.util.Properties benchmarkprops = new java.util.Properties();
   50 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  52 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 |             // Prepare the cipher to encrypt
   55 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 |    // encrypt and store the results
   59 |    byte[] input = { (byte)'?' };
   60 |    Object inputParam = param;
   61 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   62 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,55,"
   45 | putStream param = request.getInputStream();
   46 |
   47 |
   48 |
   49 | til.Properties benchmarkprops = new java.util.Properties();
   50 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   52 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 | // Prepare the cipher to encrypt
>  55 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 | t and store the results
   59 | put = { (byte)'?' };
   60 | putParam = param;
   61 | Param instanceof String) input = ((String) inputParam).getBytes();
   62 | Param instanceof java.io.InputStream) {
   63 | trInput = new byte[1000];
   64 | ((java.io.InputStream) inputParam).read(strInput);
   65 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00020.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   51 |      // 8-byte initialization vector
   52 | //     byte[] iv = {
   53 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 | //     };
   56 |      java.security.SecureRandom random = new java.security.SecureRandom();
   57 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |   try {
>  60 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = param;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   70 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00020.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | ] iv = {
   53 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 |
   56 | curity.SecureRandom random = new java.security.SecureRandom();
   57 | = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
   60 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = param;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 |      }
   58 |     }
   59 |    }
   60 |   }
   61 |
   62 |
   63 |   try {
   64 |       java.util.Properties benchmarkprops = new java.util.Properties();
   65 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   66 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  67 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   68 |
   69 |             // Prepare the cipher to encrypt
   70 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   72 |
   73 |    // encrypt and store the results
   74 |    byte[] input = { (byte)'?' };
   75 |    Object inputParam = param;
   76 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   77 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,70,"
   60 |
   61 |
   62 |
   63 |
   64 | til.Properties benchmarkprops = new java.util.Properties();
   65 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   66 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   67 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   68 |
   69 | // Prepare the cipher to encrypt
>  70 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   72 |
   73 | t and store the results
   74 | put = { (byte)'?' };
   75 | putParam = param;
   76 | Param instanceof String) input = ((String) inputParam).getBytes();
   77 | Param instanceof java.io.InputStream) {
   78 | trInput = new byte[1000];
   79 | ((java.io.InputStream) inputParam).read(strInput);
   80 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00050.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   51 |      // 8-byte initialization vector
   52 | //     byte[] iv = {
   53 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 | //     };
   56 |      java.security.SecureRandom random = new java.security.SecureRandom();
   57 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |   try {
>  60 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = param;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   70 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00050.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | ] iv = {
   53 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 |
   56 | curity.SecureRandom random = new java.security.SecureRandom();
   57 | = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
   60 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = param;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,84,"
   74 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   75 |  8-byte initialization vector
   76 | byte[] iv = {
   77 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   78 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   79 | };
   80 | va.security.SecureRandom random = new java.security.SecureRandom();
   81 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   82 |
   83 |
>  84 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   85 |
   86 |      // Prepare the cipher to encrypt
   87 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   88 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   89 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   90 |
   91 | ncrypt and store the results
   92 | [] input = { (byte)'?' };
   93 | ct inputParam = bar;
   94 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,87,"
   77 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   78 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   79 |
   80 | curity.SecureRandom random = new java.security.SecureRandom();
   81 | = random.generateSeed(8); // DES requires 8 byte keys
   82 |
   83 |
   84 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   85 |
   86 | // Prepare the cipher to encrypt
>  87 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   88 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   89 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   90 |
   91 | t and store the results
   92 | put = { (byte)'?' };
   93 | putParam = bar;
   94 | Param instanceof String) input = ((String) inputParam).getBytes();
   95 | Param instanceof java.io.InputStream) {
   96 | trInput = new byte[1000];
   97 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,78,"
   68 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   69 |      // 8-byte initialization vector
   70 | //     byte[] iv = {
   71 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   72 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   73 | //     };
   74 |      java.security.SecureRandom random = new java.security.SecureRandom();
   75 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   76 |
   77 |   try {
>  78 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   79 |             // Prepare the cipher to encrypt
   80 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   81 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   82 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   83 |
   84 |    // encrypt and store the results
   85 |    byte[] input = { (byte)'?' };
   86 |    Object inputParam = bar;
   87 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   88 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,80,"
   70 | ] iv = {
   71 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   72 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   73 |
   74 | curity.SecureRandom random = new java.security.SecureRandom();
   75 | = random.generateSeed(8); // DES requires 8 byte keys
   76 |
   77 |
   78 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   79 | // Prepare the cipher to encrypt
>  80 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   81 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   82 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   83 |
   84 | t and store the results
   85 | put = { (byte)'?' };
   86 | putParam = bar;
   87 | Param instanceof String) input = ((String) inputParam).getBytes();
   88 | Param instanceof java.io.InputStream) {
   89 | trInput = new byte[1000];
   90 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,88,"
   78 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   79 |      // 8-byte initialization vector
   80 | //     byte[] iv = {
   81 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   82 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   83 | //     };
   84 |      java.security.SecureRandom random = new java.security.SecureRandom();
   85 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   86 |
   87 |   try {
>  88 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   89 |             // Prepare the cipher to encrypt
   90 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   91 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   92 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   93 |
   94 |    // encrypt and store the results
   95 |    byte[] input = { (byte)'?' };
   96 |    Object inputParam = bar;
   97 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   98 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,90,"
   80 | ] iv = {
   81 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   82 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   83 |
   84 | curity.SecureRandom random = new java.security.SecureRandom();
   85 | = random.generateSeed(8); // DES requires 8 byte keys
   86 |
   87 |
   88 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   89 | // Prepare the cipher to encrypt
>  90 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   91 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   92 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   93 |
   94 | t and store the results
   95 | put = { (byte)'?' };
   96 | putParam = bar;
   97 | Param instanceof String) input = ((String) inputParam).getBytes();
   98 | Param instanceof java.io.InputStream) {
   99 | trInput = new byte[1000];
  100 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,84,"
   74 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   75 |      // 8-byte initialization vector
   76 | //     byte[] iv = {
   77 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   78 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   79 | //     };
   80 |      java.security.SecureRandom random = new java.security.SecureRandom();
   81 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   82 |
   83 |   try {
>  84 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   85 |
   86 |             // Prepare the cipher to encrypt
   87 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   88 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   89 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   90 |
   91 |    // encrypt and store the results
   92 |    byte[] input = { (byte)'?' };
   93 |    Object inputParam = bar;
   94 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,87,"
   77 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   78 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   79 |
   80 | curity.SecureRandom random = new java.security.SecureRandom();
   81 | = random.generateSeed(8); // DES requires 8 byte keys
   82 |
   83 |
   84 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   85 |
   86 | // Prepare the cipher to encrypt
>  87 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   88 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   89 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   90 |
   91 | t and store the results
   92 | put = { (byte)'?' };
   93 | putParam = bar;
   94 | Param instanceof String) input = ((String) inputParam).getBytes();
   95 | Param instanceof java.io.InputStream) {
   96 | trInput = new byte[1000];
   97 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00059.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,82,"
   72 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   73 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   74 | //     };
   75 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   76 | //  byte[] iv = random.generateSeed(16);
   77 |
   78 |   try {
   79 |    java.util.Properties benchmarkprops = new java.util.Properties();
   80 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   81 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  82 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   83 |
   84 |    // Prepare the cipher to encrypt
   85 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   86 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   87 |
   88 |    // encrypt and store the results
   89 |    byte[] input = { (byte)'?' };
   90 |    Object inputParam = bar;
   91 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   92 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00119.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,79,"
   69 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   70 |  8-byte initialization vector
   71 | byte[] iv = {
   72 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   73 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   74 | };
   75 | va.security.SecureRandom random = new java.security.SecureRandom();
   76 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   77 |
   78 |
>  79 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   80 |
   81 |      // Prepare the cipher to encrypt
   82 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   83 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   84 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   85 |
   86 | ncrypt and store the results
   87 | [] input = { (byte)'?' };
   88 | ct inputParam = bar;
   89 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00119.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,82,"
   72 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   73 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   74 |
   75 | curity.SecureRandom random = new java.security.SecureRandom();
   76 | = random.generateSeed(8); // DES requires 8 byte keys
   77 |
   78 |
   79 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   80 |
   81 | // Prepare the cipher to encrypt
>  82 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   83 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   84 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   85 |
   86 | t and store the results
   87 | put = { (byte)'?' };
   88 | putParam = bar;
   89 | Param instanceof String) input = ((String) inputParam).getBytes();
   90 | Param instanceof java.io.InputStream) {
   91 | trInput = new byte[1000];
   92 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00120.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,70,"
   60 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   61 |  8-byte initialization vector
   62 | byte[] iv = {
   63 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   64 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   65 | };
   66 | va.security.SecureRandom random = new java.security.SecureRandom();
   67 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   68 |
   69 |
>  70 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   71 |
   72 |      // Prepare the cipher to encrypt
   73 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   74 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   75 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   76 |
   77 | ncrypt and store the results
   78 | [] input = { (byte)'?' };
   79 | ct inputParam = bar;
   80 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00120.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   64 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   65 |
   66 | curity.SecureRandom random = new java.security.SecureRandom();
   67 | = random.generateSeed(8); // DES requires 8 byte keys
   68 |
   69 |
   70 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   71 |
   72 | // Prepare the cipher to encrypt
>  73 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   74 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   75 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   76 |
   77 | t and store the results
   78 | put = { (byte)'?' };
   79 | putParam = bar;
   80 | Param instanceof String) input = ((String) inputParam).getBytes();
   81 | Param instanceof java.io.InputStream) {
   82 | trInput = new byte[1000];
   83 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |      // 8-byte initialization vector
   58 | //     byte[] iv = {
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 |      java.security.SecureRandom random = new java.security.SecureRandom();
   63 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |   try {
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 |    // encrypt and store the results
   74 |    byte[] input = { (byte)'?' };
   75 |    Object inputParam = bar;
   76 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | t and store the results
   74 | put = { (byte)'?' };
   75 | putParam = bar;
   76 | Param instanceof String) input = ((String) inputParam).getBytes();
   77 | Param instanceof java.io.InputStream) {
   78 | trInput = new byte[1000];
   79 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   63 |      // 8-byte initialization vector
   64 | //     byte[] iv = {
   65 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 | //     };
   68 |      java.security.SecureRandom random = new java.security.SecureRandom();
   69 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |   try {
>  72 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   73 |
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 |
   68 | curity.SecureRandom random = new java.security.SecureRandom();
   69 | = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |
   72 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   73 |
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |      // 8-byte initialization vector
   58 | //     byte[] iv = {
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 |      java.security.SecureRandom random = new java.security.SecureRandom();
   63 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |   try {
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 |    // encrypt and store the results
   74 |    byte[] input = { (byte)'?' };
   75 |    Object inputParam = bar;
   76 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | t and store the results
   74 | put = { (byte)'?' };
   75 | putParam = bar;
   76 | Param instanceof String) input = ((String) inputParam).getBytes();
   77 | Param instanceof java.io.InputStream) {
   78 | trInput = new byte[1000];
   79 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00127.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,79,"
   69 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   70 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   71 | //     };
   72 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   73 | //  byte[] iv = random.generateSeed(16);
   74 |
   75 |   try {
   76 |    java.util.Properties benchmarkprops = new java.util.Properties();
   77 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   78 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  79 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   80 |
   81 |    // Prepare the cipher to encrypt
   82 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   83 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   84 |
   85 |    // encrypt and store the results
   86 |    byte[] input = { (byte)'?' };
   87 |    Object inputParam = bar;
   88 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   89 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00128.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 | //     };
   68 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   69 | //  byte[] iv = random.generateSeed(16);
   70 |
   71 |   try {
   72 |    java.util.Properties benchmarkprops = new java.util.Properties();
   73 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   74 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  75 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   76 |
   77 |    // Prepare the cipher to encrypt
   78 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   79 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   80 |
   81 |    // encrypt and store the results
   82 |    byte[] input = { (byte)'?' };
   83 |    Object inputParam = bar;
   84 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   85 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00129.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   63 | //  byte[] iv = random.generateSeed(16);
   64 |
   65 |   try {
   66 |    java.util.Properties benchmarkprops = new java.util.Properties();
   67 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  69 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 |    // Prepare the cipher to encrypt
   72 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   73 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   79 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00130.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,88,"
   78 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   79 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   80 | //     };
   81 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   82 | //  byte[] iv = random.generateSeed(16);
   83 |
   84 |   try {
   85 |    java.util.Properties benchmarkprops = new java.util.Properties();
   86 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   87 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  88 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   89 |
   90 |    // Prepare the cipher to encrypt
   91 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   92 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   93 |
   94 |    // encrypt and store the results
   95 |    byte[] input = { (byte)'?' };
   96 |    Object inputParam = bar;
   97 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   98 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00208.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,81,"
   71 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   72 |      // 8-byte initialization vector
   73 | //     byte[] iv = {
   74 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   75 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   76 | //     };
   77 |      java.security.SecureRandom random = new java.security.SecureRandom();
   78 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   79 |
   80 |   try {
>  81 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   82 |             // Prepare the cipher to encrypt
   83 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   84 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   85 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   86 |
   87 |    // encrypt and store the results
   88 |    byte[] input = { (byte)'?' };
   89 |    Object inputParam = bar;
   90 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   91 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00208.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,83,"
   73 | ] iv = {
   74 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   75 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   76 |
   77 | curity.SecureRandom random = new java.security.SecureRandom();
   78 | = random.generateSeed(8); // DES requires 8 byte keys
   79 |
   80 |
   81 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   82 | // Prepare the cipher to encrypt
>  83 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   84 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   85 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   86 |
   87 | t and store the results
   88 | put = { (byte)'?' };
   89 | putParam = bar;
   90 | Param instanceof String) input = ((String) inputParam).getBytes();
   91 | Param instanceof java.io.InputStream) {
   92 | trInput = new byte[1000];
   93 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,78,"
   68 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   69 |      // 8-byte initialization vector
   70 | //     byte[] iv = {
   71 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   72 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   73 | //     };
   74 |      java.security.SecureRandom random = new java.security.SecureRandom();
   75 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   76 |
   77 |   try {
>  78 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   79 |
   80 |             // Prepare the cipher to encrypt
   81 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   82 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   83 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   84 |
   85 |    // encrypt and store the results
   86 |    byte[] input = { (byte)'?' };
   87 |    Object inputParam = bar;
   88 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,81,"
   71 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   72 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   73 |
   74 | curity.SecureRandom random = new java.security.SecureRandom();
   75 | = random.generateSeed(8); // DES requires 8 byte keys
   76 |
   77 |
   78 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   79 |
   80 | // Prepare the cipher to encrypt
>  81 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   82 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   83 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   84 |
   85 | t and store the results
   86 | put = { (byte)'?' };
   87 | putParam = bar;
   88 | Param instanceof String) input = ((String) inputParam).getBytes();
   89 | Param instanceof java.io.InputStream) {
   90 | trInput = new byte[1000];
   91 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00213.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,88,"
   78 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   79 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   80 | //     };
   81 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   82 | //  byte[] iv = random.generateSeed(16);
   83 |
   84 |   try {
   85 |    java.util.Properties benchmarkprops = new java.util.Properties();
   86 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   87 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  88 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   89 |
   90 |    // Prepare the cipher to encrypt
   91 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   92 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   93 |
   94 |    // encrypt and store the results
   95 |    byte[] input = { (byte)'?' };
   96 |    Object inputParam = bar;
   97 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   98 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00214.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,78,"
   68 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   69 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   70 | //     };
   71 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   72 | //  byte[] iv = random.generateSeed(16);
   73 |
   74 |   try {
   75 |    java.util.Properties benchmarkprops = new java.util.Properties();
   76 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   77 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  78 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   79 |
   80 |    // Prepare the cipher to encrypt
   81 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   82 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   83 |
   84 |    // encrypt and store the results
   85 |    byte[] input = { (byte)'?' };
   86 |    Object inputParam = bar;
   87 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   88 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00254.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   63 |  8-byte initialization vector
   64 | byte[] iv = {
   65 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 | };
   68 | va.security.SecureRandom random = new java.security.SecureRandom();
   69 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |
>  72 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   73 |
   74 |      // Prepare the cipher to encrypt
   75 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | ncrypt and store the results
   80 | [] input = { (byte)'?' };
   81 | ct inputParam = bar;
   82 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00254.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 |
   68 | curity.SecureRandom random = new java.security.SecureRandom();
   69 | = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |
   72 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   73 |
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00256.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,78,"
   68 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   69 |      // 8-byte initialization vector
   70 | //     byte[] iv = {
   71 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   72 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   73 | //     };
   74 |      java.security.SecureRandom random = new java.security.SecureRandom();
   75 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   76 |
   77 |   try {
>  78 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   79 |             // Prepare the cipher to encrypt
   80 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   81 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   82 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   83 |
   84 |    // encrypt and store the results
   85 |    byte[] input = { (byte)'?' };
   86 |    Object inputParam = bar;
   87 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   88 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00256.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,80,"
   70 | ] iv = {
   71 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   72 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   73 |
   74 | curity.SecureRandom random = new java.security.SecureRandom();
   75 | = random.generateSeed(8); // DES requires 8 byte keys
   76 |
   77 |
   78 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   79 | // Prepare the cipher to encrypt
>  80 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   81 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   82 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   83 |
   84 | t and store the results
   85 | put = { (byte)'?' };
   86 | putParam = bar;
   87 | Param instanceof String) input = ((String) inputParam).getBytes();
   88 | Param instanceof java.io.InputStream) {
   89 | trInput = new byte[1000];
   90 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00257.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   60 |      // 8-byte initialization vector
   61 | //     byte[] iv = {
   62 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   63 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   64 | //     };
   65 |      java.security.SecureRandom random = new java.security.SecureRandom();
   66 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   67 |
   68 |   try {
>  69 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   70 |             // Prepare the cipher to encrypt
   71 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   72 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   73 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   79 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00257.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,71,"
   61 | ] iv = {
   62 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   63 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   64 |
   65 | curity.SecureRandom random = new java.security.SecureRandom();
   66 | = random.generateSeed(8); // DES requires 8 byte keys
   67 |
   68 |
   69 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   70 | // Prepare the cipher to encrypt
>  71 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   72 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   73 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   74 |
   75 | t and store the results
   76 | put = { (byte)'?' };
   77 | putParam = bar;
   78 | Param instanceof String) input = ((String) inputParam).getBytes();
   79 | Param instanceof java.io.InputStream) {
   80 | trInput = new byte[1000];
   81 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00258.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   59 |      // 8-byte initialization vector
   60 | //     byte[] iv = {
   61 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 | //     };
   64 |      java.security.SecureRandom random = new java.security.SecureRandom();
   65 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |   try {
>  68 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   69 |             // Prepare the cipher to encrypt
   70 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   72 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   73 |
   74 |    // encrypt and store the results
   75 |    byte[] input = { (byte)'?' };
   76 |    Object inputParam = bar;
   77 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   78 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00258.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,70,"
   60 | ] iv = {
   61 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 |
   64 | curity.SecureRandom random = new java.security.SecureRandom();
   65 | = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |
   68 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   69 | // Prepare the cipher to encrypt
>  70 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   72 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   73 |
   74 | t and store the results
   75 | put = { (byte)'?' };
   76 | putParam = bar;
   77 | Param instanceof String) input = ((String) inputParam).getBytes();
   78 | Param instanceof java.io.InputStream) {
   79 | trInput = new byte[1000];
   80 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,58,"
   48 |   if (param != null) {
   49 |    bar = new String( org.apache.commons.codec.binary.Base64.decodeBase64(
   50 |    org.apache.commons.codec.binary.Base64.encodeBase64( param.getBytes() ) ));
   51 |   }
   52 |
   53 |
   54 |   try {
   55 |       java.util.Properties benchmarkprops = new java.util.Properties();
   56 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   57 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  58 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   59 |
   60 |             // Prepare the cipher to encrypt
   61 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   62 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   63 |
   64 |    // encrypt and store the results
   65 |    byte[] input = { (byte)'?' };
   66 |    Object inputParam = bar;
   67 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   68 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,61,"
   51 |
   52 |
   53 |
   54 |
   55 | til.Properties benchmarkprops = new java.util.Properties();
   56 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   57 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   58 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   59 |
   60 | // Prepare the cipher to encrypt
>  61 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   62 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   63 |
   64 | t and store the results
   65 | put = { (byte)'?' };
   66 | putParam = bar;
   67 | Param instanceof String) input = ((String) inputParam).getBytes();
   68 | Param instanceof java.io.InputStream) {
   69 | trInput = new byte[1000];
   70 | ((java.io.InputStream) inputParam).read(strInput);
   71 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 |       org.apache.commons.codec.binary.Base64.encodeBase64( d85622.getBytes() ) )); // B64 encode and decode it
   58 |   String f85622 = e85622.split("" "")[0]; // split it on a space
   59 |   org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
   60 |   String bar = thing.doSomething(f85622); // reflection
   61 |
   62 |
   63 |   try {
   64 |       java.util.Properties benchmarkprops = new java.util.Properties();
   65 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   66 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  67 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   68 |
   69 |             // Prepare the cipher to encrypt
   70 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   72 |
   73 |    // encrypt and store the results
   74 |    byte[] input = { (byte)'?' };
   75 |    Object inputParam = bar;
   76 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   77 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,70,"
   60 |  = thing.doSomething(f85622); // reflection
   61 |
   62 |
   63 |
   64 | til.Properties benchmarkprops = new java.util.Properties();
   65 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   66 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   67 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   68 |
   69 | // Prepare the cipher to encrypt
>  70 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   72 |
   73 | t and store the results
   74 | put = { (byte)'?' };
   75 | putParam = bar;
   76 | Param instanceof String) input = ((String) inputParam).getBytes();
   77 | Param instanceof java.io.InputStream) {
   78 | trInput = new byte[1000];
   79 | ((java.io.InputStream) inputParam).read(strInput);
   80 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |   int num = 196;
   51 |   if ( (500/42) + num > 200 )
   52 |      bar = param;
   53 |   else bar = ""This should never happen"";
   54 |
   55 |
   56 |   try {
   57 |       java.util.Properties benchmarkprops = new java.util.Properties();
   58 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   59 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  60 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   61 |
   62 |             // Prepare the cipher to encrypt
   63 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = bar;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   70 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,63,"
   53 |  ""This should never happen"";
   54 |
   55 |
   56 |
   57 | til.Properties benchmarkprops = new java.util.Properties();
   58 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   59 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   60 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   61 |
   62 | // Prepare the cipher to encrypt
>  63 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = bar;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
   73 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00357.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   55 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   56 | //     };
   57 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   58 | //  byte[] iv = random.generateSeed(16);
   59 |
   60 |   try {
   61 |    java.util.Properties benchmarkprops = new java.util.Properties();
   62 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   63 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   65 |
   66 |    // Prepare the cipher to encrypt
   67 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   68 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   69 |
   70 |    // encrypt and store the results
   71 |    byte[] input = { (byte)'?' };
   72 |    Object inputParam = bar;
   73 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   74 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00358.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,65,"
   55 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   56 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   57 | //     };
   58 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   59 | //  byte[] iv = random.generateSeed(16);
   60 |
   61 |   try {
   62 |    java.util.Properties benchmarkprops = new java.util.Properties();
   63 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   64 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  65 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   66 |
   67 |    // Prepare the cipher to encrypt
   68 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   69 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   75 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,79,"
   69 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   70 |      // 8-byte initialization vector
   71 | //     byte[] iv = {
   72 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   73 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   74 | //     };
   75 |      java.security.SecureRandom random = new java.security.SecureRandom();
   76 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   77 |
   78 |   try {
>  79 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   80 |
   81 |             // Prepare the cipher to encrypt
   82 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   83 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   84 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   85 |
   86 |    // encrypt and store the results
   87 |    byte[] input = { (byte)'?' };
   88 |    Object inputParam = bar;
   89 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,82,"
   72 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   73 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   74 |
   75 | curity.SecureRandom random = new java.security.SecureRandom();
   76 | = random.generateSeed(8); // DES requires 8 byte keys
   77 |
   78 |
   79 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   80 |
   81 | // Prepare the cipher to encrypt
>  82 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   83 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   84 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   85 |
   86 | t and store the results
   87 | put = { (byte)'?' };
   88 | putParam = bar;
   89 | Param instanceof String) input = ((String) inputParam).getBytes();
   90 | Param instanceof java.io.InputStream) {
   91 | trInput = new byte[1000];
   92 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   63 |      // 8-byte initialization vector
   64 | //     byte[] iv = {
   65 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 | //     };
   68 |      java.security.SecureRandom random = new java.security.SecureRandom();
   69 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |   try {
>  72 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   73 |
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 |
   68 | curity.SecureRandom random = new java.security.SecureRandom();
   69 | = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |
   72 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   73 |
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,65,"
   55 |   int num = 86;
   56 |   if ( (7*42) - num > 200 )
   57 |      bar = ""This_should_always_happen"";
   58 |   else bar = param;
   59 |
   60 |
   61 |   try {
   62 |       java.util.Properties benchmarkprops = new java.util.Properties();
   63 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   64 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  65 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   66 |
   67 |             // Prepare the cipher to encrypt
   68 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   75 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 |  param;
   59 |
   60 |
   61 |
   62 | til.Properties benchmarkprops = new java.util.Properties();
   63 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   64 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   65 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   66 |
   67 | // Prepare the cipher to encrypt
>  68 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
   78 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 |   String bar = param;
   53 |   if (param != null && param.length() > 1) {
   54 |       bar = param.substring(0,param.length()-1);
   55 |   }
   56 |
   57 |
   58 |   try {
   59 |       java.util.Properties benchmarkprops = new java.util.Properties();
   60 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   61 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  62 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   63 |
   64 |             // Prepare the cipher to encrypt
   65 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   66 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   67 |
   68 |    // encrypt and store the results
   69 |    byte[] input = { (byte)'?' };
   70 |    Object inputParam = bar;
   71 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   72 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,65,"
   55 |
   56 |
   57 |
   58 |
   59 | til.Properties benchmarkprops = new java.util.Properties();
   60 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   61 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   62 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   63 |
   64 | // Prepare the cipher to encrypt
>  65 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   66 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   67 |
   68 | t and store the results
   69 | put = { (byte)'?' };
   70 | putParam = bar;
   71 | Param instanceof String) input = ((String) inputParam).getBytes();
   72 | Param instanceof java.io.InputStream) {
   73 | trInput = new byte[1000];
   74 | ((java.io.InputStream) inputParam).read(strInput);
   75 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00450.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,82,"
   72 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   73 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   74 | //     };
   75 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   76 | //  byte[] iv = random.generateSeed(16);
   77 |
   78 |   try {
   79 |    java.util.Properties benchmarkprops = new java.util.Properties();
   80 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   81 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  82 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   83 |
   84 |    // Prepare the cipher to encrypt
   85 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   86 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   87 |
   88 |    // encrypt and store the results
   89 |    byte[] input = { (byte)'?' };
   90 |    Object inputParam = bar;
   91 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   92 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00451.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 | //     };
   68 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   69 | //  byte[] iv = random.generateSeed(16);
   70 |
   71 |   try {
   72 |    java.util.Properties benchmarkprops = new java.util.Properties();
   73 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   74 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  75 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   76 |
   77 |    // Prepare the cipher to encrypt
   78 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   79 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   80 |
   81 |    // encrypt and store the results
   82 |    byte[] input = { (byte)'?' };
   83 |    Object inputParam = bar;
   84 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   85 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00521.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,81,"
   71 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   72 |  8-byte initialization vector
   73 | byte[] iv = {
   74 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   75 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   76 | };
   77 | va.security.SecureRandom random = new java.security.SecureRandom();
   78 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   79 |
   80 |
>  81 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   82 |
   83 |      // Prepare the cipher to encrypt
   84 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   85 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   86 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   87 |
   88 | ncrypt and store the results
   89 | [] input = { (byte)'?' };
   90 | ct inputParam = bar;
   91 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00521.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,84,"
   74 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   75 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   76 |
   77 | curity.SecureRandom random = new java.security.SecureRandom();
   78 | = random.generateSeed(8); // DES requires 8 byte keys
   79 |
   80 |
   81 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   82 |
   83 | // Prepare the cipher to encrypt
>  84 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   85 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   86 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   87 |
   88 | t and store the results
   89 | put = { (byte)'?' };
   90 | putParam = bar;
   91 | Param instanceof String) input = ((String) inputParam).getBytes();
   92 | Param instanceof java.io.InputStream) {
   93 | trInput = new byte[1000];
   94 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00522.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,81,"
   71 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   72 |      // 8-byte initialization vector
   73 | //     byte[] iv = {
   74 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   75 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   76 | //     };
   77 |      java.security.SecureRandom random = new java.security.SecureRandom();
   78 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   79 |
   80 |   try {
>  81 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   82 |             // Prepare the cipher to encrypt
   83 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   84 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   85 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   86 |
   87 |    // encrypt and store the results
   88 |    byte[] input = { (byte)'?' };
   89 |    Object inputParam = bar;
   90 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   91 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00522.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,83,"
   73 | ] iv = {
   74 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   75 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   76 |
   77 | curity.SecureRandom random = new java.security.SecureRandom();
   78 | = random.generateSeed(8); // DES requires 8 byte keys
   79 |
   80 |
   81 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   82 | // Prepare the cipher to encrypt
>  83 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   84 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   85 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   86 |
   87 | t and store the results
   88 | put = { (byte)'?' };
   89 | putParam = bar;
   90 | Param instanceof String) input = ((String) inputParam).getBytes();
   91 | Param instanceof java.io.InputStream) {
   92 | trInput = new byte[1000];
   93 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00524.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,91,"
   81 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   82 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   83 | //     };
   84 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   85 | //  byte[] iv = random.generateSeed(16);
   86 |
   87 |   try {
   88 |    java.util.Properties benchmarkprops = new java.util.Properties();
   89 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   90 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  91 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   92 |
   93 |    // Prepare the cipher to encrypt
   94 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   95 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   96 |
   97 |    // encrypt and store the results
   98 |    byte[] input = { (byte)'?' };
   99 |    Object inputParam = bar;
  100 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
  101 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00608.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   63 |  8-byte initialization vector
   64 | byte[] iv = {
   65 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 | };
   68 | va.security.SecureRandom random = new java.security.SecureRandom();
   69 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |
>  72 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   73 |
   74 |      // Prepare the cipher to encrypt
   75 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | ncrypt and store the results
   80 | [] input = { (byte)'?' };
   81 | ct inputParam = bar;
   82 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00608.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 |
   68 | curity.SecureRandom random = new java.security.SecureRandom();
   69 | = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |
   72 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   73 |
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,63,"
   53 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   54 |  8-byte initialization vector
   55 | byte[] iv = {
   56 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   57 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   58 | };
   59 | va.security.SecureRandom random = new java.security.SecureRandom();
   60 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   61 |
   62 |
>  63 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   64 |
   65 |      // Prepare the cipher to encrypt
   66 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 | ncrypt and store the results
   71 | [] input = { (byte)'?' };
   72 | ct inputParam = bar;
   73 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   57 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   58 |
   59 | curity.SecureRandom random = new java.security.SecureRandom();
   60 | = random.generateSeed(8); // DES requires 8 byte keys
   61 |
   62 |
   63 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   64 |
   65 | // Prepare the cipher to encrypt
>  66 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 | t and store the results
   71 | put = { (byte)'?' };
   72 | putParam = bar;
   73 | Param instanceof String) input = ((String) inputParam).getBytes();
   74 | Param instanceof java.io.InputStream) {
   75 | trInput = new byte[1000];
   76 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00610.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   67 |  8-byte initialization vector
   68 | byte[] iv = {
   69 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   70 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   71 | };
   72 | va.security.SecureRandom random = new java.security.SecureRandom();
   73 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   74 |
   75 |
>  76 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   77 |
   78 |      // Prepare the cipher to encrypt
   79 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   80 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   81 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   82 |
   83 | ncrypt and store the results
   84 | [] input = { (byte)'?' };
   85 | ct inputParam = bar;
   86 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00610.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,79,"
   69 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   70 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   71 |
   72 | curity.SecureRandom random = new java.security.SecureRandom();
   73 | = random.generateSeed(8); // DES requires 8 byte keys
   74 |
   75 |
   76 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   77 |
   78 | // Prepare the cipher to encrypt
>  79 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   80 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   81 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   82 |
   83 | t and store the results
   84 | put = { (byte)'?' };
   85 | putParam = bar;
   86 | Param instanceof String) input = ((String) inputParam).getBytes();
   87 | Param instanceof java.io.InputStream) {
   88 | trInput = new byte[1000];
   89 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00611.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   59 |  8-byte initialization vector
   60 | byte[] iv = {
   61 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 | };
   64 | va.security.SecureRandom random = new java.security.SecureRandom();
   65 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |
>  68 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   69 |
   70 |      // Prepare the cipher to encrypt
   71 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   72 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   73 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   74 |
   75 | ncrypt and store the results
   76 | [] input = { (byte)'?' };
   77 | ct inputParam = bar;
   78 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00611.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,71,"
   61 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 |
   64 | curity.SecureRandom random = new java.security.SecureRandom();
   65 | = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |
   68 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   69 |
   70 | // Prepare the cipher to encrypt
>  71 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   72 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   73 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   74 |
   75 | t and store the results
   76 | put = { (byte)'?' };
   77 | putParam = bar;
   78 | Param instanceof String) input = ((String) inputParam).getBytes();
   79 | Param instanceof java.io.InputStream) {
   80 | trInput = new byte[1000];
   81 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   63 |      // 8-byte initialization vector
   64 | //     byte[] iv = {
   65 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 | //     };
   68 |      java.security.SecureRandom random = new java.security.SecureRandom();
   69 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |   try {
>  72 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   73 |
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   66 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   67 |
   68 | curity.SecureRandom random = new java.security.SecureRandom();
   69 | = random.generateSeed(8); // DES requires 8 byte keys
   70 |
   71 |
   72 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   73 |
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   59 |      // 8-byte initialization vector
   60 | //     byte[] iv = {
   61 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 | //     };
   64 |      java.security.SecureRandom random = new java.security.SecureRandom();
   65 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |   try {
>  68 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   69 |
   70 |             // Prepare the cipher to encrypt
   71 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   72 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   73 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,71,"
   61 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 |
   64 | curity.SecureRandom random = new java.security.SecureRandom();
   65 | = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |
   68 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   69 |
   70 | // Prepare the cipher to encrypt
>  71 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   72 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   73 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   74 |
   75 | t and store the results
   76 | put = { (byte)'?' };
   77 | putParam = bar;
   78 | Param instanceof String) input = ((String) inputParam).getBytes();
   79 | Param instanceof java.io.InputStream) {
   80 | trInput = new byte[1000];
   81 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,55,"
   45 |   if (param == null) param = """";
   46 |
   47 |
   48 |   String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
   49 |
   50 |
   51 |   try {
   52 |       java.util.Properties benchmarkprops = new java.util.Properties();
   53 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   54 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  55 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   56 |
   57 |             // Prepare the cipher to encrypt
   58 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   59 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   60 |
   61 |    // encrypt and store the results
   62 |    byte[] input = { (byte)'?' };
   63 |    Object inputParam = bar;
   64 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   65 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,58,"
   48 |  = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
   49 |
   50 |
   51 |
   52 | til.Properties benchmarkprops = new java.util.Properties();
   53 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   54 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   55 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   56 |
   57 | // Prepare the cipher to encrypt
>  58 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   59 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   60 |
   61 | t and store the results
   62 | put = { (byte)'?' };
   63 | putParam = bar;
   64 | Param instanceof String) input = ((String) inputParam).getBytes();
   65 | Param instanceof java.io.InputStream) {
   66 | trInput = new byte[1000];
   67 | ((java.io.InputStream) inputParam).read(strInput);
   68 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,56,"
   46 |
   47 |
   48 |   StringBuilder sbxyz57328 = new StringBuilder(param);
   49 |   String bar = sbxyz57328.append(""_SafeStuff"").toString();
   50 |
   51 |
   52 |   try {
   53 |       java.util.Properties benchmarkprops = new java.util.Properties();
   54 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   55 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  56 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   57 |
   58 |             // Prepare the cipher to encrypt
   59 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   60 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   61 |
   62 |    // encrypt and store the results
   63 |    byte[] input = { (byte)'?' };
   64 |    Object inputParam = bar;
   65 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   66 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |  = sbxyz57328.append(""_SafeStuff"").toString();
   50 |
   51 |
   52 |
   53 | til.Properties benchmarkprops = new java.util.Properties();
   54 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   55 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   56 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   57 |
   58 | // Prepare the cipher to encrypt
>  59 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   60 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   61 |
   62 | t and store the results
   63 | put = { (byte)'?' };
   64 | putParam = bar;
   65 | Param instanceof String) input = ((String) inputParam).getBytes();
   66 | Param instanceof java.io.InputStream) {
   67 | trInput = new byte[1000];
   68 | ((java.io.InputStream) inputParam).read(strInput);
   69 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00618.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,71,"
   61 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 | //     };
   64 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   65 | //  byte[] iv = random.generateSeed(16);
   66 |
   67 |   try {
   68 |    java.util.Properties benchmarkprops = new java.util.Properties();
   69 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   70 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  71 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   72 |
   73 |    // Prepare the cipher to encrypt
   74 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   75 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   76 |
   77 |    // encrypt and store the results
   78 |    byte[] input = { (byte)'?' };
   79 |    Object inputParam = bar;
   80 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   81 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00684.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |  8-byte initialization vector
   56 | byte[] iv = {
   57 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | };
   60 | va.security.SecureRandom random = new java.security.SecureRandom();
   61 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
>  64 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   65 |
   66 |      // Prepare the cipher to encrypt
   67 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | ncrypt and store the results
   72 | [] input = { (byte)'?' };
   73 | ct inputParam = bar;
   74 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00684.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00685.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   59 |  8-byte initialization vector
   60 | byte[] iv = {
   61 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 | };
   64 | va.security.SecureRandom random = new java.security.SecureRandom();
   65 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |
>  68 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   69 |
   70 |      // Prepare the cipher to encrypt
   71 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   72 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   73 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   74 |
   75 | ncrypt and store the results
   76 | [] input = { (byte)'?' };
   77 | ct inputParam = bar;
   78 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00685.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,71,"
   61 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 |
   64 | curity.SecureRandom random = new java.security.SecureRandom();
   65 | = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |
   68 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   69 |
   70 | // Prepare the cipher to encrypt
>  71 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   72 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   73 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   74 |
   75 | t and store the results
   76 | put = { (byte)'?' };
   77 | putParam = bar;
   78 | Param instanceof String) input = ((String) inputParam).getBytes();
   79 | Param instanceof java.io.InputStream) {
   80 | trInput = new byte[1000];
   81 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00688.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   59 |      // 8-byte initialization vector
   60 | //     byte[] iv = {
   61 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 | //     };
   64 |      java.security.SecureRandom random = new java.security.SecureRandom();
   65 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |   try {
>  68 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   69 |             // Prepare the cipher to encrypt
   70 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   72 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   73 |
   74 |    // encrypt and store the results
   75 |    byte[] input = { (byte)'?' };
   76 |    Object inputParam = bar;
   77 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   78 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00688.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,70,"
   60 | ] iv = {
   61 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   62 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   63 |
   64 | curity.SecureRandom random = new java.security.SecureRandom();
   65 | = random.generateSeed(8); // DES requires 8 byte keys
   66 |
   67 |
   68 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   69 | // Prepare the cipher to encrypt
>  70 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   72 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   73 |
   74 | t and store the results
   75 | put = { (byte)'?' };
   76 | putParam = bar;
   77 | Param instanceof String) input = ((String) inputParam).getBytes();
   78 | Param instanceof java.io.InputStream) {
   79 | trInput = new byte[1000];
   80 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,74,"
   64 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   65 |      // 8-byte initialization vector
   66 | //     byte[] iv = {
   67 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   68 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   69 | //     };
   70 |      java.security.SecureRandom random = new java.security.SecureRandom();
   71 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   72 |
   73 |   try {
>  74 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   75 |
   76 |             // Prepare the cipher to encrypt
   77 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   78 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   79 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   80 |
   81 |    // encrypt and store the results
   82 |    byte[] input = { (byte)'?' };
   83 |    Object inputParam = bar;
   84 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,77,"
   67 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   68 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   69 |
   70 | curity.SecureRandom random = new java.security.SecureRandom();
   71 | = random.generateSeed(8); // DES requires 8 byte keys
   72 |
   73 |
   74 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   75 |
   76 | // Prepare the cipher to encrypt
>  77 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   78 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   79 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   80 |
   81 | t and store the results
   82 | put = { (byte)'?' };
   83 | putParam = bar;
   84 | Param instanceof String) input = ((String) inputParam).getBytes();
   85 | Param instanceof java.io.InputStream) {
   86 | trInput = new byte[1000];
   87 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 |             // Prepare the cipher to encrypt
   67 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   58 |      // 8-byte initialization vector
   59 | //     byte[] iv = {
   60 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   61 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   62 | //     };
   63 |      java.security.SecureRandom random = new java.security.SecureRandom();
   64 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   65 |
   66 |   try {
>  67 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   68 |
   69 |             // Prepare the cipher to encrypt
   70 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   72 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   73 |
   74 |    // encrypt and store the results
   75 |    byte[] input = { (byte)'?' };
   76 |    Object inputParam = bar;
   77 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,70,"
   60 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   61 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   62 |
   63 | curity.SecureRandom random = new java.security.SecureRandom();
   64 | = random.generateSeed(8); // DES requires 8 byte keys
   65 |
   66 |
   67 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   68 |
   69 | // Prepare the cipher to encrypt
>  70 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   71 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   72 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   73 |
   74 | t and store the results
   75 | put = { (byte)'?' };
   76 | putParam = bar;
   77 | Param instanceof String) input = ((String) inputParam).getBytes();
   78 | Param instanceof java.io.InputStream) {
   79 | trInput = new byte[1000];
   80 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00779.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   66 |      // 8-byte initialization vector
   67 | //     byte[] iv = {
   68 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   69 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   70 | //     };
   71 |      java.security.SecureRandom random = new java.security.SecureRandom();
   72 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   73 |
   74 |   try {
>  75 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   76 |             // Prepare the cipher to encrypt
   77 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   78 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   79 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   80 |
   81 |    // encrypt and store the results
   82 |    byte[] input = { (byte)'?' };
   83 |    Object inputParam = bar;
   84 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   85 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00779.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,77,"
   67 | ] iv = {
   68 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   69 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   70 |
   71 | curity.SecureRandom random = new java.security.SecureRandom();
   72 | = random.generateSeed(8); // DES requires 8 byte keys
   73 |
   74 |
   75 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   76 | // Prepare the cipher to encrypt
>  77 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   78 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   79 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   80 |
   81 | t and store the results
   82 | put = { (byte)'?' };
   83 | putParam = bar;
   84 | Param instanceof String) input = ((String) inputParam).getBytes();
   85 | Param instanceof java.io.InputStream) {
   86 | trInput = new byte[1000];
   87 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   66 |      // 8-byte initialization vector
   67 | //     byte[] iv = {
   68 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   69 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   70 | //     };
   71 |      java.security.SecureRandom random = new java.security.SecureRandom();
   72 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   73 |
   74 |   try {
>  75 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   76 |
   77 |             // Prepare the cipher to encrypt
   78 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   79 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   80 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   81 |
   82 |    // encrypt and store the results
   83 |    byte[] input = { (byte)'?' };
   84 |    Object inputParam = bar;
   85 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,78,"
   68 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   69 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   70 |
   71 | curity.SecureRandom random = new java.security.SecureRandom();
   72 | = random.generateSeed(8); // DES requires 8 byte keys
   73 |
   74 |
   75 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   76 |
   77 | // Prepare the cipher to encrypt
>  78 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   79 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   80 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   81 |
   82 | t and store the results
   83 | put = { (byte)'?' };
   84 | putParam = bar;
   85 | Param instanceof String) input = ((String) inputParam).getBytes();
   86 | Param instanceof java.io.InputStream) {
   87 | trInput = new byte[1000];
   88 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   53 |  8-byte initialization vector
   54 | byte[] iv = {
   55 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   56 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   57 | };
   58 | va.security.SecureRandom random = new java.security.SecureRandom();
   59 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   60 |
   61 |
>  62 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   63 |
   64 |      // Prepare the cipher to encrypt
   65 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   66 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   67 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   68 |
   69 | ncrypt and store the results
   70 | [] input = { (byte)'?' };
   71 | ct inputParam = bar;
   72 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,65,"
   55 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   56 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   57 |
   58 | curity.SecureRandom random = new java.security.SecureRandom();
   59 | = random.generateSeed(8); // DES requires 8 byte keys
   60 |
   61 |
   62 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   63 |
   64 | // Prepare the cipher to encrypt
>  65 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   66 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   67 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   68 |
   69 | t and store the results
   70 | put = { (byte)'?' };
   71 | putParam = bar;
   72 | Param instanceof String) input = ((String) inputParam).getBytes();
   73 | Param instanceof java.io.InputStream) {
   74 | trInput = new byte[1000];
   75 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00855.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,71,"
   61 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   62 |      // 8-byte initialization vector
   63 | //     byte[] iv = {
   64 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   65 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   66 | //     };
   67 |      java.security.SecureRandom random = new java.security.SecureRandom();
   68 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   69 |
   70 |   try {
>  71 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   72 |             // Prepare the cipher to encrypt
   73 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   74 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   75 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   76 |
   77 |    // encrypt and store the results
   78 |    byte[] input = { (byte)'?' };
   79 |    Object inputParam = bar;
   80 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   81 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00855.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 | ] iv = {
   64 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   65 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   66 |
   67 | curity.SecureRandom random = new java.security.SecureRandom();
   68 | = random.generateSeed(8); // DES requires 8 byte keys
   69 |
   70 |
   71 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   72 | // Prepare the cipher to encrypt
>  73 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   74 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   75 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   76 |
   77 | t and store the results
   78 | put = { (byte)'?' };
   79 | putParam = bar;
   80 | Param instanceof String) input = ((String) inputParam).getBytes();
   81 | Param instanceof java.io.InputStream) {
   82 | trInput = new byte[1000];
   83 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,74,"
   64 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   65 |      // 8-byte initialization vector
   66 | //     byte[] iv = {
   67 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   68 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   69 | //     };
   70 |      java.security.SecureRandom random = new java.security.SecureRandom();
   71 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   72 |
   73 |   try {
>  74 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   75 |
   76 |             // Prepare the cipher to encrypt
   77 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   78 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   79 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   80 |
   81 |    // encrypt and store the results
   82 |    byte[] input = { (byte)'?' };
   83 |    Object inputParam = bar;
   84 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,77,"
   67 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   68 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   69 |
   70 | curity.SecureRandom random = new java.security.SecureRandom();
   71 | = random.generateSeed(8); // DES requires 8 byte keys
   72 |
   73 |
   74 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   75 |
   76 | // Prepare the cipher to encrypt
>  77 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   78 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   79 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   80 |
   81 | t and store the results
   82 | put = { (byte)'?' };
   83 | putParam = bar;
   84 | Param instanceof String) input = ((String) inputParam).getBytes();
   85 | Param instanceof java.io.InputStream) {
   86 | trInput = new byte[1000];
   87 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,80,"
   70 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   71 |      // 8-byte initialization vector
   72 | //     byte[] iv = {
   73 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   74 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   75 | //     };
   76 |      java.security.SecureRandom random = new java.security.SecureRandom();
   77 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   78 |
   79 |   try {
>  80 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   81 |
   82 |             // Prepare the cipher to encrypt
   83 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   84 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   85 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   86 |
   87 |    // encrypt and store the results
   88 |    byte[] input = { (byte)'?' };
   89 |    Object inputParam = bar;
   90 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,83,"
   73 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   74 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   75 |
   76 | curity.SecureRandom random = new java.security.SecureRandom();
   77 | = random.generateSeed(8); // DES requires 8 byte keys
   78 |
   79 |
   80 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   81 |
   82 | // Prepare the cipher to encrypt
>  83 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   84 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   85 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   86 |
   87 | t and store the results
   88 | put = { (byte)'?' };
   89 | putParam = bar;
   90 | Param instanceof String) input = ((String) inputParam).getBytes();
   91 | Param instanceof java.io.InputStream) {
   92 | trInput = new byte[1000];
   93 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |   map87594.put(""keyA-87594"", ""a-Value""); // put some stuff in the collection
   50 |   map87594.put(""keyB-87594"", param); // put it in a collection
   51 |   map87594.put(""keyC"", ""another-Value""); // put some stuff in the collection
   52 |   bar = (String)map87594.get(""keyB-87594""); // get it back out
   53 |
   54 |
   55 |   try {
   56 |       java.util.Properties benchmarkprops = new java.util.Properties();
   57 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   58 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  59 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   60 |
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   64 |
   65 |    // encrypt and store the results
   66 |    byte[] input = { (byte)'?' };
   67 |    Object inputParam = bar;
   68 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   69 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | ing)map87594.get(""keyB-87594""); // get it back out
   53 |
   54 |
   55 |
   56 | til.Properties benchmarkprops = new java.util.Properties();
   57 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   58 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   59 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   60 |
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   64 |
   65 | t and store the results
   66 | put = { (byte)'?' };
   67 | putParam = bar;
   68 | Param instanceof String) input = ((String) inputParam).getBytes();
   69 | Param instanceof java.io.InputStream) {
   70 | trInput = new byte[1000];
   71 | ((java.io.InputStream) inputParam).read(strInput);
   72 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |     }
   60 |    }
   61 |   }
   62 |
   63 |   String bar = new Test().doSomething(request, param);
   64 |
   65 |   try {
   66 |       java.util.Properties benchmarkprops = new java.util.Properties();
   67 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  69 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 |             // Prepare the cipher to encrypt
   72 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   73 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   79 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 |
   63 |  = new Test().doSomething(request, param);
   64 |
   65 |
   66 | til.Properties benchmarkprops = new java.util.Properties();
   67 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   69 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 | // Prepare the cipher to encrypt
>  72 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   73 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 | t and store the results
   76 | put = { (byte)'?' };
   77 | putParam = bar;
   78 | Param instanceof String) input = ((String) inputParam).getBytes();
   79 | Param instanceof java.io.InputStream) {
   80 | trInput = new byte[1000];
   81 | ((java.io.InputStream) inputParam).read(strInput);
   82 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |     }
   60 |    }
   61 |   }
   62 |
   63 |   String bar = new Test().doSomething(request, param);
   64 |
   65 |   try {
   66 |       java.util.Properties benchmarkprops = new java.util.Properties();
   67 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  69 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 |             // Prepare the cipher to encrypt
   72 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   73 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   79 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 |
   63 |  = new Test().doSomething(request, param);
   64 |
   65 |
   66 | til.Properties benchmarkprops = new java.util.Properties();
   67 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   69 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 | // Prepare the cipher to encrypt
>  72 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   73 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 | t and store the results
   76 | put = { (byte)'?' };
   77 | putParam = bar;
   78 | Param instanceof String) input = ((String) inputParam).getBytes();
   79 | Param instanceof java.io.InputStream) {
   80 | trInput = new byte[1000];
   81 | ((java.io.InputStream) inputParam).read(strInput);
   82 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01015.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |  8-byte initialization vector
   56 | byte[] iv = {
   57 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | };
   60 | va.security.SecureRandom random = new java.security.SecureRandom();
   61 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
>  64 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   65 |
   66 |      // Prepare the cipher to encrypt
   67 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | ncrypt and store the results
   72 | [] input = { (byte)'?' };
   73 | ct inputParam = bar;
   74 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01015.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01016.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 |             // Prepare the cipher to encrypt
   66 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 |    // encrypt and store the results
   71 |    byte[] input = { (byte)'?' };
   72 |    Object inputParam = bar;
   73 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   74 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01016.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | ] iv = {
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 | // Prepare the cipher to encrypt
>  66 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 | t and store the results
   71 | put = { (byte)'?' };
   72 | putParam = bar;
   73 | Param instanceof String) input = ((String) inputParam).getBytes();
   74 | Param instanceof java.io.InputStream) {
   75 | trInput = new byte[1000];
   76 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01017.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 |             // Prepare the cipher to encrypt
   66 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 |    // encrypt and store the results
   71 |    byte[] input = { (byte)'?' };
   72 |    Object inputParam = bar;
   73 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   74 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01017.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | ] iv = {
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 | // Prepare the cipher to encrypt
>  66 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 | t and store the results
   71 | put = { (byte)'?' };
   72 | putParam = bar;
   73 | Param instanceof String) input = ((String) inputParam).getBytes();
   74 | Param instanceof java.io.InputStream) {
   75 | trInput = new byte[1000];
   76 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 |             // Prepare the cipher to encrypt
   67 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,57,"
   47 |
   48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
   49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   50 |
   51 |   String bar = new Test().doSomething(request, param);
   52 |
   53 |   try {
   54 |       java.util.Properties benchmarkprops = new java.util.Properties();
   55 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   56 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  57 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   58 |
   59 |             // Prepare the cipher to encrypt
   60 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   61 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   62 |
   63 |    // encrypt and store the results
   64 |    byte[] input = { (byte)'?' };
   65 |    Object inputParam = bar;
   66 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   67 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |
   51 |  = new Test().doSomething(request, param);
   52 |
   53 |
   54 | til.Properties benchmarkprops = new java.util.Properties();
   55 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   56 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   57 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   58 |
   59 | // Prepare the cipher to encrypt
>  60 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   61 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   62 |
   63 | t and store the results
   64 | put = { (byte)'?' };
   65 | putParam = bar;
   66 | Param instanceof String) input = ((String) inputParam).getBytes();
   67 | Param instanceof java.io.InputStream) {
   68 | trInput = new byte[1000];
   69 | ((java.io.InputStream) inputParam).read(strInput);
   70 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01021.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   61 | //  byte[] iv = random.generateSeed(16);
   62 |
   63 |   try {
   64 |    java.util.Properties benchmarkprops = new java.util.Properties();
   65 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   66 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  67 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   68 |
   69 |    // Prepare the cipher to encrypt
   70 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   71 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   72 |
   73 |    // encrypt and store the results
   74 |    byte[] input = { (byte)'?' };
   75 |    Object inputParam = bar;
   76 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   77 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01022.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   61 | //  byte[] iv = random.generateSeed(16);
   62 |
   63 |   try {
   64 |    java.util.Properties benchmarkprops = new java.util.Properties();
   65 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   66 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  67 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   68 |
   69 |    // Prepare the cipher to encrypt
   70 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   71 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   72 |
   73 |    // encrypt and store the results
   74 |    byte[] input = { (byte)'?' };
   75 |    Object inputParam = bar;
   76 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   77 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01099.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |  8-byte initialization vector
   65 | byte[] iv = {
   66 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | };
   69 | va.security.SecureRandom random = new java.security.SecureRandom();
   70 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
>  73 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   74 |
   75 |      // Prepare the cipher to encrypt
   76 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | ncrypt and store the results
   81 | [] input = { (byte)'?' };
   82 | ct inputParam = bar;
   83 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01099.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |    }
   57 |   }
   58 |   // Note: We don't URL decode header names because people don't normally do that
   59 |
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   try {
   63 |       java.util.Properties benchmarkprops = new java.util.Properties();
   64 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |
   60 |  = new Test().doSomething(request, param);
   61 |
   62 |
   63 | til.Properties benchmarkprops = new java.util.Properties();
   64 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
   79 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |    }
   57 |   }
   58 |   // Note: We don't URL decode header names because people don't normally do that
   59 |
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   try {
   63 |       java.util.Properties benchmarkprops = new java.util.Properties();
   64 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |
   60 |  = new Test().doSomething(request, param);
   61 |
   62 |
   63 | til.Properties benchmarkprops = new java.util.Properties();
   64 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
   79 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |    }
   57 |   }
   58 |   // Note: We don't URL decode header names because people don't normally do that
   59 |
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   try {
   63 |       java.util.Properties benchmarkprops = new java.util.Properties();
   64 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |
   60 |  = new Test().doSomething(request, param);
   61 |
   62 |
   63 | til.Properties benchmarkprops = new java.util.Properties();
   64 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
   79 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01108.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   70 | //  byte[] iv = random.generateSeed(16);
   71 |
   72 |   try {
   73 |    java.util.Properties benchmarkprops = new java.util.Properties();
   74 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   75 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  76 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   77 |
   78 |    // Prepare the cipher to encrypt
   79 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   80 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   81 |
   82 |    // encrypt and store the results
   83 |    byte[] input = { (byte)'?' };
   84 |    Object inputParam = bar;
   85 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   86 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01148.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |      // 8-byte initialization vector
   58 | //     byte[] iv = {
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 |      java.security.SecureRandom random = new java.security.SecureRandom();
   63 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |   try {
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   67 |             // Prepare the cipher to encrypt
   68 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01148.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 | ] iv = {
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   67 | // Prepare the cipher to encrypt
>  68 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01149.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |      // 8-byte initialization vector
   58 | //     byte[] iv = {
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 |      java.security.SecureRandom random = new java.security.SecureRandom();
   63 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |   try {
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   67 |             // Prepare the cipher to encrypt
   68 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01149.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 | ] iv = {
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   67 | // Prepare the cipher to encrypt
>  68 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |      // 8-byte initialization vector
   58 | //     byte[] iv = {
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 |      java.security.SecureRandom random = new java.security.SecureRandom();
   63 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |   try {
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 |    // encrypt and store the results
   74 |    byte[] input = { (byte)'?' };
   75 |    Object inputParam = bar;
   76 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | t and store the results
   74 | put = { (byte)'?' };
   75 | putParam = bar;
   76 | Param instanceof String) input = ((String) inputParam).getBytes();
   77 | Param instanceof java.io.InputStream) {
   78 | trInput = new byte[1000];
   79 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01153.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   63 | //  byte[] iv = random.generateSeed(16);
   64 |
   65 |   try {
   66 |    java.util.Properties benchmarkprops = new java.util.Properties();
   67 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  69 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 |    // Prepare the cipher to encrypt
   72 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   73 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   79 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   50 |      // 8-byte initialization vector
   51 | //     byte[] iv = {
   52 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 | //     };
   55 |      java.security.SecureRandom random = new java.security.SecureRandom();
   56 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |   try {
>  59 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   60 |
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = bar;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 |
   55 | curity.SecureRandom random = new java.security.SecureRandom();
   56 | = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |
   59 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   60 |
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = bar;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   50 |      // 8-byte initialization vector
   51 | //     byte[] iv = {
   52 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 | //     };
   55 |      java.security.SecureRandom random = new java.security.SecureRandom();
   56 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |   try {
>  59 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   60 |
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = bar;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 |
   55 | curity.SecureRandom random = new java.security.SecureRandom();
   56 | = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |
   59 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   60 |
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = bar;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,52,"
   42 |
   43 |   String param = request.getParameter(""BenchmarkTest01230"");
   44 |   if (param == null) param = """";
   45 |
   46 |   String bar = new Test().doSomething(request, param);
   47 |
   48 |   try {
   49 |       java.util.Properties benchmarkprops = new java.util.Properties();
   50 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  52 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 |             // Prepare the cipher to encrypt
   55 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 |    // encrypt and store the results
   59 |    byte[] input = { (byte)'?' };
   60 |    Object inputParam = bar;
   61 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   62 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,55,"
   45 |
   46 |  = new Test().doSomething(request, param);
   47 |
   48 |
   49 | til.Properties benchmarkprops = new java.util.Properties();
   50 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   52 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 | // Prepare the cipher to encrypt
>  55 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 | t and store the results
   59 | put = { (byte)'?' };
   60 | putParam = bar;
   61 | Param instanceof String) input = ((String) inputParam).getBytes();
   62 | Param instanceof java.io.InputStream) {
   63 | trInput = new byte[1000];
   64 | ((java.io.InputStream) inputParam).read(strInput);
   65 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01317.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |  8-byte initialization vector
   56 | byte[] iv = {
   57 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | };
   60 | va.security.SecureRandom random = new java.security.SecureRandom();
   61 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
>  64 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   65 |
   66 |      // Prepare the cipher to encrypt
   67 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | ncrypt and store the results
   72 | [] input = { (byte)'?' };
   73 | ct inputParam = bar;
   74 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01317.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01318.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |  8-byte initialization vector
   56 | byte[] iv = {
   57 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | };
   60 | va.security.SecureRandom random = new java.security.SecureRandom();
   61 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
>  64 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   65 |
   66 |      // Prepare the cipher to encrypt
   67 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | ncrypt and store the results
   72 | [] input = { (byte)'?' };
   73 | ct inputParam = bar;
   74 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01318.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01320.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 |             // Prepare the cipher to encrypt
   66 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 |    // encrypt and store the results
   71 |    byte[] input = { (byte)'?' };
   72 |    Object inputParam = bar;
   73 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   74 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01320.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | ] iv = {
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 | // Prepare the cipher to encrypt
>  66 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 | t and store the results
   71 | put = { (byte)'?' };
   72 | putParam = bar;
   73 | Param instanceof String) input = ((String) inputParam).getBytes();
   74 | Param instanceof java.io.InputStream) {
   75 | trInput = new byte[1000];
   76 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 |             // Prepare the cipher to encrypt
   67 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 |             // Prepare the cipher to encrypt
   67 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,57,"
   47 |    if (values != null) param = values[0];
   48 |   }
   49 |
   50 |
   51 |   String bar = new Test().doSomething(request, param);
   52 |
   53 |   try {
   54 |       java.util.Properties benchmarkprops = new java.util.Properties();
   55 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   56 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  57 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   58 |
   59 |             // Prepare the cipher to encrypt
   60 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   61 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   62 |
   63 |    // encrypt and store the results
   64 |    byte[] input = { (byte)'?' };
   65 |    Object inputParam = bar;
   66 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   67 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |
   51 |  = new Test().doSomething(request, param);
   52 |
   53 |
   54 | til.Properties benchmarkprops = new java.util.Properties();
   55 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   56 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   57 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   58 |
   59 | // Prepare the cipher to encrypt
>  60 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   61 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   62 |
   63 | t and store the results
   64 | put = { (byte)'?' };
   65 | putParam = bar;
   66 | Param instanceof String) input = ((String) inputParam).getBytes();
   67 | Param instanceof java.io.InputStream) {
   68 | trInput = new byte[1000];
   69 | ((java.io.InputStream) inputParam).read(strInput);
   70 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01398.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   83 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01398.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | ] iv = {
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01401.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   70 | //  byte[] iv = random.generateSeed(16);
   71 |
   72 |   try {
   73 |    java.util.Properties benchmarkprops = new java.util.Properties();
   74 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   75 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  76 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   77 |
   78 |    // Prepare the cipher to encrypt
   79 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   80 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   81 |
   82 |    // encrypt and store the results
   83 |    byte[] input = { (byte)'?' };
   84 |    Object inputParam = bar;
   85 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   86 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01480.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   51 |  8-byte initialization vector
   52 | byte[] iv = {
   53 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 | };
   56 | va.security.SecureRandom random = new java.security.SecureRandom();
   57 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
>  60 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   61 |
   62 |      // Prepare the cipher to encrypt
   63 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   65 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   66 |
   67 | ncrypt and store the results
   68 | [] input = { (byte)'?' };
   69 | ct inputParam = bar;
   70 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01480.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,63,"
   53 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 |
   56 | curity.SecureRandom random = new java.security.SecureRandom();
   57 | = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
   60 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   61 |
   62 | // Prepare the cipher to encrypt
>  63 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   65 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   66 |
   67 | t and store the results
   68 | put = { (byte)'?' };
   69 | putParam = bar;
   70 | Param instanceof String) input = ((String) inputParam).getBytes();
   71 | Param instanceof java.io.InputStream) {
   72 | trInput = new byte[1000];
   73 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01483.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   51 |      // 8-byte initialization vector
   52 | //     byte[] iv = {
   53 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 | //     };
   56 |      java.security.SecureRandom random = new java.security.SecureRandom();
   57 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |   try {
>  60 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = bar;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   70 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01483.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | ] iv = {
   53 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 |
   56 | curity.SecureRandom random = new java.security.SecureRandom();
   57 | = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
   60 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = bar;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01484.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   51 |      // 8-byte initialization vector
   52 | //     byte[] iv = {
   53 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 | //     };
   56 |      java.security.SecureRandom random = new java.security.SecureRandom();
   57 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |   try {
>  60 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = bar;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   70 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01484.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | ] iv = {
   53 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 |
   56 | curity.SecureRandom random = new java.security.SecureRandom();
   57 | = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
   60 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = bar;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   51 |      // 8-byte initialization vector
   52 | //     byte[] iv = {
   53 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 | //     };
   56 |      java.security.SecureRandom random = new java.security.SecureRandom();
   57 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |   try {
>  60 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   61 |
   62 |             // Prepare the cipher to encrypt
   63 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   65 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   66 |
   67 |    // encrypt and store the results
   68 |    byte[] input = { (byte)'?' };
   69 |    Object inputParam = bar;
   70 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,63,"
   53 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 |
   56 | curity.SecureRandom random = new java.security.SecureRandom();
   57 | = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
   60 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   61 |
   62 | // Prepare the cipher to encrypt
>  63 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   65 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   66 |
   67 | t and store the results
   68 | put = { (byte)'?' };
   69 | putParam = bar;
   70 | Param instanceof String) input = ((String) inputParam).getBytes();
   71 | Param instanceof java.io.InputStream) {
   72 | trInput = new byte[1000];
   73 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,53,"
   43 |   org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request );
   44 |   String param = scr.getTheParameter(""BenchmarkTest01489"");
   45 |   if (param == null) param = """";
   46 |
   47 |   String bar = new Test().doSomething(request, param);
   48 |
   49 |   try {
   50 |       java.util.Properties benchmarkprops = new java.util.Properties();
   51 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   52 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  53 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   54 |
   55 |             // Prepare the cipher to encrypt
   56 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   57 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   58 |
   59 |    // encrypt and store the results
   60 |    byte[] input = { (byte)'?' };
   61 |    Object inputParam = bar;
   62 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   63 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,56,"
   46 |
   47 |  = new Test().doSomething(request, param);
   48 |
   49 |
   50 | til.Properties benchmarkprops = new java.util.Properties();
   51 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   52 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   53 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   54 |
   55 | // Prepare the cipher to encrypt
>  56 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   57 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   58 |
   59 | t and store the results
   60 | put = { (byte)'?' };
   61 | putParam = bar;
   62 | Param instanceof String) input = ((String) inputParam).getBytes();
   63 | Param instanceof java.io.InputStream) {
   64 | trInput = new byte[1000];
   65 | ((java.io.InputStream) inputParam).read(strInput);
   66 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   53 |      // 8-byte initialization vector
   54 | //     byte[] iv = {
   55 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   56 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   57 | //     };
   58 |      java.security.SecureRandom random = new java.security.SecureRandom();
   59 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   60 |
   61 |   try {
>  62 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   63 |
   64 |             // Prepare the cipher to encrypt
   65 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   66 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   67 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   68 |
   69 |    // encrypt and store the results
   70 |    byte[] input = { (byte)'?' };
   71 |    Object inputParam = bar;
   72 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,65,"
   55 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   56 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   57 |
   58 | curity.SecureRandom random = new java.security.SecureRandom();
   59 | = random.generateSeed(8); // DES requires 8 byte keys
   60 |
   61 |
   62 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   63 |
   64 | // Prepare the cipher to encrypt
>  65 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   66 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   67 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   68 |
   69 | t and store the results
   70 | put = { (byte)'?' };
   71 | putParam = bar;
   72 | Param instanceof String) input = ((String) inputParam).getBytes();
   73 | Param instanceof java.io.InputStream) {
   74 | trInput = new byte[1000];
   75 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,55,"
   45 |   if (values != null && values.length > 0)
   46 |     param = values[0];
   47 |   else param = """";
   48 |
   49 |   String bar = new Test().doSomething(request, param);
   50 |
   51 |   try {
   52 |       java.util.Properties benchmarkprops = new java.util.Properties();
   53 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   54 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  55 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   56 |
   57 |             // Prepare the cipher to encrypt
   58 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   59 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   60 |
   61 |    // encrypt and store the results
   62 |    byte[] input = { (byte)'?' };
   63 |    Object inputParam = bar;
   64 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   65 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,58,"
   48 |
   49 |  = new Test().doSomething(request, param);
   50 |
   51 |
   52 | til.Properties benchmarkprops = new java.util.Properties();
   53 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   54 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   55 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   56 |
   57 | // Prepare the cipher to encrypt
>  58 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   59 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   60 |
   61 | t and store the results
   62 | put = { (byte)'?' };
   63 | putParam = bar;
   64 | Param instanceof String) input = ((String) inputParam).getBytes();
   65 | Param instanceof java.io.InputStream) {
   66 | trInput = new byte[1000];
   67 | ((java.io.InputStream) inputParam).read(strInput);
   68 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01567.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,65,"
   55 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   56 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   57 | //     };
   58 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   59 | //  byte[] iv = random.generateSeed(16);
   60 |
   61 |   try {
   62 |    java.util.Properties benchmarkprops = new java.util.Properties();
   63 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   64 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  65 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   66 |
   67 |    // Prepare the cipher to encrypt
   68 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   69 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   75 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01634.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |  8-byte initialization vector
   65 | byte[] iv = {
   66 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | };
   69 | va.security.SecureRandom random = new java.security.SecureRandom();
   70 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
>  73 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   74 |
   75 |      // Prepare the cipher to encrypt
   76 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | ncrypt and store the results
   81 | [] input = { (byte)'?' };
   82 | ct inputParam = bar;
   83 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01634.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01637.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   83 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01637.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | ] iv = {
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   57 |   }
   58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   59 |
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   try {
   63 |       java.util.Properties benchmarkprops = new java.util.Properties();
   64 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |
   60 |  = new Test().doSomething(request, param);
   61 |
   62 |
   63 | til.Properties benchmarkprops = new java.util.Properties();
   64 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
   79 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,52,"
   42 |
   43 |   org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request );
   44 |   String param = scr.getTheValue(""BenchmarkTest01740"");
   45 |
   46 |   String bar = new Test().doSomething(request, param);
   47 |
   48 |   try {
   49 |       java.util.Properties benchmarkprops = new java.util.Properties();
   50 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  52 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 |             // Prepare the cipher to encrypt
   55 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 |    // encrypt and store the results
   59 |    byte[] input = { (byte)'?' };
   60 |    Object inputParam = bar;
   61 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   62 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,55,"
   45 |
   46 |  = new Test().doSomething(request, param);
   47 |
   48 |
   49 | til.Properties benchmarkprops = new java.util.Properties();
   50 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   52 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 | // Prepare the cipher to encrypt
>  55 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 | t and store the results
   59 | put = { (byte)'?' };
   60 | putParam = bar;
   61 | Param instanceof String) input = ((String) inputParam).getBytes();
   62 | Param instanceof java.io.InputStream) {
   63 | trInput = new byte[1000];
   64 | ((java.io.InputStream) inputParam).read(strInput);
   65 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,52,"
   42 |
   43 |   org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request );
   44 |   String param = scr.getTheValue(""BenchmarkTest01741"");
   45 |
   46 |   String bar = new Test().doSomething(request, param);
   47 |
   48 |   try {
   49 |       java.util.Properties benchmarkprops = new java.util.Properties();
   50 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  52 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 |             // Prepare the cipher to encrypt
   55 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 |    // encrypt and store the results
   59 |    byte[] input = { (byte)'?' };
   60 |    Object inputParam = bar;
   61 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   62 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,55,"
   45 |
   46 |  = new Test().doSomething(request, param);
   47 |
   48 |
   49 | til.Properties benchmarkprops = new java.util.Properties();
   50 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   52 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 | // Prepare the cipher to encrypt
>  55 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 | t and store the results
   59 | put = { (byte)'?' };
   60 | putParam = bar;
   61 | Param instanceof String) input = ((String) inputParam).getBytes();
   62 | Param instanceof java.io.InputStream) {
   63 | trInput = new byte[1000];
   64 | ((java.io.InputStream) inputParam).read(strInput);
   65 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,52,"
   42 |
   43 |   org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request );
   44 |   String param = scr.getTheValue(""BenchmarkTest01742"");
   45 |
   46 |   String bar = new Test().doSomething(request, param);
   47 |
   48 |   try {
   49 |       java.util.Properties benchmarkprops = new java.util.Properties();
   50 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  52 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 |             // Prepare the cipher to encrypt
   55 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 |    // encrypt and store the results
   59 |    byte[] input = { (byte)'?' };
   60 |    Object inputParam = bar;
   61 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   62 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,55,"
   45 |
   46 |  = new Test().doSomething(request, param);
   47 |
   48 |
   49 | til.Properties benchmarkprops = new java.util.Properties();
   50 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   52 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 | // Prepare the cipher to encrypt
>  55 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 | t and store the results
   59 | put = { (byte)'?' };
   60 | putParam = bar;
   61 | Param instanceof String) input = ((String) inputParam).getBytes();
   62 | Param instanceof java.io.InputStream) {
   63 | trInput = new byte[1000];
   64 | ((java.io.InputStream) inputParam).read(strInput);
   65 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   67 |  8-byte initialization vector
   68 | byte[] iv = {
   69 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   70 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   71 | };
   72 | va.security.SecureRandom random = new java.security.SecureRandom();
   73 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   74 |
   75 |
>  76 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   77 |
   78 |      // Prepare the cipher to encrypt
   79 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   80 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   81 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   82 |
   83 | ncrypt and store the results
   84 | [] input = { (byte)'?' };
   85 | ct inputParam = bar;
   86 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,79,"
   69 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   70 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   71 |
   72 | curity.SecureRandom random = new java.security.SecureRandom();
   73 | = random.generateSeed(8); // DES requires 8 byte keys
   74 |
   75 |
   76 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   77 |
   78 | // Prepare the cipher to encrypt
>  79 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   80 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   81 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   82 |
   83 | t and store the results
   84 | put = { (byte)'?' };
   85 | putParam = bar;
   86 | Param instanceof String) input = ((String) inputParam).getBytes();
   87 | Param instanceof java.io.InputStream) {
   88 | trInput = new byte[1000];
   89 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   67 |  8-byte initialization vector
   68 | byte[] iv = {
   69 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   70 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   71 | };
   72 | va.security.SecureRandom random = new java.security.SecureRandom();
   73 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   74 |
   75 |
>  76 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   77 |
   78 |      // Prepare the cipher to encrypt
   79 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   80 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   81 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   82 |
   83 | ncrypt and store the results
   84 | [] input = { (byte)'?' };
   85 | ct inputParam = bar;
   86 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,79,"
   69 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   70 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   71 |
   72 | curity.SecureRandom random = new java.security.SecureRandom();
   73 | = random.generateSeed(8); // DES requires 8 byte keys
   74 |
   75 |
   76 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   77 |
   78 | // Prepare the cipher to encrypt
>  79 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   80 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   81 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   82 |
   83 | t and store the results
   84 | put = { (byte)'?' };
   85 | putParam = bar;
   86 | Param instanceof String) input = ((String) inputParam).getBytes();
   87 | Param instanceof java.io.InputStream) {
   88 | trInput = new byte[1000];
   89 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |     }
   60 |    }
   61 |   }
   62 |
   63 |   String bar = doSomething(request, param);
   64 |
   65 |   try {
   66 |       java.util.Properties benchmarkprops = new java.util.Properties();
   67 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  69 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 |             // Prepare the cipher to encrypt
   72 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   73 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   79 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 |
   63 |  = doSomething(request, param);
   64 |
   65 |
   66 | til.Properties benchmarkprops = new java.util.Properties();
   67 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   69 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 | // Prepare the cipher to encrypt
>  72 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   73 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 | t and store the results
   76 | put = { (byte)'?' };
   77 | putParam = bar;
   78 | Param instanceof String) input = ((String) inputParam).getBytes();
   79 | Param instanceof java.io.InputStream) {
   80 | trInput = new byte[1000];
   81 | ((java.io.InputStream) inputParam).read(strInput);
   82 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |     }
   60 |    }
   61 |   }
   62 |
   63 |   String bar = doSomething(request, param);
   64 |
   65 |   try {
   66 |       java.util.Properties benchmarkprops = new java.util.Properties();
   67 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  69 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 |             // Prepare the cipher to encrypt
   72 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   73 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   79 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,72,"
   62 |
   63 |  = doSomething(request, param);
   64 |
   65 |
   66 | til.Properties benchmarkprops = new java.util.Properties();
   67 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   69 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 | // Prepare the cipher to encrypt
>  72 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   73 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 | t and store the results
   76 | put = { (byte)'?' };
   77 | putParam = bar;
   78 | Param instanceof String) input = ((String) inputParam).getBytes();
   79 | Param instanceof java.io.InputStream) {
   80 | trInput = new byte[1000];
   81 | ((java.io.InputStream) inputParam).read(strInput);
   82 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01895.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 |             // Prepare the cipher to encrypt
   66 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 |    // encrypt and store the results
   71 |    byte[] input = { (byte)'?' };
   72 |    Object inputParam = bar;
   73 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   74 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01895.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | ] iv = {
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 | // Prepare the cipher to encrypt
>  66 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 | t and store the results
   71 | put = { (byte)'?' };
   72 | putParam = bar;
   73 | Param instanceof String) input = ((String) inputParam).getBytes();
   74 | Param instanceof java.io.InputStream) {
   75 | trInput = new byte[1000];
   76 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 |             // Prepare the cipher to encrypt
   67 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 |             // Prepare the cipher to encrypt
   67 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,57,"
   47 |
   48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
   49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   50 |
   51 |   String bar = doSomething(request, param);
   52 |
   53 |   try {
   54 |       java.util.Properties benchmarkprops = new java.util.Properties();
   55 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   56 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  57 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   58 |
   59 |             // Prepare the cipher to encrypt
   60 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   61 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   62 |
   63 |    // encrypt and store the results
   64 |    byte[] input = { (byte)'?' };
   65 |    Object inputParam = bar;
   66 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   67 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |
   51 |  = doSomething(request, param);
   52 |
   53 |
   54 | til.Properties benchmarkprops = new java.util.Properties();
   55 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   56 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   57 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   58 |
   59 | // Prepare the cipher to encrypt
>  60 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   61 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   62 |
   63 | t and store the results
   64 | put = { (byte)'?' };
   65 | putParam = bar;
   66 | Param instanceof String) input = ((String) inputParam).getBytes();
   67 | Param instanceof java.io.InputStream) {
   68 | trInput = new byte[1000];
   69 | ((java.io.InputStream) inputParam).read(strInput);
   70 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01901.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   61 | //  byte[] iv = random.generateSeed(16);
   62 |
   63 |   try {
   64 |    java.util.Properties benchmarkprops = new java.util.Properties();
   65 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   66 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  67 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   68 |
   69 |    // Prepare the cipher to encrypt
   70 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   71 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   72 |
   73 |    // encrypt and store the results
   74 |    byte[] input = { (byte)'?' };
   75 |    Object inputParam = bar;
   76 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   77 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |    }
   57 |   }
   58 |   // Note: We don't URL decode header names because people don't normally do that
   59 |
   60 |   String bar = doSomething(request, param);
   61 |
   62 |   try {
   63 |       java.util.Properties benchmarkprops = new java.util.Properties();
   64 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |
   60 |  = doSomething(request, param);
   61 |
   62 |
   63 | til.Properties benchmarkprops = new java.util.Properties();
   64 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
   79 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |    }
   57 |   }
   58 |   // Note: We don't URL decode header names because people don't normally do that
   59 |
   60 |   String bar = doSomething(request, param);
   61 |
   62 |   try {
   63 |       java.util.Properties benchmarkprops = new java.util.Properties();
   64 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 |             // Prepare the cipher to encrypt
   69 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 |
   60 |  = doSomething(request, param);
   61 |
   62 |
   63 | til.Properties benchmarkprops = new java.util.Properties();
   64 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   65 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
   79 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01982.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   70 | //  byte[] iv = random.generateSeed(16);
   71 |
   72 |   try {
   73 |    java.util.Properties benchmarkprops = new java.util.Properties();
   74 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   75 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  76 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   77 |
   78 |    // Prepare the cipher to encrypt
   79 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   80 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   81 |
   82 |    // encrypt and store the results
   83 |    byte[] input = { (byte)'?' };
   84 |    Object inputParam = bar;
   85 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   86 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02017.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |  8-byte initialization vector
   58 | byte[] iv = {
   59 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | };
   62 | va.security.SecureRandom random = new java.security.SecureRandom();
   63 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
>  66 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   67 |
   68 |      // Prepare the cipher to encrypt
   69 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | ncrypt and store the results
   74 | [] input = { (byte)'?' };
   75 | ct inputParam = bar;
   76 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02017.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | t and store the results
   74 | put = { (byte)'?' };
   75 | putParam = bar;
   76 | Param instanceof String) input = ((String) inputParam).getBytes();
   77 | Param instanceof java.io.InputStream) {
   78 | trInput = new byte[1000];
   79 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02018.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |  8-byte initialization vector
   58 | byte[] iv = {
   59 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | };
   62 | va.security.SecureRandom random = new java.security.SecureRandom();
   63 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
>  66 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   67 |
   68 |      // Prepare the cipher to encrypt
   69 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | ncrypt and store the results
   74 | [] input = { (byte)'?' };
   75 | ct inputParam = bar;
   76 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02018.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | t and store the results
   74 | put = { (byte)'?' };
   75 | putParam = bar;
   76 | Param instanceof String) input = ((String) inputParam).getBytes();
   77 | Param instanceof java.io.InputStream) {
   78 | trInput = new byte[1000];
   79 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02019.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |  8-byte initialization vector
   58 | byte[] iv = {
   59 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | };
   62 | va.security.SecureRandom random = new java.security.SecureRandom();
   63 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
>  66 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   67 |
   68 |      // Prepare the cipher to encrypt
   69 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | ncrypt and store the results
   74 | [] input = { (byte)'?' };
   75 | ct inputParam = bar;
   76 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02019.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   67 |
   68 | // Prepare the cipher to encrypt
>  69 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   70 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   71 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   72 |
   73 | t and store the results
   74 | put = { (byte)'?' };
   75 | putParam = bar;
   76 | Param instanceof String) input = ((String) inputParam).getBytes();
   77 | Param instanceof java.io.InputStream) {
   78 | trInput = new byte[1000];
   79 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02020.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   57 |      // 8-byte initialization vector
   58 | //     byte[] iv = {
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 |      java.security.SecureRandom random = new java.security.SecureRandom();
   63 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |   try {
>  66 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   67 |             // Prepare the cipher to encrypt
   68 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   70 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   71 |
   72 |    // encrypt and store the results
   73 |    byte[] input = { (byte)'?' };
   74 |    Object inputParam = bar;
   75 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   76 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02020.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,68,"
   58 | ] iv = {
   59 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 |
   62 | curity.SecureRandom random = new java.security.SecureRandom();
   63 | = random.generateSeed(8); // DES requires 8 byte keys
   64 |
   65 |
   66 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   67 | // Prepare the cipher to encrypt
>  68 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   69 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   70 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   71 |
   72 | t and store the results
   73 | put = { (byte)'?' };
   74 | putParam = bar;
   75 | Param instanceof String) input = ((String) inputParam).getBytes();
   76 | Param instanceof java.io.InputStream) {
   77 | trInput = new byte[1000];
   78 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |
   50 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
   51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   52 |
   53 |   String bar = doSomething(request, param);
   54 |
   55 |   try {
   56 |       java.util.Properties benchmarkprops = new java.util.Properties();
   57 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   58 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  59 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   60 |
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   64 |
   65 |    // encrypt and store the results
   66 |    byte[] input = { (byte)'?' };
   67 |    Object inputParam = bar;
   68 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   69 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 |
   53 |  = doSomething(request, param);
   54 |
   55 |
   56 | til.Properties benchmarkprops = new java.util.Properties();
   57 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   58 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   59 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   60 |
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   64 |
   65 | t and store the results
   66 | put = { (byte)'?' };
   67 | putParam = bar;
   68 | Param instanceof String) input = ((String) inputParam).getBytes();
   69 | Param instanceof java.io.InputStream) {
   70 | trInput = new byte[1000];
   71 | ((java.io.InputStream) inputParam).read(strInput);
   72 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |
   50 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
   51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   52 |
   53 |   String bar = doSomething(request, param);
   54 |
   55 |   try {
   56 |       java.util.Properties benchmarkprops = new java.util.Properties();
   57 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   58 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  59 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   60 |
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   64 |
   65 |    // encrypt and store the results
   66 |    byte[] input = { (byte)'?' };
   67 |    Object inputParam = bar;
   68 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   69 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 |
   53 |  = doSomething(request, param);
   54 |
   55 |
   56 | til.Properties benchmarkprops = new java.util.Properties();
   57 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   58 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   59 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   60 |
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   64 |
   65 | t and store the results
   66 | put = { (byte)'?' };
   67 | putParam = bar;
   68 | Param instanceof String) input = ((String) inputParam).getBytes();
   69 | Param instanceof java.io.InputStream) {
   70 | trInput = new byte[1000];
   71 | ((java.io.InputStream) inputParam).read(strInput);
   72 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02024.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,69,"
   59 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   60 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   61 | //     };
   62 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   63 | //  byte[] iv = random.generateSeed(16);
   64 |
   65 |   try {
   66 |    java.util.Properties benchmarkprops = new java.util.Properties();
   67 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   68 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  69 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   70 |
   71 |    // Prepare the cipher to encrypt
   72 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   73 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   74 |
   75 |    // encrypt and store the results
   76 |    byte[] input = { (byte)'?' };
   77 |    Object inputParam = bar;
   78 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   79 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02101.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   50 |      // 8-byte initialization vector
   51 | //     byte[] iv = {
   52 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 | //     };
   55 |      java.security.SecureRandom random = new java.security.SecureRandom();
   56 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |   try {
>  59 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   60 |             // Prepare the cipher to encrypt
   61 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   62 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   63 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   64 |
   65 |    // encrypt and store the results
   66 |    byte[] input = { (byte)'?' };
   67 |    Object inputParam = bar;
   68 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   69 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02101.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,61,"
   51 | ] iv = {
   52 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 |
   55 | curity.SecureRandom random = new java.security.SecureRandom();
   56 | = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |
   59 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   60 | // Prepare the cipher to encrypt
>  61 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   62 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   63 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   64 |
   65 | t and store the results
   66 | put = { (byte)'?' };
   67 | putParam = bar;
   68 | Param instanceof String) input = ((String) inputParam).getBytes();
   69 | Param instanceof java.io.InputStream) {
   70 | trInput = new byte[1000];
   71 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02103.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 | //     };
   55 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   56 | //  byte[] iv = random.generateSeed(16);
   57 |
   58 |   try {
   59 |    java.util.Properties benchmarkprops = new java.util.Properties();
   60 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   61 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  62 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   63 |
   64 |    // Prepare the cipher to encrypt
   65 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   66 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   67 |
   68 |    // encrypt and store the results
   69 |    byte[] input = { (byte)'?' };
   70 |    Object inputParam = bar;
   71 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   72 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02192.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 |             // Prepare the cipher to encrypt
   66 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 |    // encrypt and store the results
   71 |    byte[] input = { (byte)'?' };
   72 |    Object inputParam = bar;
   73 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   74 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02192.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | ] iv = {
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 | // Prepare the cipher to encrypt
>  66 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 | t and store the results
   71 | put = { (byte)'?' };
   72 | putParam = bar;
   73 | Param instanceof String) input = ((String) inputParam).getBytes();
   74 | Param instanceof java.io.InputStream) {
   75 | trInput = new byte[1000];
   76 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02193.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 |             // Prepare the cipher to encrypt
   66 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 |    // encrypt and store the results
   71 |    byte[] input = { (byte)'?' };
   72 |    Object inputParam = bar;
   73 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   74 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02193.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,66,"
   56 | ] iv = {
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   65 | // Prepare the cipher to encrypt
>  66 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   67 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   68 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   69 |
   70 | t and store the results
   71 | put = { (byte)'?' };
   72 | putParam = bar;
   73 | Param instanceof String) input = ((String) inputParam).getBytes();
   74 | Param instanceof java.io.InputStream) {
   75 | trInput = new byte[1000];
   76 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 |             // Prepare the cipher to encrypt
   67 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,64,"
   54 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   55 |      // 8-byte initialization vector
   56 | //     byte[] iv = {
   57 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 | //     };
   60 |      java.security.SecureRandom random = new java.security.SecureRandom();
   61 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |   try {
>  64 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 |             // Prepare the cipher to encrypt
   67 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 |    // encrypt and store the results
   72 |    byte[] input = { (byte)'?' };
   73 |    Object inputParam = bar;
   74 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,67,"
   57 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   58 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   59 |
   60 | curity.SecureRandom random = new java.security.SecureRandom();
   61 | = random.generateSeed(8); // DES requires 8 byte keys
   62 |
   63 |
   64 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   65 |
   66 | // Prepare the cipher to encrypt
>  67 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   68 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   69 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   70 |
   71 | t and store the results
   72 | put = { (byte)'?' };
   73 | putParam = bar;
   74 | Param instanceof String) input = ((String) inputParam).getBytes();
   75 | Param instanceof java.io.InputStream) {
   76 | trInput = new byte[1000];
   77 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02290.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   83 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02290.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | ] iv = {
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02291.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   83 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02291.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | ] iv = {
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02292.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   83 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02292.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | ] iv = {
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02296.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   70 | //  byte[] iv = random.generateSeed(16);
   71 |
   72 |   try {
   73 |    java.util.Properties benchmarkprops = new java.util.Properties();
   74 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   75 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  76 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   77 |
   78 |    // Prepare the cipher to encrypt
   79 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   80 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   81 |
   82 |    // encrypt and store the results
   83 |    byte[] input = { (byte)'?' };
   84 |    Object inputParam = bar;
   85 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   86 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02297.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   70 | //  byte[] iv = random.generateSeed(16);
   71 |
   72 |   try {
   73 |    java.util.Properties benchmarkprops = new java.util.Properties();
   74 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   75 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  76 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   77 |
   78 |    // Prepare the cipher to encrypt
   79 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   80 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   81 |
   82 |    // encrypt and store the results
   83 |    byte[] input = { (byte)'?' };
   84 |    Object inputParam = bar;
   85 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   86 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02298.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   70 | //  byte[] iv = random.generateSeed(16);
   71 |
   72 |   try {
   73 |    java.util.Properties benchmarkprops = new java.util.Properties();
   74 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   75 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  76 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   77 |
   78 |    // Prepare the cipher to encrypt
   79 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   80 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   81 |
   82 |    // encrypt and store the results
   83 |    byte[] input = { (byte)'?' };
   84 |    Object inputParam = bar;
   85 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   86 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   51 |      // 8-byte initialization vector
   52 | //     byte[] iv = {
   53 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 | //     };
   56 |      java.security.SecureRandom random = new java.security.SecureRandom();
   57 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |   try {
>  60 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   61 |
   62 |             // Prepare the cipher to encrypt
   63 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   65 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   66 |
   67 |    // encrypt and store the results
   68 |    byte[] input = { (byte)'?' };
   69 |    Object inputParam = bar;
   70 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,63,"
   53 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 |
   56 | curity.SecureRandom random = new java.security.SecureRandom();
   57 | = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
   60 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   61 |
   62 | // Prepare the cipher to encrypt
>  63 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   65 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   66 |
   67 | t and store the results
   68 | put = { (byte)'?' };
   69 | putParam = bar;
   70 | Param instanceof String) input = ((String) inputParam).getBytes();
   71 | Param instanceof java.io.InputStream) {
   72 | trInput = new byte[1000];
   73 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,60,"
   50 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   51 |      // 8-byte initialization vector
   52 | //     byte[] iv = {
   53 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 | //     };
   56 |      java.security.SecureRandom random = new java.security.SecureRandom();
   57 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |   try {
>  60 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   61 |
   62 |             // Prepare the cipher to encrypt
   63 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   65 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   66 |
   67 |    // encrypt and store the results
   68 |    byte[] input = { (byte)'?' };
   69 |    Object inputParam = bar;
   70 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,63,"
   53 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   54 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   55 |
   56 | curity.SecureRandom random = new java.security.SecureRandom();
   57 | = random.generateSeed(8); // DES requires 8 byte keys
   58 |
   59 |
   60 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   61 |
   62 | // Prepare the cipher to encrypt
>  63 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   64 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   65 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   66 |
   67 | t and store the results
   68 | put = { (byte)'?' };
   69 | putParam = bar;
   70 | Param instanceof String) input = ((String) inputParam).getBytes();
   71 | Param instanceof java.io.InputStream) {
   72 | trInput = new byte[1000];
   73 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,53,"
   43 |   org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request );
   44 |   String param = scr.getTheParameter(""BenchmarkTest02375"");
   45 |   if (param == null) param = """";
   46 |
   47 |   String bar = doSomething(request, param);
   48 |
   49 |   try {
   50 |       java.util.Properties benchmarkprops = new java.util.Properties();
   51 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   52 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  53 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   54 |
   55 |             // Prepare the cipher to encrypt
   56 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   57 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   58 |
   59 |    // encrypt and store the results
   60 |    byte[] input = { (byte)'?' };
   61 |    Object inputParam = bar;
   62 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   63 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,56,"
   46 |
   47 |  = doSomething(request, param);
   48 |
   49 |
   50 | til.Properties benchmarkprops = new java.util.Properties();
   51 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   52 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   53 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   54 |
   55 | // Prepare the cipher to encrypt
>  56 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   57 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   58 |
   59 | t and store the results
   60 | put = { (byte)'?' };
   61 | putParam = bar;
   62 | Param instanceof String) input = ((String) inputParam).getBytes();
   63 | Param instanceof java.io.InputStream) {
   64 | trInput = new byte[1000];
   65 | ((java.io.InputStream) inputParam).read(strInput);
   66 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02458.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   53 |  8-byte initialization vector
   54 | byte[] iv = {
   55 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   56 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   57 | };
   58 | va.security.SecureRandom random = new java.security.SecureRandom();
   59 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   60 |
   61 |
>  62 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   63 |
   64 |      // Prepare the cipher to encrypt
   65 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   66 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   67 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   68 |
   69 | ncrypt and store the results
   70 | [] input = { (byte)'?' };
   71 | ct inputParam = bar;
   72 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02458.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,65,"
   55 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   56 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   57 |
   58 | curity.SecureRandom random = new java.security.SecureRandom();
   59 | = random.generateSeed(8); // DES requires 8 byte keys
   60 |
   61 |
   62 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   63 |
   64 | // Prepare the cipher to encrypt
>  65 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   66 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   67 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   68 |
   69 | t and store the results
   70 | put = { (byte)'?' };
   71 | putParam = bar;
   72 | Param instanceof String) input = ((String) inputParam).getBytes();
   73 | Param instanceof java.io.InputStream) {
   74 | trInput = new byte[1000];
   75 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02548.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   83 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02548.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | ] iv = {
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02549.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 |             // Prepare the cipher to encrypt
   75 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 |    // encrypt and store the results
   80 |    byte[] input = { (byte)'?' };
   81 |    Object inputParam = bar;
   82 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   83 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02549.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,75,"
   65 | ] iv = {
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
   74 | // Prepare the cipher to encrypt
>  75 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   76 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   77 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   78 |
   79 | t and store the results
   80 | put = { (byte)'?' };
   81 | putParam = bar;
   82 | Param instanceof String) input = ((String) inputParam).getBytes();
   83 | Param instanceof java.io.InputStream) {
   84 | trInput = new byte[1000];
   85 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,73,"
   63 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   64 |      // 8-byte initialization vector
   65 | //     byte[] iv = {
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 |      java.security.SecureRandom random = new java.security.SecureRandom();
   70 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |   try {
>  73 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 |             // Prepare the cipher to encrypt
   76 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 |    // encrypt and store the results
   81 |    byte[] input = { (byte)'?' };
   82 |    Object inputParam = bar;
   83 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 |
   69 | curity.SecureRandom random = new java.security.SecureRandom();
   70 | = random.generateSeed(8); // DES requires 8 byte keys
   71 |
   72 |
   73 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   74 |
   75 | // Prepare the cipher to encrypt
>  76 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   77 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   78 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   79 |
   80 | t and store the results
   81 | put = { (byte)'?' };
   82 | putParam = bar;
   83 | Param instanceof String) input = ((String) inputParam).getBytes();
   84 | Param instanceof java.io.InputStream) {
   85 | trInput = new byte[1000];
   86 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02552.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,76,"
   66 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   67 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   68 | //     };
   69 | //     java.security.SecureRandom random = new java.security.SecureRandom();
   70 | //  byte[] iv = random.generateSeed(16);
   71 |
   72 |   try {
   73 |    java.util.Properties benchmarkprops = new java.util.Properties();
   74 |    benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   75 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
>  76 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   77 |
   78 |    // Prepare the cipher to encrypt
   79 |    javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
   80 |    c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   81 |
   82 |    // encrypt and store the results
   83 |    byte[] input = { (byte)'?' };
   84 |    Object inputParam = bar;
   85 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   86 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02658.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 | tp://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   50 |  8-byte initialization vector
   51 | byte[] iv = {
   52 |  (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 |  (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 | };
   55 | va.security.SecureRandom random = new java.security.SecureRandom();
   56 | ] iv = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |
>  59 |      javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""
   60 |
   61 |      // Prepare the cipher to encrypt
   62 |      javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |      java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |      c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | ncrypt and store the results
   67 | [] input = { (byte)'?' };
   68 | ct inputParam = bar;
   69 | inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 7
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02658.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 |
   55 | curity.SecureRandom random = new java.security.SecureRandom();
   56 | = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |
   59 | javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJC
   60 |
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = bar;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   50 |      // 8-byte initialization vector
   51 | //     byte[] iv = {
   52 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 | //     };
   55 |      java.security.SecureRandom random = new java.security.SecureRandom();
   56 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |   try {
>  59 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   60 |
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = bar;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 |
   55 | curity.SecureRandom random = new java.security.SecureRandom();
   56 | = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |
   59 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   60 |
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = bar;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,59,"
   49 |   // http://examples.javacodegeeks.com/core-java/crypto/encrypt-decrypt-file-stream-with-des/
   50 |      // 8-byte initialization vector
   51 | //     byte[] iv = {
   52 | //      (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | //      (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 | //     };
   55 |      java.security.SecureRandom random = new java.security.SecureRandom();
   56 |   byte[] iv = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |   try {
>  59 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   60 |
   61 |             // Prepare the cipher to encrypt
   62 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 |             java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 |    // encrypt and store the results
   67 |    byte[] input = { (byte)'?' };
   68 |    Object inputParam = bar;
   69 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,62,"
   52 | e)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,
   53 | e)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3033
   54 |
   55 | curity.SecureRandom random = new java.security.SecureRandom();
   56 | = random.generateSeed(8); // DES requires 8 byte keys
   57 |
   58 |
   59 | pto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
   60 |
   61 | // Prepare the cipher to encrypt
>  62 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   63 | java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
   64 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
   65 |
   66 | t and store the results
   67 | put = { (byte)'?' };
   68 | putParam = bar;
   69 | Param instanceof String) input = ((String) inputParam).getBytes();
   70 | Param instanceof java.io.InputStream) {
   71 | trInput = new byte[1000];
   72 | ((java.io.InputStream) inputParam).read(strInput);
      ^ Col 12
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,52,"
   42 |
   43 |   org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request );
   44 |   String param = scr.getTheValue(""BenchmarkTest02663"");
   45 |
   46 |   String bar = doSomething(request, param);
   47 |
   48 |   try {
   49 |       java.util.Properties benchmarkprops = new java.util.Properties();
   50 |       benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 |    String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
>  52 |    javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 |             // Prepare the cipher to encrypt
   55 |             javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 |             c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 |    // encrypt and store the results
   59 |    byte[] input = { (byte)'?' };
   60 |    Object inputParam = bar;
   61 |    if (inputParam instanceof String) input = ((String) inputParam).getBytes();
   62 |    if (inputParam instanceof java.io.InputStream) {
      ^ Col 0
",java.java_insecure_cipher
052. Insecure encryption algorithm,CWE-310,Use of insecure encryption algorithm in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java,CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/052,skims,SAST,55,"
   45 |
   46 |  = doSomething(request, param);
   47 |
   48 |
   49 | til.Properties benchmarkprops = new java.util.Properties();
   50 | arkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
   51 | gorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
   52 | pto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
   53 |
   54 | // Prepare the cipher to encrypt
>  55 | javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
   56 | c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
   57 |
   58 | t and store the results
   59 | put = { (byte)'?' };
   60 | putParam = bar;
   61 | Param instanceof String) input = ((String) inputParam).getBytes();
   62 | Param instanceof java.io.InputStream) {
   63 | trInput = new byte[1000];
   64 | ((java.io.InputStream) inputParam).read(strInput);
   65 |  -1) {
      ^ Col 12
",java.java_insecure_cipher
Summary: 287 vulnerabilities were found in your targets.