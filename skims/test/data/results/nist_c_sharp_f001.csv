title,cwe,description,cvss,finding,stream,kind,where,snippet,method
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,73,"
   63 |   {
   64 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   65 |       {
   66 |           badSqlCommand.Connection = dbConnection;
   67 |           dbConnection.Open();
   68 |           for (int i = 0; i < names.Length; i++)
   69 |           {
   70 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   71 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   72 |           }
>  73 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   74 |           successCount += affectedRows;
   75 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   76 |       }
   77 |   }
   78 |   catch (SqlException exceptSql)
   79 |   {
   80 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   81 |   }
   82 |   finally
   83 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,91,"
   81 |   {
   82 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   83 |       {
   84 |           badSqlCommand.Connection = dbConnection;
   85 |           dbConnection.Open();
   86 |           for (int i = 0; i < names.Length; i++)
   87 |           {
   88 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   89 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   90 |           }
>  91 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   92 |           successCount += affectedRows;
   93 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   94 |       }
   95 |   }
   96 |   catch (SqlException exceptSql)
   97 |   {
   98 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   99 |   }
  100 |   finally
  101 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |   {
   81 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   82 |       {
   83 |           badSqlCommand.Connection = dbConnection;
   84 |           dbConnection.Open();
   85 |           for (int i = 0; i < names.Length; i++)
   86 |           {
   87 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   88 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   89 |           }
>  90 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   91 |           successCount += affectedRows;
   92 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   93 |       }
   94 |   }
   95 |   catch (SqlException exceptSql)
   96 |   {
   97 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   98 |   }
   99 |   finally
  100 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 |   {
   80 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   81 |       {
   82 |           badSqlCommand.Connection = dbConnection;
   83 |           dbConnection.Open();
   84 |           for (int i = 0; i < names.Length; i++)
   85 |           {
   86 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   87 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   88 |           }
>  89 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   90 |           successCount += affectedRows;
   91 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   92 |       }
   93 |   }
   94 |   catch (SqlException exceptSql)
   95 |   {
   96 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   97 |   }
   98 |   finally
   99 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 |   {
   80 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   81 |       {
   82 |           badSqlCommand.Connection = dbConnection;
   83 |           dbConnection.Open();
   84 |           for (int i = 0; i < names.Length; i++)
   85 |           {
   86 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   87 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   88 |           }
>  89 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   90 |           successCount += affectedRows;
   91 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   92 |       }
   93 |   }
   94 |   catch (SqlException exceptSql)
   95 |   {
   96 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   97 |   }
   98 |   finally
   99 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,97,"
   87 |   {
   88 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |       {
   90 |           badSqlCommand.Connection = dbConnection;
   91 |           dbConnection.Open();
   92 |           for (int i = 0; i < names.Length; i++)
   93 |           {
   94 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   95 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   96 |           }
>  97 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   98 |           successCount += affectedRows;
   99 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  100 |       }
  101 |   }
  102 |   catch (SqlException exceptSql)
  103 |   {
  104 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  105 |   }
  106 |   finally
  107 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |   {
   74 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |       {
   76 |           badSqlCommand.Connection = dbConnection;
   77 |           dbConnection.Open();
   78 |           for (int i = 0; i < names.Length; i++)
   79 |           {
   80 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   81 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   82 |           }
>  83 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   84 |           successCount += affectedRows;
   85 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   86 |       }
   87 |   }
   88 |   catch (SqlException exceptSql)
   89 |   {
   90 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   91 |   }
   92 |   finally
   93 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,86,"
   76 |   {
   77 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   78 |       {
   79 |           badSqlCommand.Connection = dbConnection;
   80 |           dbConnection.Open();
   81 |           for (int i = 0; i < names.Length; i++)
   82 |           {
   83 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   84 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   85 |           }
>  86 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   87 |           successCount += affectedRows;
   88 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   89 |       }
   90 |   }
   91 |   catch (SqlException exceptSql)
   92 |   {
   93 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   94 |   }
   95 |   finally
   96 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 |   {
   70 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |       {
   72 |           badSqlCommand.Connection = dbConnection;
   73 |           dbConnection.Open();
   74 |           for (int i = 0; i < names.Length; i++)
   75 |           {
   76 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   77 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   78 |           }
>  79 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   80 |           successCount += affectedRows;
   81 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   82 |       }
   83 |   }
   84 |   catch (SqlException exceptSql)
   85 |   {
   86 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   87 |   }
   88 |   finally
   89 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 |   {
   70 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |       {
   72 |           badSqlCommand.Connection = dbConnection;
   73 |           dbConnection.Open();
   74 |           for (int i = 0; i < names.Length; i++)
   75 |           {
   76 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   77 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   78 |           }
>  79 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   80 |           successCount += affectedRows;
   81 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   82 |       }
   83 |   }
   84 |   catch (SqlException exceptSql)
   85 |   {
   86 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   87 |   }
   88 |   finally
   89 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 |   {
   70 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |       {
   72 |           badSqlCommand.Connection = dbConnection;
   73 |           dbConnection.Open();
   74 |           for (int i = 0; i < names.Length; i++)
   75 |           {
   76 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   77 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   78 |           }
>  79 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   80 |           successCount += affectedRows;
   81 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   82 |       }
   83 |   }
   84 |   catch (SqlException exceptSql)
   85 |   {
   86 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   87 |   }
   88 |   finally
   89 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 |   {
   70 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |       {
   72 |           badSqlCommand.Connection = dbConnection;
   73 |           dbConnection.Open();
   74 |           for (int i = 0; i < names.Length; i++)
   75 |           {
   76 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   77 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   78 |           }
>  79 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   80 |           successCount += affectedRows;
   81 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   82 |       }
   83 |   }
   84 |   catch (SqlException exceptSql)
   85 |   {
   86 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   87 |   }
   88 |   finally
   89 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,67,"
   57 |         int? result = null;
   58 |         try
   59 |         {
   60 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   61 |             {
   62 |                 dbConnection.Open();
   63 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   64 |                 {
   65 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   66 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  67 |                     result = badSqlCommand.ExecuteNonQuery();
   68 |                     if (result != null)
   69 |                     {
   70 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   71 |                     }
   72 |                     else
   73 |                     {
   74 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   75 |                     }
   76 |                 }
   77 |             }
      ^ Col 0
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |         int? result = null;
   69 |         try
   70 |         {
   71 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   72 |             {
   73 |                 dbConnection.Open();
   74 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   75 |                 {
   76 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   77 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  78 |                     result = badSqlCommand.ExecuteNonQuery();
   79 |                     if (result != null)
   80 |                     {
   81 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   82 |                     }
   83 |                     else
   84 |                     {
   85 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   86 |                     }
   87 |                 }
   88 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |         int? result = null;
   69 |         try
   70 |         {
   71 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   72 |             {
   73 |                 dbConnection.Open();
   74 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   75 |                 {
   76 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   77 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  78 |                     result = badSqlCommand.ExecuteNonQuery();
   79 |                     if (result != null)
   80 |                     {
   81 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   82 |                     }
   83 |                     else
   84 |                     {
   85 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   86 |                     }
   87 |                 }
   88 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,85,"
   75 |         int? result = null;
   76 |         try
   77 |         {
   78 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   79 |             {
   80 |                 dbConnection.Open();
   81 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   82 |                 {
   83 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   84 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  85 |                     result = badSqlCommand.ExecuteNonQuery();
   86 |                     if (result != null)
   87 |                     {
   88 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   89 |                     }
   90 |                     else
   91 |                     {
   92 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   93 |                     }
   94 |                 }
   95 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |         int? result = null;
   75 |         try
   76 |         {
   77 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   78 |             {
   79 |                 dbConnection.Open();
   80 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   81 |                 {
   82 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   83 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  84 |                     result = badSqlCommand.ExecuteNonQuery();
   85 |                     if (result != null)
   86 |                     {
   87 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   88 |                     }
   89 |                     else
   90 |                     {
   91 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   92 |                     }
   93 |                 }
   94 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |         int? result = null;
   74 |         try
   75 |         {
   76 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   77 |             {
   78 |                 dbConnection.Open();
   79 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   80 |                 {
   81 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   82 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  83 |                     result = badSqlCommand.ExecuteNonQuery();
   84 |                     if (result != null)
   85 |                     {
   86 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   87 |                     }
   88 |                     else
   89 |                     {
   90 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   91 |                     }
   92 |                 }
   93 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |         int? result = null;
   74 |         try
   75 |         {
   76 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   77 |             {
   78 |                 dbConnection.Open();
   79 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   80 |                 {
   81 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   82 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  83 |                     result = badSqlCommand.ExecuteNonQuery();
   84 |                     if (result != null)
   85 |                     {
   86 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   87 |                     }
   88 |                     else
   89 |                     {
   90 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   91 |                     }
   92 |                 }
   93 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,91,"
   81 |         int? result = null;
   82 |         try
   83 |         {
   84 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   85 |             {
   86 |                 dbConnection.Open();
   87 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   88 |                 {
   89 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   90 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  91 |                     result = badSqlCommand.ExecuteNonQuery();
   92 |                     if (result != null)
   93 |                     {
   94 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   95 |                     }
   96 |                     else
   97 |                     {
   98 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   99 |                     }
  100 |                 }
  101 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |         int? result = null;
   69 |         try
   70 |         {
   71 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   72 |             {
   73 |                 dbConnection.Open();
   74 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   75 |                 {
   76 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   77 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  78 |                     result = badSqlCommand.ExecuteNonQuery();
   79 |                     if (result != null)
   80 |                     {
   81 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   82 |                     }
   83 |                     else
   84 |                     {
   85 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   86 |                     }
   87 |                 }
   88 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |         int? result = null;
   69 |         try
   70 |         {
   71 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   72 |             {
   73 |                 dbConnection.Open();
   74 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   75 |                 {
   76 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   77 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  78 |                     result = badSqlCommand.ExecuteNonQuery();
   79 |                     if (result != null)
   80 |                     {
   81 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   82 |                     }
   83 |                     else
   84 |                     {
   85 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   86 |                     }
   87 |                 }
   88 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |         int? result = null;
   69 |         try
   70 |         {
   71 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   72 |             {
   73 |                 dbConnection.Open();
   74 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   75 |                 {
   76 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   77 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  78 |                     result = badSqlCommand.ExecuteNonQuery();
   79 |                     if (result != null)
   80 |                     {
   81 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   82 |                     }
   83 |                     else
   84 |                     {
   85 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   86 |                     }
   87 |                 }
   88 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |         int? result = null;
   68 |         try
   69 |         {
   70 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |             {
   72 |                 dbConnection.Open();
   73 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |                 {
   75 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   76 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  77 |                     result = badSqlCommand.ExecuteNonQuery();
   78 |                     if (result != null)
   79 |                     {
   80 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   81 |                     }
   82 |                     else
   83 |                     {
   84 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   85 |                     }
   86 |                 }
   87 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |         int? result = null;
   69 |         try
   70 |         {
   71 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   72 |             {
   73 |                 dbConnection.Open();
   74 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   75 |                 {
   76 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   77 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  78 |                     result = badSqlCommand.ExecuteNonQuery();
   79 |                     if (result != null)
   80 |                     {
   81 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   82 |                     }
   83 |                     else
   84 |                     {
   85 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   86 |                     }
   87 |                 }
   88 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |         int? result = null;
   69 |         try
   70 |         {
   71 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   72 |             {
   73 |                 dbConnection.Open();
   74 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   75 |                 {
   76 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   77 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  78 |                     result = badSqlCommand.ExecuteNonQuery();
   79 |                     if (result != null)
   80 |                     {
   81 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   82 |                     }
   83 |                     else
   84 |                     {
   85 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   86 |                     }
   87 |                 }
   88 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,80,"
   70 |         int? result = null;
   71 |         try
   72 |         {
   73 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   74 |             {
   75 |                 dbConnection.Open();
   76 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   77 |                 {
   78 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   79 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  80 |                     result = badSqlCommand.ExecuteNonQuery();
   81 |                     if (result != null)
   82 |                     {
   83 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   84 |                     }
   85 |                     else
   86 |                     {
   87 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   88 |                     }
   89 |                 }
   90 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,73,"
   63 |         int? result = null;
   64 |         try
   65 |         {
   66 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   67 |             {
   68 |                 dbConnection.Open();
   69 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   70 |                 {
   71 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   72 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  73 |                     result = badSqlCommand.ExecuteNonQuery();
   74 |                     if (result != null)
   75 |                     {
   76 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   77 |                     }
   78 |                     else
   79 |                     {
   80 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   81 |                     }
   82 |                 }
   83 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,73,"
   63 |         int? result = null;
   64 |         try
   65 |         {
   66 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   67 |             {
   68 |                 dbConnection.Open();
   69 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   70 |                 {
   71 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   72 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  73 |                     result = badSqlCommand.ExecuteNonQuery();
   74 |                     if (result != null)
   75 |                     {
   76 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   77 |                     }
   78 |                     else
   79 |                     {
   80 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   81 |                     }
   82 |                 }
   83 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,73,"
   63 |         int? result = null;
   64 |         try
   65 |         {
   66 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   67 |             {
   68 |                 dbConnection.Open();
   69 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   70 |                 {
   71 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   72 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  73 |                     result = badSqlCommand.ExecuteNonQuery();
   74 |                     if (result != null)
   75 |                     {
   76 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   77 |                     }
   78 |                     else
   79 |                     {
   80 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   81 |                     }
   82 |                 }
   83 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,73,"
   63 |         int? result = null;
   64 |         try
   65 |         {
   66 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   67 |             {
   68 |                 dbConnection.Open();
   69 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   70 |                 {
   71 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   72 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  73 |                     result = badSqlCommand.ExecuteNonQuery();
   74 |                     if (result != null)
   75 |                     {
   76 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   77 |                     }
   78 |                     else
   79 |                     {
   80 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   81 |                     }
   82 |                 }
   83 |             }
      ^ Col 0
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,66,"
   56 |
   57 | ry
   58 |
   59 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   60 |    {
   61 |        dbConnection.Open();
   62 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   63 |        {
   64 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   65 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  66 |            object firstCol = badSqlCommand.ExecuteScalar();
   67 |            if (firstCol != null)
   68 |            {
   69 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   70 |            }
   71 |        }
   72 |    }
   73 |
   74 | atch (SqlException exceptSql)
   75 |
   76 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 9
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |
   68 | ry
   69 |
   70 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |    {
   72 |        dbConnection.Open();
   73 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |        {
   75 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   76 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  77 |            object firstCol = badSqlCommand.ExecuteScalar();
   78 |            if (firstCol != null)
   79 |            {
   80 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   81 |            }
   82 |        }
   83 |    }
   84 |
   85 | atch (SqlException exceptSql)
   86 |
   87 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |
   68 | ry
   69 |
   70 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |    {
   72 |        dbConnection.Open();
   73 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |        {
   75 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   76 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  77 |            object firstCol = badSqlCommand.ExecuteScalar();
   78 |            if (firstCol != null)
   79 |            {
   80 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   81 |            }
   82 |        }
   83 |    }
   84 |
   85 | atch (SqlException exceptSql)
   86 |
   87 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |
   75 | ry
   76 |
   77 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   78 |    {
   79 |        dbConnection.Open();
   80 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   81 |        {
   82 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   83 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  84 |            object firstCol = badSqlCommand.ExecuteScalar();
   85 |            if (firstCol != null)
   86 |            {
   87 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   88 |            }
   89 |        }
   90 |    }
   91 |
   92 | atch (SqlException exceptSql)
   93 |
   94 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |
   74 | ry
   75 |
   76 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   77 |    {
   78 |        dbConnection.Open();
   79 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   80 |        {
   81 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   82 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  83 |            object firstCol = badSqlCommand.ExecuteScalar();
   84 |            if (firstCol != null)
   85 |            {
   86 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   87 |            }
   88 |        }
   89 |    }
   90 |
   91 | atch (SqlException exceptSql)
   92 |
   93 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |
   73 | ry
   74 |
   75 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |    {
   77 |        dbConnection.Open();
   78 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |        {
   80 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   81 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  82 |            object firstCol = badSqlCommand.ExecuteScalar();
   83 |            if (firstCol != null)
   84 |            {
   85 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   86 |            }
   87 |        }
   88 |    }
   89 |
   90 | atch (SqlException exceptSql)
   91 |
   92 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |
   73 | ry
   74 |
   75 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |    {
   77 |        dbConnection.Open();
   78 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |        {
   80 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   81 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  82 |            object firstCol = badSqlCommand.ExecuteScalar();
   83 |            if (firstCol != null)
   84 |            {
   85 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   86 |            }
   87 |        }
   88 |    }
   89 |
   90 | atch (SqlException exceptSql)
   91 |
   92 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |
   81 | ry
   82 |
   83 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   84 |    {
   85 |        dbConnection.Open();
   86 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   87 |        {
   88 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   89 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  90 |            object firstCol = badSqlCommand.ExecuteScalar();
   91 |            if (firstCol != null)
   92 |            {
   93 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   94 |            }
   95 |        }
   96 |    }
   97 |
   98 | atch (SqlException exceptSql)
   99 |
  100 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |
   68 | ry
   69 |
   70 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |    {
   72 |        dbConnection.Open();
   73 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |        {
   75 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   76 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  77 |            object firstCol = badSqlCommand.ExecuteScalar();
   78 |            if (firstCol != null)
   79 |            {
   80 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   81 |            }
   82 |        }
   83 |    }
   84 |
   85 | atch (SqlException exceptSql)
   86 |
   87 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |
   68 | ry
   69 |
   70 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |    {
   72 |        dbConnection.Open();
   73 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |        {
   75 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   76 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  77 |            object firstCol = badSqlCommand.ExecuteScalar();
   78 |            if (firstCol != null)
   79 |            {
   80 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   81 |            }
   82 |        }
   83 |    }
   84 |
   85 | atch (SqlException exceptSql)
   86 |
   87 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |
   68 | ry
   69 |
   70 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |    {
   72 |        dbConnection.Open();
   73 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |        {
   75 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   76 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  77 |            object firstCol = badSqlCommand.ExecuteScalar();
   78 |            if (firstCol != null)
   79 |            {
   80 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   81 |            }
   82 |        }
   83 |    }
   84 |
   85 | atch (SqlException exceptSql)
   86 |
   87 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,76,"
   66 |
   67 | ry
   68 |
   69 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   70 |    {
   71 |        dbConnection.Open();
   72 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   73 |        {
   74 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   75 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  76 |            object firstCol = badSqlCommand.ExecuteScalar();
   77 |            if (firstCol != null)
   78 |            {
   79 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   80 |            }
   81 |        }
   82 |    }
   83 |
   84 | atch (SqlException exceptSql)
   85 |
   86 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |
   68 | ry
   69 |
   70 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |    {
   72 |        dbConnection.Open();
   73 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |        {
   75 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   76 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  77 |            object firstCol = badSqlCommand.ExecuteScalar();
   78 |            if (firstCol != null)
   79 |            {
   80 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   81 |            }
   82 |        }
   83 |    }
   84 |
   85 | atch (SqlException exceptSql)
   86 |
   87 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |
   68 | ry
   69 |
   70 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |    {
   72 |        dbConnection.Open();
   73 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |        {
   75 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   76 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  77 |            object firstCol = badSqlCommand.ExecuteScalar();
   78 |            if (firstCol != null)
   79 |            {
   80 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   81 |            }
   82 |        }
   83 |    }
   84 |
   85 | atch (SqlException exceptSql)
   86 |
   87 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 | 7:
   70 | ry
   71 |
   72 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   73 |    {
   74 |        dbConnection.Open();
   75 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   76 |        {
   77 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   78 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  79 |            object firstCol = badSqlCommand.ExecuteScalar();
   80 |            if (firstCol != null)
   81 |            {
   82 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   83 |            }
   84 |        }
   85 |    }
   86 |
   87 | atch (SqlException exceptSql)
   88 |
   89 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,72,"
   62 |
   63 | ry
   64 |
   65 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   66 |    {
   67 |        dbConnection.Open();
   68 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   69 |        {
   70 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   71 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  72 |            object firstCol = badSqlCommand.ExecuteScalar();
   73 |            if (firstCol != null)
   74 |            {
   75 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   76 |            }
   77 |        }
   78 |    }
   79 |
   80 | atch (SqlException exceptSql)
   81 |
   82 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,72,"
   62 |
   63 | ry
   64 |
   65 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   66 |    {
   67 |        dbConnection.Open();
   68 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   69 |        {
   70 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   71 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  72 |            object firstCol = badSqlCommand.ExecuteScalar();
   73 |            if (firstCol != null)
   74 |            {
   75 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   76 |            }
   77 |        }
   78 |    }
   79 |
   80 | atch (SqlException exceptSql)
   81 |
   82 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,72,"
   62 | tring data = dataCopy;
   63 | ry
   64 |
   65 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   66 |    {
   67 |        dbConnection.Open();
   68 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   69 |        {
   70 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   71 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  72 |            object firstCol = badSqlCommand.ExecuteScalar();
   73 |            if (firstCol != null)
   74 |            {
   75 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   76 |            }
   77 |        }
   78 |    }
   79 |
   80 | atch (SqlException exceptSql)
   81 |
   82 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,72,"
   62 | tring data = BadSource(req, resp);
   63 | ry
   64 |
   65 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   66 |    {
   67 |        dbConnection.Open();
   68 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   69 |        {
   70 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   71 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  72 |            object firstCol = badSqlCommand.ExecuteScalar();
   73 |            if (firstCol != null)
   74 |            {
   75 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   76 |            }
   77 |        }
   78 |    }
   79 |
   80 | atch (SqlException exceptSql)
   81 |
   82 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 9
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |   {
   68 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   69 |       {
   70 |           badSqlCommand.Connection = dbConnection;
   71 |           dbConnection.Open();
   72 |           for (int i = 0; i < names.Length; i++)
   73 |           {
   74 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   75 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   76 |           }
>  77 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   78 |           successCount += affectedRows;
   79 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   80 |       }
   81 |   }
   82 |   catch (SqlException exceptSql)
   83 |   {
   84 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   85 |   }
   86 |   finally
   87 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |   {
   79 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |       {
   81 |           badSqlCommand.Connection = dbConnection;
   82 |           dbConnection.Open();
   83 |           for (int i = 0; i < names.Length; i++)
   84 |           {
   85 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   86 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   87 |           }
>  88 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   89 |           successCount += affectedRows;
   90 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   91 |       }
   92 |   }
   93 |   catch (SqlException exceptSql)
   94 |   {
   95 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   96 |   }
   97 |   finally
   98 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |   {
   79 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |       {
   81 |           badSqlCommand.Connection = dbConnection;
   82 |           dbConnection.Open();
   83 |           for (int i = 0; i < names.Length; i++)
   84 |           {
   85 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   86 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   87 |           }
>  88 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   89 |           successCount += affectedRows;
   90 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   91 |       }
   92 |   }
   93 |   catch (SqlException exceptSql)
   94 |   {
   95 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   96 |   }
   97 |   finally
   98 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |   {
   86 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   87 |       {
   88 |           badSqlCommand.Connection = dbConnection;
   89 |           dbConnection.Open();
   90 |           for (int i = 0; i < names.Length; i++)
   91 |           {
   92 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   93 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   94 |           }
>  95 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   96 |           successCount += affectedRows;
   97 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   98 |       }
   99 |   }
  100 |   catch (SqlException exceptSql)
  101 |   {
  102 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  103 |   }
  104 |   finally
  105 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |   {
   85 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   86 |       {
   87 |           badSqlCommand.Connection = dbConnection;
   88 |           dbConnection.Open();
   89 |           for (int i = 0; i < names.Length; i++)
   90 |           {
   91 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   92 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   93 |           }
>  94 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   95 |           successCount += affectedRows;
   96 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   97 |       }
   98 |   }
   99 |   catch (SqlException exceptSql)
  100 |   {
  101 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  102 |   }
  103 |   finally
  104 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,93,"
   83 |   {
   84 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   85 |       {
   86 |           badSqlCommand.Connection = dbConnection;
   87 |           dbConnection.Open();
   88 |           for (int i = 0; i < names.Length; i++)
   89 |           {
   90 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   91 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   92 |           }
>  93 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   94 |           successCount += affectedRows;
   95 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   96 |       }
   97 |   }
   98 |   catch (SqlException exceptSql)
   99 |   {
  100 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  101 |   }
  102 |   finally
  103 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,93,"
   83 |   {
   84 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   85 |       {
   86 |           badSqlCommand.Connection = dbConnection;
   87 |           dbConnection.Open();
   88 |           for (int i = 0; i < names.Length; i++)
   89 |           {
   90 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   91 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   92 |           }
>  93 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   94 |           successCount += affectedRows;
   95 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   96 |       }
   97 |   }
   98 |   catch (SqlException exceptSql)
   99 |   {
  100 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  101 |   }
  102 |   finally
  103 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |   {
   92 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |       {
   94 |           badSqlCommand.Connection = dbConnection;
   95 |           dbConnection.Open();
   96 |           for (int i = 0; i < names.Length; i++)
   97 |           {
   98 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   99 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  100 |           }
> 101 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  102 |           successCount += affectedRows;
  103 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  104 |       }
  105 |   }
  106 |   catch (SqlException exceptSql)
  107 |   {
  108 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  109 |   }
  110 |   finally
  111 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |   {
   79 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |       {
   81 |           badSqlCommand.Connection = dbConnection;
   82 |           dbConnection.Open();
   83 |           for (int i = 0; i < names.Length; i++)
   84 |           {
   85 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   86 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   87 |           }
>  88 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   89 |           successCount += affectedRows;
   90 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   91 |       }
   92 |   }
   93 |   catch (SqlException exceptSql)
   94 |   {
   95 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   96 |   }
   97 |   finally
   98 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |   {
   79 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |       {
   81 |           badSqlCommand.Connection = dbConnection;
   82 |           dbConnection.Open();
   83 |           for (int i = 0; i < names.Length; i++)
   84 |           {
   85 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   86 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   87 |           }
>  88 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   89 |           successCount += affectedRows;
   90 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   91 |       }
   92 |   }
   93 |   catch (SqlException exceptSql)
   94 |   {
   95 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   96 |   }
   97 |   finally
   98 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |   {
   79 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |       {
   81 |           badSqlCommand.Connection = dbConnection;
   82 |           dbConnection.Open();
   83 |           for (int i = 0; i < names.Length; i++)
   84 |           {
   85 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   86 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   87 |           }
>  88 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   89 |           successCount += affectedRows;
   90 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   91 |       }
   92 |   }
   93 |   catch (SqlException exceptSql)
   94 |   {
   95 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   96 |   }
   97 |   finally
   98 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,87,"
   77 |   {
   78 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   79 |       {
   80 |           badSqlCommand.Connection = dbConnection;
   81 |           dbConnection.Open();
   82 |           for (int i = 0; i < names.Length; i++)
   83 |           {
   84 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   85 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   86 |           }
>  87 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   88 |           successCount += affectedRows;
   89 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   90 |       }
   91 |   }
   92 |   catch (SqlException exceptSql)
   93 |   {
   94 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   95 |   }
   96 |   finally
   97 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |   {
   79 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |       {
   81 |           badSqlCommand.Connection = dbConnection;
   82 |           dbConnection.Open();
   83 |           for (int i = 0; i < names.Length; i++)
   84 |           {
   85 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   86 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   87 |           }
>  88 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   89 |           successCount += affectedRows;
   90 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   91 |       }
   92 |   }
   93 |   catch (SqlException exceptSql)
   94 |   {
   95 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   96 |   }
   97 |   finally
   98 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |   {
   79 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |       {
   81 |           badSqlCommand.Connection = dbConnection;
   82 |           dbConnection.Open();
   83 |           for (int i = 0; i < names.Length; i++)
   84 |           {
   85 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   86 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   87 |           }
>  88 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   89 |           successCount += affectedRows;
   90 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   91 |       }
   92 |   }
   93 |   catch (SqlException exceptSql)
   94 |   {
   95 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   96 |   }
   97 |   finally
   98 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |   {
   81 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   82 |       {
   83 |           badSqlCommand.Connection = dbConnection;
   84 |           dbConnection.Open();
   85 |           for (int i = 0; i < names.Length; i++)
   86 |           {
   87 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   88 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   89 |           }
>  90 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   91 |           successCount += affectedRows;
   92 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   93 |       }
   94 |   }
   95 |   catch (SqlException exceptSql)
   96 |   {
   97 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   98 |   }
   99 |   finally
  100 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |   {
   74 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |       {
   76 |           badSqlCommand.Connection = dbConnection;
   77 |           dbConnection.Open();
   78 |           for (int i = 0; i < names.Length; i++)
   79 |           {
   80 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   81 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   82 |           }
>  83 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   84 |           successCount += affectedRows;
   85 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   86 |       }
   87 |   }
   88 |   catch (SqlException exceptSql)
   89 |   {
   90 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   91 |   }
   92 |   finally
   93 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |   {
   74 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |       {
   76 |           badSqlCommand.Connection = dbConnection;
   77 |           dbConnection.Open();
   78 |           for (int i = 0; i < names.Length; i++)
   79 |           {
   80 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   81 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   82 |           }
>  83 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   84 |           successCount += affectedRows;
   85 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   86 |       }
   87 |   }
   88 |   catch (SqlException exceptSql)
   89 |   {
   90 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   91 |   }
   92 |   finally
   93 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |   {
   74 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |       {
   76 |           badSqlCommand.Connection = dbConnection;
   77 |           dbConnection.Open();
   78 |           for (int i = 0; i < names.Length; i++)
   79 |           {
   80 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   81 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   82 |           }
>  83 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   84 |           successCount += affectedRows;
   85 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   86 |       }
   87 |   }
   88 |   catch (SqlException exceptSql)
   89 |   {
   90 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   91 |   }
   92 |   finally
   93 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |   {
   74 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |       {
   76 |           badSqlCommand.Connection = dbConnection;
   77 |           dbConnection.Open();
   78 |           for (int i = 0; i < names.Length; i++)
   79 |           {
   80 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   81 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   82 |           }
>  83 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   84 |           successCount += affectedRows;
   85 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   86 |       }
   87 |   }
   88 |   catch (SqlException exceptSql)
   89 |   {
   90 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   91 |   }
   92 |   finally
   93 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |         int? result = null;
   62 |         try
   63 |         {
   64 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   65 |             {
   66 |                 dbConnection.Open();
   67 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   68 |                 {
   69 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   70 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  71 |                     result = badSqlCommand.ExecuteNonQuery();
   72 |                     if (result != null)
   73 |                     {
   74 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   75 |                     }
   76 |                     else
   77 |                     {
   78 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   79 |                     }
   80 |                 }
   81 |             }
      ^ Col 0
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |         int? result = null;
   73 |         try
   74 |         {
   75 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |             {
   77 |                 dbConnection.Open();
   78 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |                 {
   80 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   81 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  82 |                     result = badSqlCommand.ExecuteNonQuery();
   83 |                     if (result != null)
   84 |                     {
   85 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   86 |                     }
   87 |                     else
   88 |                     {
   89 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   90 |                     }
   91 |                 }
   92 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |         int? result = null;
   73 |         try
   74 |         {
   75 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |             {
   77 |                 dbConnection.Open();
   78 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |                 {
   80 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   81 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  82 |                     result = badSqlCommand.ExecuteNonQuery();
   83 |                     if (result != null)
   84 |                     {
   85 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   86 |                     }
   87 |                     else
   88 |                     {
   89 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   90 |                     }
   91 |                 }
   92 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 |         int? result = null;
   80 |         try
   81 |         {
   82 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   83 |             {
   84 |                 dbConnection.Open();
   85 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   86 |                 {
   87 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   88 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  89 |                     result = badSqlCommand.ExecuteNonQuery();
   90 |                     if (result != null)
   91 |                     {
   92 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   93 |                     }
   94 |                     else
   95 |                     {
   96 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   97 |                     }
   98 |                 }
   99 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |         int? result = null;
   79 |         try
   80 |         {
   81 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   82 |             {
   83 |                 dbConnection.Open();
   84 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   85 |                 {
   86 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   87 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  88 |                     result = badSqlCommand.ExecuteNonQuery();
   89 |                     if (result != null)
   90 |                     {
   91 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   92 |                     }
   93 |                     else
   94 |                     {
   95 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   96 |                     }
   97 |                 }
   98 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,87,"
   77 |         int? result = null;
   78 |         try
   79 |         {
   80 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   81 |             {
   82 |                 dbConnection.Open();
   83 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   84 |                 {
   85 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   86 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  87 |                     result = badSqlCommand.ExecuteNonQuery();
   88 |                     if (result != null)
   89 |                     {
   90 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   91 |                     }
   92 |                     else
   93 |                     {
   94 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   95 |                     }
   96 |                 }
   97 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,87,"
   77 |         int? result = null;
   78 |         try
   79 |         {
   80 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   81 |             {
   82 |                 dbConnection.Open();
   83 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   84 |                 {
   85 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   86 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  87 |                     result = badSqlCommand.ExecuteNonQuery();
   88 |                     if (result != null)
   89 |                     {
   90 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   91 |                     }
   92 |                     else
   93 |                     {
   94 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   95 |                     }
   96 |                 }
   97 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |         int? result = null;
   86 |         try
   87 |         {
   88 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |             {
   90 |                 dbConnection.Open();
   91 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   92 |                 {
   93 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   94 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  95 |                     result = badSqlCommand.ExecuteNonQuery();
   96 |                     if (result != null)
   97 |                     {
   98 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   99 |                     }
  100 |                     else
  101 |                     {
  102 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  103 |                     }
  104 |                 }
  105 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |         int? result = null;
   73 |         try
   74 |         {
   75 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |             {
   77 |                 dbConnection.Open();
   78 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |                 {
   80 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   81 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  82 |                     result = badSqlCommand.ExecuteNonQuery();
   83 |                     if (result != null)
   84 |                     {
   85 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   86 |                     }
   87 |                     else
   88 |                     {
   89 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   90 |                     }
   91 |                 }
   92 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |         int? result = null;
   73 |         try
   74 |         {
   75 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |             {
   77 |                 dbConnection.Open();
   78 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |                 {
   80 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   81 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  82 |                     result = badSqlCommand.ExecuteNonQuery();
   83 |                     if (result != null)
   84 |                     {
   85 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   86 |                     }
   87 |                     else
   88 |                     {
   89 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   90 |                     }
   91 |                 }
   92 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |         int? result = null;
   73 |         try
   74 |         {
   75 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |             {
   77 |                 dbConnection.Open();
   78 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |                 {
   80 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   81 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  82 |                     result = badSqlCommand.ExecuteNonQuery();
   83 |                     if (result != null)
   84 |                     {
   85 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   86 |                     }
   87 |                     else
   88 |                     {
   89 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   90 |                     }
   91 |                 }
   92 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,81,"
   71 |         int? result = null;
   72 |         try
   73 |         {
   74 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |             {
   76 |                 dbConnection.Open();
   77 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   78 |                 {
   79 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   80 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  81 |                     result = badSqlCommand.ExecuteNonQuery();
   82 |                     if (result != null)
   83 |                     {
   84 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   85 |                     }
   86 |                     else
   87 |                     {
   88 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   89 |                     }
   90 |                 }
   91 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |         int? result = null;
   73 |         try
   74 |         {
   75 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |             {
   77 |                 dbConnection.Open();
   78 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |                 {
   80 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   81 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  82 |                     result = badSqlCommand.ExecuteNonQuery();
   83 |                     if (result != null)
   84 |                     {
   85 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   86 |                     }
   87 |                     else
   88 |                     {
   89 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   90 |                     }
   91 |                 }
   92 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,82,"
   72 |         int? result = null;
   73 |         try
   74 |         {
   75 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |             {
   77 |                 dbConnection.Open();
   78 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   79 |                 {
   80 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   81 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  82 |                     result = badSqlCommand.ExecuteNonQuery();
   83 |                     if (result != null)
   84 |                     {
   85 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   86 |                     }
   87 |                     else
   88 |                     {
   89 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   90 |                     }
   91 |                 }
   92 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |         int? result = null;
   75 |         try
   76 |         {
   77 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   78 |             {
   79 |                 dbConnection.Open();
   80 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   81 |                 {
   82 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   83 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  84 |                     result = badSqlCommand.ExecuteNonQuery();
   85 |                     if (result != null)
   86 |                     {
   87 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   88 |                     }
   89 |                     else
   90 |                     {
   91 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   92 |                     }
   93 |                 }
   94 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |         int? result = null;
   68 |         try
   69 |         {
   70 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |             {
   72 |                 dbConnection.Open();
   73 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |                 {
   75 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   76 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  77 |                     result = badSqlCommand.ExecuteNonQuery();
   78 |                     if (result != null)
   79 |                     {
   80 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   81 |                     }
   82 |                     else
   83 |                     {
   84 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   85 |                     }
   86 |                 }
   87 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |         int? result = null;
   68 |         try
   69 |         {
   70 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |             {
   72 |                 dbConnection.Open();
   73 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |                 {
   75 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   76 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  77 |                     result = badSqlCommand.ExecuteNonQuery();
   78 |                     if (result != null)
   79 |                     {
   80 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   81 |                     }
   82 |                     else
   83 |                     {
   84 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   85 |                     }
   86 |                 }
   87 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |         int? result = null;
   68 |         try
   69 |         {
   70 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |             {
   72 |                 dbConnection.Open();
   73 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |                 {
   75 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   76 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  77 |                     result = badSqlCommand.ExecuteNonQuery();
   78 |                     if (result != null)
   79 |                     {
   80 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   81 |                     }
   82 |                     else
   83 |                     {
   84 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   85 |                     }
   86 |                 }
   87 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |         int? result = null;
   68 |         try
   69 |         {
   70 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |             {
   72 |                 dbConnection.Open();
   73 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |                 {
   75 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   76 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  77 |                     result = badSqlCommand.ExecuteNonQuery();
   78 |                     if (result != null)
   79 |                     {
   80 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   81 |                     }
   82 |                     else
   83 |                     {
   84 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   85 |                     }
   86 |                 }
   87 |             }
      ^ Col 0
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,70,"
   60 |
   61 | ry
   62 |
   63 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   64 |    {
   65 |        dbConnection.Open();
   66 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   67 |        {
   68 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   69 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  70 |            object firstCol = badSqlCommand.ExecuteScalar();
   71 |            if (firstCol != null)
   72 |            {
   73 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   74 |            }
   75 |        }
   76 |    }
   77 |
   78 | atch (SqlException exceptSql)
   79 |
   80 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 9
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,81,"
   71 |
   72 | ry
   73 |
   74 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |    {
   76 |        dbConnection.Open();
   77 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   78 |        {
   79 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   80 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  81 |            object firstCol = badSqlCommand.ExecuteScalar();
   82 |            if (firstCol != null)
   83 |            {
   84 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   85 |            }
   86 |        }
   87 |    }
   88 |
   89 | atch (SqlException exceptSql)
   90 |
   91 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,81,"
   71 |
   72 | ry
   73 |
   74 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |    {
   76 |        dbConnection.Open();
   77 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   78 |        {
   79 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   80 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  81 |            object firstCol = badSqlCommand.ExecuteScalar();
   82 |            if (firstCol != null)
   83 |            {
   84 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   85 |            }
   86 |        }
   87 |    }
   88 |
   89 | atch (SqlException exceptSql)
   90 |
   91 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,88,"
   78 |
   79 | ry
   80 |
   81 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   82 |    {
   83 |        dbConnection.Open();
   84 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   85 |        {
   86 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   87 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  88 |            object firstCol = badSqlCommand.ExecuteScalar();
   89 |            if (firstCol != null)
   90 |            {
   91 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   92 |            }
   93 |        }
   94 |    }
   95 |
   96 | atch (SqlException exceptSql)
   97 |
   98 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,87,"
   77 |
   78 | ry
   79 |
   80 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   81 |    {
   82 |        dbConnection.Open();
   83 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   84 |        {
   85 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   86 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  87 |            object firstCol = badSqlCommand.ExecuteScalar();
   88 |            if (firstCol != null)
   89 |            {
   90 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   91 |            }
   92 |        }
   93 |    }
   94 |
   95 | atch (SqlException exceptSql)
   96 |
   97 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,86,"
   76 |
   77 | ry
   78 |
   79 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |    {
   81 |        dbConnection.Open();
   82 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   83 |        {
   84 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   85 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  86 |            object firstCol = badSqlCommand.ExecuteScalar();
   87 |            if (firstCol != null)
   88 |            {
   89 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   90 |            }
   91 |        }
   92 |    }
   93 |
   94 | atch (SqlException exceptSql)
   95 |
   96 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,86,"
   76 |
   77 | ry
   78 |
   79 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   80 |    {
   81 |        dbConnection.Open();
   82 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   83 |        {
   84 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   85 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  86 |            object firstCol = badSqlCommand.ExecuteScalar();
   87 |            if (firstCol != null)
   88 |            {
   89 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   90 |            }
   91 |        }
   92 |    }
   93 |
   94 | atch (SqlException exceptSql)
   95 |
   96 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |
   85 | ry
   86 |
   87 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |    {
   89 |        dbConnection.Open();
   90 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |        {
   92 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   93 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  94 |            object firstCol = badSqlCommand.ExecuteScalar();
   95 |            if (firstCol != null)
   96 |            {
   97 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   98 |            }
   99 |        }
  100 |    }
  101 |
  102 | atch (SqlException exceptSql)
  103 |
  104 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,81,"
   71 |
   72 | ry
   73 |
   74 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |    {
   76 |        dbConnection.Open();
   77 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   78 |        {
   79 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   80 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  81 |            object firstCol = badSqlCommand.ExecuteScalar();
   82 |            if (firstCol != null)
   83 |            {
   84 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   85 |            }
   86 |        }
   87 |    }
   88 |
   89 | atch (SqlException exceptSql)
   90 |
   91 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,81,"
   71 |
   72 | ry
   73 |
   74 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |    {
   76 |        dbConnection.Open();
   77 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   78 |        {
   79 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   80 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  81 |            object firstCol = badSqlCommand.ExecuteScalar();
   82 |            if (firstCol != null)
   83 |            {
   84 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   85 |            }
   86 |        }
   87 |    }
   88 |
   89 | atch (SqlException exceptSql)
   90 |
   91 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,81,"
   71 |
   72 | ry
   73 |
   74 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |    {
   76 |        dbConnection.Open();
   77 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   78 |        {
   79 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   80 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  81 |            object firstCol = badSqlCommand.ExecuteScalar();
   82 |            if (firstCol != null)
   83 |            {
   84 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   85 |            }
   86 |        }
   87 |    }
   88 |
   89 | atch (SqlException exceptSql)
   90 |
   91 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,80,"
   70 |
   71 | ry
   72 |
   73 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   74 |    {
   75 |        dbConnection.Open();
   76 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   77 |        {
   78 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   79 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  80 |            object firstCol = badSqlCommand.ExecuteScalar();
   81 |            if (firstCol != null)
   82 |            {
   83 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   84 |            }
   85 |        }
   86 |    }
   87 |
   88 | atch (SqlException exceptSql)
   89 |
   90 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,81,"
   71 |
   72 | ry
   73 |
   74 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |    {
   76 |        dbConnection.Open();
   77 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   78 |        {
   79 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   80 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  81 |            object firstCol = badSqlCommand.ExecuteScalar();
   82 |            if (firstCol != null)
   83 |            {
   84 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   85 |            }
   86 |        }
   87 |    }
   88 |
   89 | atch (SqlException exceptSql)
   90 |
   91 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,81,"
   71 |
   72 | ry
   73 |
   74 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |    {
   76 |        dbConnection.Open();
   77 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   78 |        {
   79 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   80 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  81 |            object firstCol = badSqlCommand.ExecuteScalar();
   82 |            if (firstCol != null)
   83 |            {
   84 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   85 |            }
   86 |        }
   87 |    }
   88 |
   89 | atch (SqlException exceptSql)
   90 |
   91 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 | 7:
   74 | ry
   75 |
   76 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   77 |    {
   78 |        dbConnection.Open();
   79 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   80 |        {
   81 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   82 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  83 |            object firstCol = badSqlCommand.ExecuteScalar();
   84 |            if (firstCol != null)
   85 |            {
   86 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   87 |            }
   88 |        }
   89 |    }
   90 |
   91 | atch (SqlException exceptSql)
   92 |
   93 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,76,"
   66 |
   67 | ry
   68 |
   69 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   70 |    {
   71 |        dbConnection.Open();
   72 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   73 |        {
   74 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   75 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  76 |            object firstCol = badSqlCommand.ExecuteScalar();
   77 |            if (firstCol != null)
   78 |            {
   79 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   80 |            }
   81 |        }
   82 |    }
   83 |
   84 | atch (SqlException exceptSql)
   85 |
   86 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,76,"
   66 |
   67 | ry
   68 |
   69 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   70 |    {
   71 |        dbConnection.Open();
   72 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   73 |        {
   74 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   75 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  76 |            object firstCol = badSqlCommand.ExecuteScalar();
   77 |            if (firstCol != null)
   78 |            {
   79 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   80 |            }
   81 |        }
   82 |    }
   83 |
   84 | atch (SqlException exceptSql)
   85 |
   86 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,76,"
   66 | tring data = dataCopy;
   67 | ry
   68 |
   69 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   70 |    {
   71 |        dbConnection.Open();
   72 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   73 |        {
   74 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   75 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  76 |            object firstCol = badSqlCommand.ExecuteScalar();
   77 |            if (firstCol != null)
   78 |            {
   79 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   80 |            }
   81 |        }
   82 |    }
   83 |
   84 | atch (SqlException exceptSql)
   85 |
   86 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,76,"
   66 | tring data = BadSource(req, resp);
   67 | ry
   68 |
   69 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   70 |    {
   71 |        dbConnection.Open();
   72 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   73 |        {
   74 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   75 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  76 |            object firstCol = badSqlCommand.ExecuteScalar();
   77 |            if (firstCol != null)
   78 |            {
   79 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   80 |            }
   81 |        }
   82 |    }
   83 |
   84 | atch (SqlException exceptSql)
   85 |
   86 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 9
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,60,"
   50 |   {
   51 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   52 |       {
   53 |           badSqlCommand.Connection = dbConnection;
   54 |           dbConnection.Open();
   55 |           for (int i = 0; i < names.Length; i++)
   56 |           {
   57 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   58 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   59 |           }
>  60 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   61 |           successCount += affectedRows;
   62 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   63 |       }
   64 |   }
   65 |   catch (SqlException exceptSql)
   66 |   {
   67 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   68 |   }
   69 |   finally
   70 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |   {
   62 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |       {
   64 |           badSqlCommand.Connection = dbConnection;
   65 |           dbConnection.Open();
   66 |           for (int i = 0; i < names.Length; i++)
   67 |           {
   68 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   69 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   70 |           }
>  71 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   72 |           successCount += affectedRows;
   73 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   74 |       }
   75 |   }
   76 |   catch (SqlException exceptSql)
   77 |   {
   78 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   79 |   }
   80 |   finally
   81 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |   {
   62 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |       {
   64 |           badSqlCommand.Connection = dbConnection;
   65 |           dbConnection.Open();
   66 |           for (int i = 0; i < names.Length; i++)
   67 |           {
   68 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   69 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   70 |           }
>  71 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   72 |           successCount += affectedRows;
   73 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   74 |       }
   75 |   }
   76 |   catch (SqlException exceptSql)
   77 |   {
   78 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   79 |   }
   80 |   finally
   81 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |   {
   69 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   70 |       {
   71 |           badSqlCommand.Connection = dbConnection;
   72 |           dbConnection.Open();
   73 |           for (int i = 0; i < names.Length; i++)
   74 |           {
   75 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   76 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   77 |           }
>  78 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   79 |           successCount += affectedRows;
   80 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   81 |       }
   82 |   }
   83 |   catch (SqlException exceptSql)
   84 |   {
   85 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   86 |   }
   87 |   finally
   88 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |   {
   68 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   69 |       {
   70 |           badSqlCommand.Connection = dbConnection;
   71 |           dbConnection.Open();
   72 |           for (int i = 0; i < names.Length; i++)
   73 |           {
   74 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   75 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   76 |           }
>  77 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   78 |           successCount += affectedRows;
   79 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   80 |       }
   81 |   }
   82 |   catch (SqlException exceptSql)
   83 |   {
   84 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   85 |   }
   86 |   finally
   87 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,76,"
   66 |   {
   67 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   68 |       {
   69 |           badSqlCommand.Connection = dbConnection;
   70 |           dbConnection.Open();
   71 |           for (int i = 0; i < names.Length; i++)
   72 |           {
   73 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   74 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   75 |           }
>  76 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   77 |           successCount += affectedRows;
   78 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   79 |       }
   80 |   }
   81 |   catch (SqlException exceptSql)
   82 |   {
   83 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   84 |   }
   85 |   finally
   86 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,76,"
   66 |   {
   67 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   68 |       {
   69 |           badSqlCommand.Connection = dbConnection;
   70 |           dbConnection.Open();
   71 |           for (int i = 0; i < names.Length; i++)
   72 |           {
   73 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   74 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   75 |           }
>  76 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   77 |           successCount += affectedRows;
   78 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   79 |       }
   80 |   }
   81 |   catch (SqlException exceptSql)
   82 |   {
   83 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   84 |   }
   85 |   finally
   86 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |   {
   62 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |       {
   64 |           badSqlCommand.Connection = dbConnection;
   65 |           dbConnection.Open();
   66 |           for (int i = 0; i < names.Length; i++)
   67 |           {
   68 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   69 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   70 |           }
>  71 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   72 |           successCount += affectedRows;
   73 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   74 |       }
   75 |   }
   76 |   catch (SqlException exceptSql)
   77 |   {
   78 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   79 |   }
   80 |   finally
   81 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |   {
   62 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |       {
   64 |           badSqlCommand.Connection = dbConnection;
   65 |           dbConnection.Open();
   66 |           for (int i = 0; i < names.Length; i++)
   67 |           {
   68 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   69 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   70 |           }
>  71 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   72 |           successCount += affectedRows;
   73 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   74 |       }
   75 |   }
   76 |   catch (SqlException exceptSql)
   77 |   {
   78 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   79 |   }
   80 |   finally
   81 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |   {
   62 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |       {
   64 |           badSqlCommand.Connection = dbConnection;
   65 |           dbConnection.Open();
   66 |           for (int i = 0; i < names.Length; i++)
   67 |           {
   68 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   69 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   70 |           }
>  71 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   72 |           successCount += affectedRows;
   73 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   74 |       }
   75 |   }
   76 |   catch (SqlException exceptSql)
   77 |   {
   78 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   79 |   }
   80 |   finally
   81 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,70,"
   60 |   {
   61 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   62 |       {
   63 |           badSqlCommand.Connection = dbConnection;
   64 |           dbConnection.Open();
   65 |           for (int i = 0; i < names.Length; i++)
   66 |           {
   67 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   68 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   69 |           }
>  70 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   71 |           successCount += affectedRows;
   72 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   73 |       }
   74 |   }
   75 |   catch (SqlException exceptSql)
   76 |   {
   77 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   78 |   }
   79 |   finally
   80 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |   {
   62 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |       {
   64 |           badSqlCommand.Connection = dbConnection;
   65 |           dbConnection.Open();
   66 |           for (int i = 0; i < names.Length; i++)
   67 |           {
   68 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   69 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   70 |           }
>  71 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   72 |           successCount += affectedRows;
   73 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   74 |       }
   75 |   }
   76 |   catch (SqlException exceptSql)
   77 |   {
   78 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   79 |   }
   80 |   finally
   81 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |   {
   62 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |       {
   64 |           badSqlCommand.Connection = dbConnection;
   65 |           dbConnection.Open();
   66 |           for (int i = 0; i < names.Length; i++)
   67 |           {
   68 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   69 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   70 |           }
>  71 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   72 |           successCount += affectedRows;
   73 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   74 |       }
   75 |   }
   76 |   catch (SqlException exceptSql)
   77 |   {
   78 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   79 |   }
   80 |   finally
   81 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,73,"
   63 |   {
   64 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   65 |       {
   66 |           badSqlCommand.Connection = dbConnection;
   67 |           dbConnection.Open();
   68 |           for (int i = 0; i < names.Length; i++)
   69 |           {
   70 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   71 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   72 |           }
>  73 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   74 |           successCount += affectedRows;
   75 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   76 |       }
   77 |   }
   78 |   catch (SqlException exceptSql)
   79 |   {
   80 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   81 |   }
   82 |   finally
   83 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,66,"
   56 |   {
   57 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |       {
   59 |           badSqlCommand.Connection = dbConnection;
   60 |           dbConnection.Open();
   61 |           for (int i = 0; i < names.Length; i++)
   62 |           {
   63 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   64 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   65 |           }
>  66 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   67 |           successCount += affectedRows;
   68 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   69 |       }
   70 |   }
   71 |   catch (SqlException exceptSql)
   72 |   {
   73 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   74 |   }
   75 |   finally
   76 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,66,"
   56 |   {
   57 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |       {
   59 |           badSqlCommand.Connection = dbConnection;
   60 |           dbConnection.Open();
   61 |           for (int i = 0; i < names.Length; i++)
   62 |           {
   63 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   64 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   65 |           }
>  66 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   67 |           successCount += affectedRows;
   68 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   69 |       }
   70 |   }
   71 |   catch (SqlException exceptSql)
   72 |   {
   73 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   74 |   }
   75 |   finally
   76 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,66,"
   56 |   {
   57 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |       {
   59 |           badSqlCommand.Connection = dbConnection;
   60 |           dbConnection.Open();
   61 |           for (int i = 0; i < names.Length; i++)
   62 |           {
   63 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   64 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   65 |           }
>  66 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   67 |           successCount += affectedRows;
   68 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   69 |       }
   70 |   }
   71 |   catch (SqlException exceptSql)
   72 |   {
   73 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   74 |   }
   75 |   finally
   76 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,66,"
   56 |   {
   57 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |       {
   59 |           badSqlCommand.Connection = dbConnection;
   60 |           dbConnection.Open();
   61 |           for (int i = 0; i < names.Length; i++)
   62 |           {
   63 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   64 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   65 |           }
>  66 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   67 |           successCount += affectedRows;
   68 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   69 |       }
   70 |   }
   71 |   catch (SqlException exceptSql)
   72 |   {
   73 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   74 |   }
   75 |   finally
   76 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,54,"
   44 |         int? result = null;
   45 |         try
   46 |         {
   47 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   48 |             {
   49 |                 dbConnection.Open();
   50 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   51 |                 {
   52 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   53 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  54 |                     result = badSqlCommand.ExecuteNonQuery();
   55 |                     if (result != null)
   56 |                     {
   57 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   58 |                     }
   59 |                     else
   60 |                     {
   61 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   62 |                     }
   63 |                 }
   64 |             }
      ^ Col 0
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,65,"
   55 |         int? result = null;
   56 |         try
   57 |         {
   58 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   59 |             {
   60 |                 dbConnection.Open();
   61 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   62 |                 {
   63 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   64 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  65 |                     result = badSqlCommand.ExecuteNonQuery();
   66 |                     if (result != null)
   67 |                     {
   68 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   69 |                     }
   70 |                     else
   71 |                     {
   72 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   73 |                     }
   74 |                 }
   75 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,65,"
   55 |         int? result = null;
   56 |         try
   57 |         {
   58 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   59 |             {
   60 |                 dbConnection.Open();
   61 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   62 |                 {
   63 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   64 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  65 |                     result = badSqlCommand.ExecuteNonQuery();
   66 |                     if (result != null)
   67 |                     {
   68 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   69 |                     }
   70 |                     else
   71 |                     {
   72 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   73 |                     }
   74 |                 }
   75 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,72,"
   62 |         int? result = null;
   63 |         try
   64 |         {
   65 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   66 |             {
   67 |                 dbConnection.Open();
   68 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   69 |                 {
   70 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   71 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  72 |                     result = badSqlCommand.ExecuteNonQuery();
   73 |                     if (result != null)
   74 |                     {
   75 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   76 |                     }
   77 |                     else
   78 |                     {
   79 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   80 |                     }
   81 |                 }
   82 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |         int? result = null;
   62 |         try
   63 |         {
   64 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   65 |             {
   66 |                 dbConnection.Open();
   67 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   68 |                 {
   69 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   70 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  71 |                     result = badSqlCommand.ExecuteNonQuery();
   72 |                     if (result != null)
   73 |                     {
   74 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   75 |                     }
   76 |                     else
   77 |                     {
   78 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   79 |                     }
   80 |                 }
   81 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,70,"
   60 |         int? result = null;
   61 |         try
   62 |         {
   63 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   64 |             {
   65 |                 dbConnection.Open();
   66 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   67 |                 {
   68 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   69 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  70 |                     result = badSqlCommand.ExecuteNonQuery();
   71 |                     if (result != null)
   72 |                     {
   73 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   74 |                     }
   75 |                     else
   76 |                     {
   77 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   78 |                     }
   79 |                 }
   80 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,70,"
   60 |         int? result = null;
   61 |         try
   62 |         {
   63 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   64 |             {
   65 |                 dbConnection.Open();
   66 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   67 |                 {
   68 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   69 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  70 |                     result = badSqlCommand.ExecuteNonQuery();
   71 |                     if (result != null)
   72 |                     {
   73 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   74 |                     }
   75 |                     else
   76 |                     {
   77 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   78 |                     }
   79 |                 }
   80 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,78,"
   68 |         int? result = null;
   69 |         try
   70 |         {
   71 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   72 |             {
   73 |                 dbConnection.Open();
   74 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   75 |                 {
   76 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   77 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  78 |                     result = badSqlCommand.ExecuteNonQuery();
   79 |                     if (result != null)
   80 |                     {
   81 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   82 |                     }
   83 |                     else
   84 |                     {
   85 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   86 |                     }
   87 |                 }
   88 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,65,"
   55 |         int? result = null;
   56 |         try
   57 |         {
   58 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   59 |             {
   60 |                 dbConnection.Open();
   61 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   62 |                 {
   63 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   64 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  65 |                     result = badSqlCommand.ExecuteNonQuery();
   66 |                     if (result != null)
   67 |                     {
   68 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   69 |                     }
   70 |                     else
   71 |                     {
   72 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   73 |                     }
   74 |                 }
   75 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,65,"
   55 |         int? result = null;
   56 |         try
   57 |         {
   58 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   59 |             {
   60 |                 dbConnection.Open();
   61 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   62 |                 {
   63 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   64 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  65 |                     result = badSqlCommand.ExecuteNonQuery();
   66 |                     if (result != null)
   67 |                     {
   68 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   69 |                     }
   70 |                     else
   71 |                     {
   72 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   73 |                     }
   74 |                 }
   75 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,65,"
   55 |         int? result = null;
   56 |         try
   57 |         {
   58 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   59 |             {
   60 |                 dbConnection.Open();
   61 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   62 |                 {
   63 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   64 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  65 |                     result = badSqlCommand.ExecuteNonQuery();
   66 |                     if (result != null)
   67 |                     {
   68 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   69 |                     }
   70 |                     else
   71 |                     {
   72 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   73 |                     }
   74 |                 }
   75 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,64,"
   54 |         int? result = null;
   55 |         try
   56 |         {
   57 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |             {
   59 |                 dbConnection.Open();
   60 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   61 |                 {
   62 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   63 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  64 |                     result = badSqlCommand.ExecuteNonQuery();
   65 |                     if (result != null)
   66 |                     {
   67 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   68 |                     }
   69 |                     else
   70 |                     {
   71 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   72 |                     }
   73 |                 }
   74 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,65,"
   55 |         int? result = null;
   56 |         try
   57 |         {
   58 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   59 |             {
   60 |                 dbConnection.Open();
   61 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   62 |                 {
   63 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   64 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  65 |                     result = badSqlCommand.ExecuteNonQuery();
   66 |                     if (result != null)
   67 |                     {
   68 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   69 |                     }
   70 |                     else
   71 |                     {
   72 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   73 |                     }
   74 |                 }
   75 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,65,"
   55 |         int? result = null;
   56 |         try
   57 |         {
   58 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   59 |             {
   60 |                 dbConnection.Open();
   61 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   62 |                 {
   63 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   64 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  65 |                     result = badSqlCommand.ExecuteNonQuery();
   66 |                     if (result != null)
   67 |                     {
   68 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   69 |                     }
   70 |                     else
   71 |                     {
   72 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   73 |                     }
   74 |                 }
   75 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,67,"
   57 |         int? result = null;
   58 |         try
   59 |         {
   60 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   61 |             {
   62 |                 dbConnection.Open();
   63 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   64 |                 {
   65 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   66 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  67 |                     result = badSqlCommand.ExecuteNonQuery();
   68 |                     if (result != null)
   69 |                     {
   70 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   71 |                     }
   72 |                     else
   73 |                     {
   74 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   75 |                     }
   76 |                 }
   77 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,60,"
   50 |         int? result = null;
   51 |         try
   52 |         {
   53 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   54 |             {
   55 |                 dbConnection.Open();
   56 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   57 |                 {
   58 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   59 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  60 |                     result = badSqlCommand.ExecuteNonQuery();
   61 |                     if (result != null)
   62 |                     {
   63 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   64 |                     }
   65 |                     else
   66 |                     {
   67 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   68 |                     }
   69 |                 }
   70 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,60,"
   50 |         int? result = null;
   51 |         try
   52 |         {
   53 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   54 |             {
   55 |                 dbConnection.Open();
   56 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   57 |                 {
   58 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   59 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  60 |                     result = badSqlCommand.ExecuteNonQuery();
   61 |                     if (result != null)
   62 |                     {
   63 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   64 |                     }
   65 |                     else
   66 |                     {
   67 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   68 |                     }
   69 |                 }
   70 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,60,"
   50 |         int? result = null;
   51 |         try
   52 |         {
   53 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   54 |             {
   55 |                 dbConnection.Open();
   56 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   57 |                 {
   58 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   59 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  60 |                     result = badSqlCommand.ExecuteNonQuery();
   61 |                     if (result != null)
   62 |                     {
   63 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   64 |                     }
   65 |                     else
   66 |                     {
   67 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   68 |                     }
   69 |                 }
   70 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,60,"
   50 |         int? result = null;
   51 |         try
   52 |         {
   53 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   54 |             {
   55 |                 dbConnection.Open();
   56 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   57 |                 {
   58 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   59 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  60 |                     result = badSqlCommand.ExecuteNonQuery();
   61 |                     if (result != null)
   62 |                     {
   63 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   64 |                     }
   65 |                     else
   66 |                     {
   67 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   68 |                     }
   69 |                 }
   70 |             }
      ^ Col 0
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,53,"
   43 |
   44 | ry
   45 |
   46 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   47 |    {
   48 |        dbConnection.Open();
   49 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   50 |        {
   51 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   52 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  53 |            object firstCol = badSqlCommand.ExecuteScalar();
   54 |            if (firstCol != null)
   55 |            {
   56 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   57 |            }
   58 |        }
   59 |    }
   60 |
   61 | atch (SqlException exceptSql)
   62 |
   63 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 9
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,64,"
   54 |
   55 | ry
   56 |
   57 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |    {
   59 |        dbConnection.Open();
   60 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   61 |        {
   62 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   63 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  64 |            object firstCol = badSqlCommand.ExecuteScalar();
   65 |            if (firstCol != null)
   66 |            {
   67 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   68 |            }
   69 |        }
   70 |    }
   71 |
   72 | atch (SqlException exceptSql)
   73 |
   74 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,64,"
   54 |
   55 | ry
   56 |
   57 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |    {
   59 |        dbConnection.Open();
   60 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   61 |        {
   62 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   63 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  64 |            object firstCol = badSqlCommand.ExecuteScalar();
   65 |            if (firstCol != null)
   66 |            {
   67 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   68 |            }
   69 |        }
   70 |    }
   71 |
   72 | atch (SqlException exceptSql)
   73 |
   74 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,71,"
   61 |
   62 | ry
   63 |
   64 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   65 |    {
   66 |        dbConnection.Open();
   67 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   68 |        {
   69 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   70 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  71 |            object firstCol = badSqlCommand.ExecuteScalar();
   72 |            if (firstCol != null)
   73 |            {
   74 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   75 |            }
   76 |        }
   77 |    }
   78 |
   79 | atch (SqlException exceptSql)
   80 |
   81 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,70,"
   60 |
   61 | ry
   62 |
   63 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   64 |    {
   65 |        dbConnection.Open();
   66 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   67 |        {
   68 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   69 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  70 |            object firstCol = badSqlCommand.ExecuteScalar();
   71 |            if (firstCol != null)
   72 |            {
   73 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   74 |            }
   75 |        }
   76 |    }
   77 |
   78 | atch (SqlException exceptSql)
   79 |
   80 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,69,"
   59 |
   60 | ry
   61 |
   62 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |    {
   64 |        dbConnection.Open();
   65 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   66 |        {
   67 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   68 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  69 |            object firstCol = badSqlCommand.ExecuteScalar();
   70 |            if (firstCol != null)
   71 |            {
   72 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   73 |            }
   74 |        }
   75 |    }
   76 |
   77 | atch (SqlException exceptSql)
   78 |
   79 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,69,"
   59 |
   60 | ry
   61 |
   62 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   63 |    {
   64 |        dbConnection.Open();
   65 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   66 |        {
   67 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   68 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  69 |            object firstCol = badSqlCommand.ExecuteScalar();
   70 |            if (firstCol != null)
   71 |            {
   72 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   73 |            }
   74 |        }
   75 |    }
   76 |
   77 | atch (SqlException exceptSql)
   78 |
   79 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,77,"
   67 |
   68 | ry
   69 |
   70 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |    {
   72 |        dbConnection.Open();
   73 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   74 |        {
   75 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   76 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  77 |            object firstCol = badSqlCommand.ExecuteScalar();
   78 |            if (firstCol != null)
   79 |            {
   80 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   81 |            }
   82 |        }
   83 |    }
   84 |
   85 | atch (SqlException exceptSql)
   86 |
   87 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,64,"
   54 |
   55 | ry
   56 |
   57 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |    {
   59 |        dbConnection.Open();
   60 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   61 |        {
   62 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   63 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  64 |            object firstCol = badSqlCommand.ExecuteScalar();
   65 |            if (firstCol != null)
   66 |            {
   67 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   68 |            }
   69 |        }
   70 |    }
   71 |
   72 | atch (SqlException exceptSql)
   73 |
   74 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,64,"
   54 |
   55 | ry
   56 |
   57 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |    {
   59 |        dbConnection.Open();
   60 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   61 |        {
   62 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   63 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  64 |            object firstCol = badSqlCommand.ExecuteScalar();
   65 |            if (firstCol != null)
   66 |            {
   67 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   68 |            }
   69 |        }
   70 |    }
   71 |
   72 | atch (SqlException exceptSql)
   73 |
   74 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,64,"
   54 |
   55 | ry
   56 |
   57 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |    {
   59 |        dbConnection.Open();
   60 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   61 |        {
   62 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   63 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  64 |            object firstCol = badSqlCommand.ExecuteScalar();
   65 |            if (firstCol != null)
   66 |            {
   67 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   68 |            }
   69 |        }
   70 |    }
   71 |
   72 | atch (SqlException exceptSql)
   73 |
   74 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,63,"
   53 |
   54 | ry
   55 |
   56 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   57 |    {
   58 |        dbConnection.Open();
   59 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   60 |        {
   61 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   62 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  63 |            object firstCol = badSqlCommand.ExecuteScalar();
   64 |            if (firstCol != null)
   65 |            {
   66 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   67 |            }
   68 |        }
   69 |    }
   70 |
   71 | atch (SqlException exceptSql)
   72 |
   73 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,64,"
   54 |
   55 | ry
   56 |
   57 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |    {
   59 |        dbConnection.Open();
   60 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   61 |        {
   62 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   63 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  64 |            object firstCol = badSqlCommand.ExecuteScalar();
   65 |            if (firstCol != null)
   66 |            {
   67 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   68 |            }
   69 |        }
   70 |    }
   71 |
   72 | atch (SqlException exceptSql)
   73 |
   74 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,64,"
   54 |
   55 | ry
   56 |
   57 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   58 |    {
   59 |        dbConnection.Open();
   60 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   61 |        {
   62 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   63 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  64 |            object firstCol = badSqlCommand.ExecuteScalar();
   65 |            if (firstCol != null)
   66 |            {
   67 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   68 |            }
   69 |        }
   70 |    }
   71 |
   72 | atch (SqlException exceptSql)
   73 |
   74 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,66,"
   56 | 7:
   57 | ry
   58 |
   59 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   60 |    {
   61 |        dbConnection.Open();
   62 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   63 |        {
   64 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   65 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  66 |            object firstCol = badSqlCommand.ExecuteScalar();
   67 |            if (firstCol != null)
   68 |            {
   69 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   70 |            }
   71 |        }
   72 |    }
   73 |
   74 | atch (SqlException exceptSql)
   75 |
   76 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,59,"
   49 |
   50 | ry
   51 |
   52 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   53 |    {
   54 |        dbConnection.Open();
   55 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   56 |        {
   57 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   58 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  59 |            object firstCol = badSqlCommand.ExecuteScalar();
   60 |            if (firstCol != null)
   61 |            {
   62 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   63 |            }
   64 |        }
   65 |    }
   66 |
   67 | atch (SqlException exceptSql)
   68 |
   69 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,59,"
   49 |
   50 | ry
   51 |
   52 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   53 |    {
   54 |        dbConnection.Open();
   55 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   56 |        {
   57 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   58 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  59 |            object firstCol = badSqlCommand.ExecuteScalar();
   60 |            if (firstCol != null)
   61 |            {
   62 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   63 |            }
   64 |        }
   65 |    }
   66 |
   67 | atch (SqlException exceptSql)
   68 |
   69 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,59,"
   49 | tring data = dataCopy;
   50 | ry
   51 |
   52 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   53 |    {
   54 |        dbConnection.Open();
   55 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   56 |        {
   57 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   58 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  59 |            object firstCol = badSqlCommand.ExecuteScalar();
   60 |            if (firstCol != null)
   61 |            {
   62 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   63 |            }
   64 |        }
   65 |    }
   66 |
   67 | atch (SqlException exceptSql)
   68 |
   69 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,59,"
   49 | tring data = BadSource(req, resp);
   50 | ry
   51 |
   52 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   53 |    {
   54 |        dbConnection.Open();
   55 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   56 |        {
   57 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   58 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  59 |            object firstCol = badSqlCommand.ExecuteScalar();
   60 |            if (firstCol != null)
   61 |            {
   62 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   63 |            }
   64 |        }
   65 |    }
   66 |
   67 | atch (SqlException exceptSql)
   68 |
   69 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 9
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |   {
   81 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   82 |       {
   83 |           badSqlCommand.Connection = dbConnection;
   84 |           dbConnection.Open();
   85 |           for (int i = 0; i < names.Length; i++)
   86 |           {
   87 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   88 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   89 |           }
>  90 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   91 |           successCount += affectedRows;
   92 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   93 |       }
   94 |   }
   95 |   catch (SqlException exceptSql)
   96 |   {
   97 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   98 |   }
   99 |   finally
  100 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |   {
   92 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |       {
   94 |           badSqlCommand.Connection = dbConnection;
   95 |           dbConnection.Open();
   96 |           for (int i = 0; i < names.Length; i++)
   97 |           {
   98 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   99 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  100 |           }
> 101 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  102 |           successCount += affectedRows;
  103 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  104 |       }
  105 |   }
  106 |   catch (SqlException exceptSql)
  107 |   {
  108 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  109 |   }
  110 |   finally
  111 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |   {
   92 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |       {
   94 |           badSqlCommand.Connection = dbConnection;
   95 |           dbConnection.Open();
   96 |           for (int i = 0; i < names.Length; i++)
   97 |           {
   98 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   99 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  100 |           }
> 101 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  102 |           successCount += affectedRows;
  103 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  104 |       }
  105 |   }
  106 |   catch (SqlException exceptSql)
  107 |   {
  108 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  109 |   }
  110 |   finally
  111 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,108,"
   98 |   {
   99 |       using (SqlConnection dbConnection = IO.GetDBConnection())
  100 |       {
  101 |           badSqlCommand.Connection = dbConnection;
  102 |           dbConnection.Open();
  103 |           for (int i = 0; i < names.Length; i++)
  104 |           {
  105 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
  106 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  107 |           }
> 108 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  109 |           successCount += affectedRows;
  110 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  111 |       }
  112 |   }
  113 |   catch (SqlException exceptSql)
  114 |   {
  115 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  116 |   }
  117 |   finally
  118 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,107,"
   97 |   {
   98 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   99 |       {
  100 |           badSqlCommand.Connection = dbConnection;
  101 |           dbConnection.Open();
  102 |           for (int i = 0; i < names.Length; i++)
  103 |           {
  104 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
  105 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  106 |           }
> 107 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  108 |           successCount += affectedRows;
  109 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  110 |       }
  111 |   }
  112 |   catch (SqlException exceptSql)
  113 |   {
  114 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  115 |   }
  116 |   finally
  117 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,106,"
   96 |   {
   97 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   98 |       {
   99 |           badSqlCommand.Connection = dbConnection;
  100 |           dbConnection.Open();
  101 |           for (int i = 0; i < names.Length; i++)
  102 |           {
  103 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
  104 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  105 |           }
> 106 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  107 |           successCount += affectedRows;
  108 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  109 |       }
  110 |   }
  111 |   catch (SqlException exceptSql)
  112 |   {
  113 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  114 |   }
  115 |   finally
  116 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,106,"
   96 |   {
   97 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   98 |       {
   99 |           badSqlCommand.Connection = dbConnection;
  100 |           dbConnection.Open();
  101 |           for (int i = 0; i < names.Length; i++)
  102 |           {
  103 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
  104 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  105 |           }
> 106 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  107 |           successCount += affectedRows;
  108 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  109 |       }
  110 |   }
  111 |   catch (SqlException exceptSql)
  112 |   {
  113 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  114 |   }
  115 |   finally
  116 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,114,"
  104 |   {
  105 |       using (SqlConnection dbConnection = IO.GetDBConnection())
  106 |       {
  107 |           badSqlCommand.Connection = dbConnection;
  108 |           dbConnection.Open();
  109 |           for (int i = 0; i < names.Length; i++)
  110 |           {
  111 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
  112 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  113 |           }
> 114 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  115 |           successCount += affectedRows;
  116 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  117 |       }
  118 |   }
  119 |   catch (SqlException exceptSql)
  120 |   {
  121 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  122 |   }
  123 |   finally
  124 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |   {
   92 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |       {
   94 |           badSqlCommand.Connection = dbConnection;
   95 |           dbConnection.Open();
   96 |           for (int i = 0; i < names.Length; i++)
   97 |           {
   98 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   99 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  100 |           }
> 101 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  102 |           successCount += affectedRows;
  103 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  104 |       }
  105 |   }
  106 |   catch (SqlException exceptSql)
  107 |   {
  108 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  109 |   }
  110 |   finally
  111 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |   {
   92 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |       {
   94 |           badSqlCommand.Connection = dbConnection;
   95 |           dbConnection.Open();
   96 |           for (int i = 0; i < names.Length; i++)
   97 |           {
   98 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   99 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  100 |           }
> 101 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  102 |           successCount += affectedRows;
  103 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  104 |       }
  105 |   }
  106 |   catch (SqlException exceptSql)
  107 |   {
  108 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  109 |   }
  110 |   finally
  111 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |   {
   92 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |       {
   94 |           badSqlCommand.Connection = dbConnection;
   95 |           dbConnection.Open();
   96 |           for (int i = 0; i < names.Length; i++)
   97 |           {
   98 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   99 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  100 |           }
> 101 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  102 |           successCount += affectedRows;
  103 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  104 |       }
  105 |   }
  106 |   catch (SqlException exceptSql)
  107 |   {
  108 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  109 |   }
  110 |   finally
  111 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,100,"
   90 |   {
   91 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   92 |       {
   93 |           badSqlCommand.Connection = dbConnection;
   94 |           dbConnection.Open();
   95 |           for (int i = 0; i < names.Length; i++)
   96 |           {
   97 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   98 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   99 |           }
> 100 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  101 |           successCount += affectedRows;
  102 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  103 |       }
  104 |   }
  105 |   catch (SqlException exceptSql)
  106 |   {
  107 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  108 |   }
  109 |   finally
  110 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |   {
   92 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |       {
   94 |           badSqlCommand.Connection = dbConnection;
   95 |           dbConnection.Open();
   96 |           for (int i = 0; i < names.Length; i++)
   97 |           {
   98 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   99 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  100 |           }
> 101 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  102 |           successCount += affectedRows;
  103 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  104 |       }
  105 |   }
  106 |   catch (SqlException exceptSql)
  107 |   {
  108 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  109 |   }
  110 |   finally
  111 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |   {
   92 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |       {
   94 |           badSqlCommand.Connection = dbConnection;
   95 |           dbConnection.Open();
   96 |           for (int i = 0; i < names.Length; i++)
   97 |           {
   98 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   99 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  100 |           }
> 101 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  102 |           successCount += affectedRows;
  103 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  104 |       }
  105 |   }
  106 |   catch (SqlException exceptSql)
  107 |   {
  108 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  109 |   }
  110 |   finally
  111 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,103,"
   93 |   {
   94 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   95 |       {
   96 |           badSqlCommand.Connection = dbConnection;
   97 |           dbConnection.Open();
   98 |           for (int i = 0; i < names.Length; i++)
   99 |           {
  100 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
  101 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
  102 |           }
> 103 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  104 |           successCount += affectedRows;
  105 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  106 |       }
  107 |   }
  108 |   catch (SqlException exceptSql)
  109 |   {
  110 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  111 |   }
  112 |   finally
  113 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,96,"
   86 |   {
   87 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |       {
   89 |           badSqlCommand.Connection = dbConnection;
   90 |           dbConnection.Open();
   91 |           for (int i = 0; i < names.Length; i++)
   92 |           {
   93 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   94 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   95 |           }
>  96 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   97 |           successCount += affectedRows;
   98 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   99 |       }
  100 |   }
  101 |   catch (SqlException exceptSql)
  102 |   {
  103 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  104 |   }
  105 |   finally
  106 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,96,"
   86 |   {
   87 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |       {
   89 |           badSqlCommand.Connection = dbConnection;
   90 |           dbConnection.Open();
   91 |           for (int i = 0; i < names.Length; i++)
   92 |           {
   93 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   94 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   95 |           }
>  96 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   97 |           successCount += affectedRows;
   98 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   99 |       }
  100 |   }
  101 |   catch (SqlException exceptSql)
  102 |   {
  103 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  104 |   }
  105 |   finally
  106 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,96,"
   86 |   {
   87 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |       {
   89 |           badSqlCommand.Connection = dbConnection;
   90 |           dbConnection.Open();
   91 |           for (int i = 0; i < names.Length; i++)
   92 |           {
   93 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   94 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   95 |           }
>  96 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   97 |           successCount += affectedRows;
   98 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   99 |       }
  100 |   }
  101 |   catch (SqlException exceptSql)
  102 |   {
  103 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  104 |   }
  105 |   finally
  106 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,96,"
   86 |   {
   87 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |       {
   89 |           badSqlCommand.Connection = dbConnection;
   90 |           dbConnection.Open();
   91 |           for (int i = 0; i < names.Length; i++)
   92 |           {
   93 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   94 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   95 |           }
>  96 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   97 |           successCount += affectedRows;
   98 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   99 |       }
  100 |   }
  101 |   catch (SqlException exceptSql)
  102 |   {
  103 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  104 |   }
  105 |   finally
  106 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |         int? result = null;
   75 |         try
   76 |         {
   77 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   78 |             {
   79 |                 dbConnection.Open();
   80 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   81 |                 {
   82 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   83 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  84 |                     result = badSqlCommand.ExecuteNonQuery();
   85 |                     if (result != null)
   86 |                     {
   87 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   88 |                     }
   89 |                     else
   90 |                     {
   91 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   92 |                     }
   93 |                 }
   94 |             }
      ^ Col 0
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |         int? result = null;
   86 |         try
   87 |         {
   88 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |             {
   90 |                 dbConnection.Open();
   91 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   92 |                 {
   93 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   94 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  95 |                     result = badSqlCommand.ExecuteNonQuery();
   96 |                     if (result != null)
   97 |                     {
   98 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   99 |                     }
  100 |                     else
  101 |                     {
  102 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  103 |                     }
  104 |                 }
  105 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |         int? result = null;
   86 |         try
   87 |         {
   88 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |             {
   90 |                 dbConnection.Open();
   91 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   92 |                 {
   93 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   94 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  95 |                     result = badSqlCommand.ExecuteNonQuery();
   96 |                     if (result != null)
   97 |                     {
   98 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   99 |                     }
  100 |                     else
  101 |                     {
  102 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  103 |                     }
  104 |                 }
  105 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,102,"
   92 |         int? result = null;
   93 |         try
   94 |         {
   95 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   96 |             {
   97 |                 dbConnection.Open();
   98 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   99 |                 {
  100 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
  101 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
> 102 |                     result = badSqlCommand.ExecuteNonQuery();
  103 |                     if (result != null)
  104 |                     {
  105 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
  106 |                     }
  107 |                     else
  108 |                     {
  109 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  110 |                     }
  111 |                 }
  112 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |         int? result = null;
   92 |         try
   93 |         {
   94 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   95 |             {
   96 |                 dbConnection.Open();
   97 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   98 |                 {
   99 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
  100 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
> 101 |                     result = badSqlCommand.ExecuteNonQuery();
  102 |                     if (result != null)
  103 |                     {
  104 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
  105 |                     }
  106 |                     else
  107 |                     {
  108 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  109 |                     }
  110 |                 }
  111 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,100,"
   90 |         int? result = null;
   91 |         try
   92 |         {
   93 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   94 |             {
   95 |                 dbConnection.Open();
   96 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   97 |                 {
   98 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   99 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
> 100 |                     result = badSqlCommand.ExecuteNonQuery();
  101 |                     if (result != null)
  102 |                     {
  103 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
  104 |                     }
  105 |                     else
  106 |                     {
  107 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  108 |                     }
  109 |                 }
  110 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,100,"
   90 |         int? result = null;
   91 |         try
   92 |         {
   93 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   94 |             {
   95 |                 dbConnection.Open();
   96 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   97 |                 {
   98 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   99 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
> 100 |                     result = badSqlCommand.ExecuteNonQuery();
  101 |                     if (result != null)
  102 |                     {
  103 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
  104 |                     }
  105 |                     else
  106 |                     {
  107 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  108 |                     }
  109 |                 }
  110 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,108,"
   98 |         int? result = null;
   99 |         try
  100 |         {
  101 |             using (SqlConnection dbConnection = IO.GetDBConnection())
  102 |             {
  103 |                 dbConnection.Open();
  104 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
  105 |                 {
  106 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
  107 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
> 108 |                     result = badSqlCommand.ExecuteNonQuery();
  109 |                     if (result != null)
  110 |                     {
  111 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
  112 |                     }
  113 |                     else
  114 |                     {
  115 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  116 |                     }
  117 |                 }
  118 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |         int? result = null;
   86 |         try
   87 |         {
   88 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |             {
   90 |                 dbConnection.Open();
   91 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   92 |                 {
   93 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   94 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  95 |                     result = badSqlCommand.ExecuteNonQuery();
   96 |                     if (result != null)
   97 |                     {
   98 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   99 |                     }
  100 |                     else
  101 |                     {
  102 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  103 |                     }
  104 |                 }
  105 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |         int? result = null;
   86 |         try
   87 |         {
   88 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |             {
   90 |                 dbConnection.Open();
   91 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   92 |                 {
   93 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   94 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  95 |                     result = badSqlCommand.ExecuteNonQuery();
   96 |                     if (result != null)
   97 |                     {
   98 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   99 |                     }
  100 |                     else
  101 |                     {
  102 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  103 |                     }
  104 |                 }
  105 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |         int? result = null;
   86 |         try
   87 |         {
   88 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |             {
   90 |                 dbConnection.Open();
   91 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   92 |                 {
   93 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   94 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  95 |                     result = badSqlCommand.ExecuteNonQuery();
   96 |                     if (result != null)
   97 |                     {
   98 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   99 |                     }
  100 |                     else
  101 |                     {
  102 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  103 |                     }
  104 |                 }
  105 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |         int? result = null;
   85 |         try
   86 |         {
   87 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |             {
   89 |                 dbConnection.Open();
   90 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |                 {
   92 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   93 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  94 |                     result = badSqlCommand.ExecuteNonQuery();
   95 |                     if (result != null)
   96 |                     {
   97 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   98 |                     }
   99 |                     else
  100 |                     {
  101 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  102 |                     }
  103 |                 }
  104 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |         int? result = null;
   86 |         try
   87 |         {
   88 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |             {
   90 |                 dbConnection.Open();
   91 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   92 |                 {
   93 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   94 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  95 |                     result = badSqlCommand.ExecuteNonQuery();
   96 |                     if (result != null)
   97 |                     {
   98 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   99 |                     }
  100 |                     else
  101 |                     {
  102 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  103 |                     }
  104 |                 }
  105 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,95,"
   85 |         int? result = null;
   86 |         try
   87 |         {
   88 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |             {
   90 |                 dbConnection.Open();
   91 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   92 |                 {
   93 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   94 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  95 |                     result = badSqlCommand.ExecuteNonQuery();
   96 |                     if (result != null)
   97 |                     {
   98 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   99 |                     }
  100 |                     else
  101 |                     {
  102 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  103 |                     }
  104 |                 }
  105 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,97,"
   87 |         int? result = null;
   88 |         try
   89 |         {
   90 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   91 |             {
   92 |                 dbConnection.Open();
   93 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   94 |                 {
   95 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   96 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  97 |                     result = badSqlCommand.ExecuteNonQuery();
   98 |                     if (result != null)
   99 |                     {
  100 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
  101 |                     }
  102 |                     else
  103 |                     {
  104 |                         IO.WriteLine(""Unable to update records for user: "" + data);
  105 |                     }
  106 |                 }
  107 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |         int? result = null;
   81 |         try
   82 |         {
   83 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   84 |             {
   85 |                 dbConnection.Open();
   86 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   87 |                 {
   88 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   89 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  90 |                     result = badSqlCommand.ExecuteNonQuery();
   91 |                     if (result != null)
   92 |                     {
   93 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   94 |                     }
   95 |                     else
   96 |                     {
   97 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   98 |                     }
   99 |                 }
  100 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |         int? result = null;
   81 |         try
   82 |         {
   83 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   84 |             {
   85 |                 dbConnection.Open();
   86 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   87 |                 {
   88 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   89 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  90 |                     result = badSqlCommand.ExecuteNonQuery();
   91 |                     if (result != null)
   92 |                     {
   93 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   94 |                     }
   95 |                     else
   96 |                     {
   97 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   98 |                     }
   99 |                 }
  100 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |         int? result = null;
   81 |         try
   82 |         {
   83 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   84 |             {
   85 |                 dbConnection.Open();
   86 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   87 |                 {
   88 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   89 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  90 |                     result = badSqlCommand.ExecuteNonQuery();
   91 |                     if (result != null)
   92 |                     {
   93 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   94 |                     }
   95 |                     else
   96 |                     {
   97 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   98 |                     }
   99 |                 }
  100 |             }
      ^ Col 4
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |         int? result = null;
   81 |         try
   82 |         {
   83 |             using (SqlConnection dbConnection = IO.GetDBConnection())
   84 |             {
   85 |                 dbConnection.Open();
   86 |                 using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   87 |                 {
   88 |                     /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteNonQuery(), which could result
   89 |                     badSqlCommand.CommandText = ""insert into users (status) values ('updated') where name='"" +data+""'"";
>  90 |                     result = badSqlCommand.ExecuteNonQuery();
   91 |                     if (result != null)
   92 |                     {
   93 |                         IO.WriteLine(""Name, "" + data +"", updated successfully"");
   94 |                     }
   95 |                     else
   96 |                     {
   97 |                         IO.WriteLine(""Unable to update records for user: "" + data);
   98 |                     }
   99 |                 }
  100 |             }
      ^ Col 0
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |
   74 | ry
   75 |
   76 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   77 |    {
   78 |        dbConnection.Open();
   79 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   80 |        {
   81 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   82 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  83 |            object firstCol = badSqlCommand.ExecuteScalar();
   84 |            if (firstCol != null)
   85 |            {
   86 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   87 |            }
   88 |        }
   89 |    }
   90 |
   91 | atch (SqlException exceptSql)
   92 |
   93 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 9
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |
   85 | ry
   86 |
   87 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |    {
   89 |        dbConnection.Open();
   90 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |        {
   92 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   93 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  94 |            object firstCol = badSqlCommand.ExecuteScalar();
   95 |            if (firstCol != null)
   96 |            {
   97 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   98 |            }
   99 |        }
  100 |    }
  101 |
  102 | atch (SqlException exceptSql)
  103 |
  104 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |
   85 | ry
   86 |
   87 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |    {
   89 |        dbConnection.Open();
   90 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |        {
   92 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   93 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  94 |            object firstCol = badSqlCommand.ExecuteScalar();
   95 |            if (firstCol != null)
   96 |            {
   97 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   98 |            }
   99 |        }
  100 |    }
  101 |
  102 | atch (SqlException exceptSql)
  103 |
  104 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,101,"
   91 |
   92 | ry
   93 |
   94 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   95 |    {
   96 |        dbConnection.Open();
   97 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   98 |        {
   99 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
  100 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
> 101 |            object firstCol = badSqlCommand.ExecuteScalar();
  102 |            if (firstCol != null)
  103 |            {
  104 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
  105 |            }
  106 |        }
  107 |    }
  108 |
  109 | atch (SqlException exceptSql)
  110 |
  111 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,100,"
   90 |
   91 | ry
   92 |
   93 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   94 |    {
   95 |        dbConnection.Open();
   96 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   97 |        {
   98 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   99 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
> 100 |            object firstCol = badSqlCommand.ExecuteScalar();
  101 |            if (firstCol != null)
  102 |            {
  103 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
  104 |            }
  105 |        }
  106 |    }
  107 |
  108 | atch (SqlException exceptSql)
  109 |
  110 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,99,"
   89 |
   90 | ry
   91 |
   92 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |    {
   94 |        dbConnection.Open();
   95 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   96 |        {
   97 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   98 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  99 |            object firstCol = badSqlCommand.ExecuteScalar();
  100 |            if (firstCol != null)
  101 |            {
  102 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
  103 |            }
  104 |        }
  105 |    }
  106 |
  107 | atch (SqlException exceptSql)
  108 |
  109 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,99,"
   89 |
   90 | ry
   91 |
   92 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   93 |    {
   94 |        dbConnection.Open();
   95 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   96 |        {
   97 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   98 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  99 |            object firstCol = badSqlCommand.ExecuteScalar();
  100 |            if (firstCol != null)
  101 |            {
  102 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
  103 |            }
  104 |        }
  105 |    }
  106 |
  107 | atch (SqlException exceptSql)
  108 |
  109 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,107,"
   97 |
   98 | ry
   99 |
  100 |    using (SqlConnection dbConnection = IO.GetDBConnection())
  101 |    {
  102 |        dbConnection.Open();
  103 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
  104 |        {
  105 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
  106 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
> 107 |            object firstCol = badSqlCommand.ExecuteScalar();
  108 |            if (firstCol != null)
  109 |            {
  110 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
  111 |            }
  112 |        }
  113 |    }
  114 |
  115 | atch (SqlException exceptSql)
  116 |
  117 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |
   85 | ry
   86 |
   87 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |    {
   89 |        dbConnection.Open();
   90 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |        {
   92 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   93 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  94 |            object firstCol = badSqlCommand.ExecuteScalar();
   95 |            if (firstCol != null)
   96 |            {
   97 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   98 |            }
   99 |        }
  100 |    }
  101 |
  102 | atch (SqlException exceptSql)
  103 |
  104 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |
   85 | ry
   86 |
   87 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |    {
   89 |        dbConnection.Open();
   90 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |        {
   92 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   93 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  94 |            object firstCol = badSqlCommand.ExecuteScalar();
   95 |            if (firstCol != null)
   96 |            {
   97 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   98 |            }
   99 |        }
  100 |    }
  101 |
  102 | atch (SqlException exceptSql)
  103 |
  104 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |
   85 | ry
   86 |
   87 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |    {
   89 |        dbConnection.Open();
   90 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |        {
   92 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   93 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  94 |            object firstCol = badSqlCommand.ExecuteScalar();
   95 |            if (firstCol != null)
   96 |            {
   97 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   98 |            }
   99 |        }
  100 |    }
  101 |
  102 | atch (SqlException exceptSql)
  103 |
  104 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,93,"
   83 |
   84 | ry
   85 |
   86 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   87 |    {
   88 |        dbConnection.Open();
   89 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   90 |        {
   91 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   92 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  93 |            object firstCol = badSqlCommand.ExecuteScalar();
   94 |            if (firstCol != null)
   95 |            {
   96 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   97 |            }
   98 |        }
   99 |    }
  100 |
  101 | atch (SqlException exceptSql)
  102 |
  103 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |
   85 | ry
   86 |
   87 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |    {
   89 |        dbConnection.Open();
   90 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |        {
   92 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   93 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  94 |            object firstCol = badSqlCommand.ExecuteScalar();
   95 |            if (firstCol != null)
   96 |            {
   97 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   98 |            }
   99 |        }
  100 |    }
  101 |
  102 | atch (SqlException exceptSql)
  103 |
  104 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,94,"
   84 |
   85 | ry
   86 |
   87 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   88 |    {
   89 |        dbConnection.Open();
   90 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   91 |        {
   92 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   93 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  94 |            object firstCol = badSqlCommand.ExecuteScalar();
   95 |            if (firstCol != null)
   96 |            {
   97 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   98 |            }
   99 |        }
  100 |    }
  101 |
  102 | atch (SqlException exceptSql)
  103 |
  104 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,96,"
   86 | 7:
   87 | ry
   88 |
   89 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   90 |    {
   91 |        dbConnection.Open();
   92 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   93 |        {
   94 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   95 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  96 |            object firstCol = badSqlCommand.ExecuteScalar();
   97 |            if (firstCol != null)
   98 |            {
   99 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
  100 |            }
  101 |        }
  102 |    }
  103 |
  104 | atch (SqlException exceptSql)
  105 |
  106 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 |
   80 | ry
   81 |
   82 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   83 |    {
   84 |        dbConnection.Open();
   85 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   86 |        {
   87 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   88 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  89 |            object firstCol = badSqlCommand.ExecuteScalar();
   90 |            if (firstCol != null)
   91 |            {
   92 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   93 |            }
   94 |        }
   95 |    }
   96 |
   97 | atch (SqlException exceptSql)
   98 |
   99 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 |
   80 | ry
   81 |
   82 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   83 |    {
   84 |        dbConnection.Open();
   85 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   86 |        {
   87 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   88 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  89 |            object firstCol = badSqlCommand.ExecuteScalar();
   90 |            if (firstCol != null)
   91 |            {
   92 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   93 |            }
   94 |        }
   95 |    }
   96 |
   97 | atch (SqlException exceptSql)
   98 |
   99 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 | tring data = dataCopy;
   80 | ry
   81 |
   82 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   83 |    {
   84 |        dbConnection.Open();
   85 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   86 |        {
   87 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   88 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  89 |            object firstCol = badSqlCommand.ExecuteScalar();
   90 |            if (firstCol != null)
   91 |            {
   92 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   93 |            }
   94 |        }
   95 |    }
   96 |
   97 | atch (SqlException exceptSql)
   98 |
   99 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 13
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 | tring data = BadSource(req, resp);
   80 | ry
   81 |
   82 |    using (SqlConnection dbConnection = IO.GetDBConnection())
   83 |    {
   84 |        dbConnection.Open();
   85 |        using (SqlCommand badSqlCommand = new SqlCommand(null, dbConnection))
   86 |        {
   87 |            /* POTENTIAL FLAW: data concatenated into SQL statement used in ExecuteScalar(), which could result in SQL Inj
   88 |            badSqlCommand.CommandText = ""select * from users where name='"" +data+""'"";
>  89 |            object firstCol = badSqlCommand.ExecuteScalar();
   90 |            if (firstCol != null)
   91 |            {
   92 |                IO.WriteLine(firstCol.ToString()); /* Use ResultSet in some way */
   93 |            }
   94 |        }
   95 |    }
   96 |
   97 | atch (SqlException exceptSql)
   98 |
   99 |    IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
      ^ Col 9
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_01.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,73,"
   63 |   {
   64 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   65 |       {
   66 |           badSqlCommand.Connection = dbConnection;
   67 |           dbConnection.Open();
   68 |           for (int i = 0; i < names.Length; i++)
   69 |           {
   70 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   71 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   72 |           }
>  73 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   74 |           successCount += affectedRows;
   75 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   76 |       }
   77 |   }
   78 |   catch (SqlException exceptSql)
   79 |   {
   80 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   81 |   }
   82 |   finally
   83 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_02.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_03.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_04.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,91,"
   81 |   {
   82 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   83 |       {
   84 |           badSqlCommand.Connection = dbConnection;
   85 |           dbConnection.Open();
   86 |           for (int i = 0; i < names.Length; i++)
   87 |           {
   88 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   89 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   90 |           }
>  91 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   92 |           successCount += affectedRows;
   93 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   94 |       }
   95 |   }
   96 |   catch (SqlException exceptSql)
   97 |   {
   98 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   99 |   }
  100 |   finally
  101 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_05.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,90,"
   80 |   {
   81 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   82 |       {
   83 |           badSqlCommand.Connection = dbConnection;
   84 |           dbConnection.Open();
   85 |           for (int i = 0; i < names.Length; i++)
   86 |           {
   87 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   88 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   89 |           }
>  90 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   91 |           successCount += affectedRows;
   92 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   93 |       }
   94 |   }
   95 |   catch (SqlException exceptSql)
   96 |   {
   97 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   98 |   }
   99 |   finally
  100 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_06.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 |   {
   80 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   81 |       {
   82 |           badSqlCommand.Connection = dbConnection;
   83 |           dbConnection.Open();
   84 |           for (int i = 0; i < names.Length; i++)
   85 |           {
   86 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   87 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   88 |           }
>  89 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   90 |           successCount += affectedRows;
   91 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   92 |       }
   93 |   }
   94 |   catch (SqlException exceptSql)
   95 |   {
   96 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   97 |   }
   98 |   finally
   99 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_07.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,89,"
   79 |   {
   80 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   81 |       {
   82 |           badSqlCommand.Connection = dbConnection;
   83 |           dbConnection.Open();
   84 |           for (int i = 0; i < names.Length; i++)
   85 |           {
   86 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   87 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   88 |           }
>  89 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   90 |           successCount += affectedRows;
   91 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   92 |       }
   93 |   }
   94 |   catch (SqlException exceptSql)
   95 |   {
   96 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   97 |   }
   98 |   finally
   99 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_08.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,97,"
   87 |   {
   88 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   89 |       {
   90 |           badSqlCommand.Connection = dbConnection;
   91 |           dbConnection.Open();
   92 |           for (int i = 0; i < names.Length; i++)
   93 |           {
   94 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   95 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   96 |           }
>  97 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   98 |           successCount += affectedRows;
   99 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
  100 |       }
  101 |   }
  102 |   catch (SqlException exceptSql)
  103 |   {
  104 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
  105 |   }
  106 |   finally
  107 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_09.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_10.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_11.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_12.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,83,"
   73 |   {
   74 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   75 |       {
   76 |           badSqlCommand.Connection = dbConnection;
   77 |           dbConnection.Open();
   78 |           for (int i = 0; i < names.Length; i++)
   79 |           {
   80 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   81 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   82 |           }
>  83 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   84 |           successCount += affectedRows;
   85 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   86 |       }
   87 |   }
   88 |   catch (SqlException exceptSql)
   89 |   {
   90 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   91 |   }
   92 |   finally
   93 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_13.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_14.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,84,"
   74 |   {
   75 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   76 |       {
   77 |           badSqlCommand.Connection = dbConnection;
   78 |           dbConnection.Open();
   79 |           for (int i = 0; i < names.Length; i++)
   80 |           {
   81 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   82 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   83 |           }
>  84 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   85 |           successCount += affectedRows;
   86 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   87 |       }
   88 |   }
   89 |   catch (SqlException exceptSql)
   90 |   {
   91 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   92 |   }
   93 |   finally
   94 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_15.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,86,"
   76 |   {
   77 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   78 |       {
   79 |           badSqlCommand.Connection = dbConnection;
   80 |           dbConnection.Open();
   81 |           for (int i = 0; i < names.Length; i++)
   82 |           {
   83 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   84 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   85 |           }
>  86 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   87 |           successCount += affectedRows;
   88 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   89 |       }
   90 |   }
   91 |   catch (SqlException exceptSql)
   92 |   {
   93 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   94 |   }
   95 |   finally
   96 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_16.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 |   {
   70 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |       {
   72 |           badSqlCommand.Connection = dbConnection;
   73 |           dbConnection.Open();
   74 |           for (int i = 0; i < names.Length; i++)
   75 |           {
   76 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   77 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   78 |           }
>  79 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   80 |           successCount += affectedRows;
   81 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   82 |       }
   83 |   }
   84 |   catch (SqlException exceptSql)
   85 |   {
   86 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   87 |   }
   88 |   finally
   89 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_17.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 |   {
   70 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |       {
   72 |           badSqlCommand.Connection = dbConnection;
   73 |           dbConnection.Open();
   74 |           for (int i = 0; i < names.Length; i++)
   75 |           {
   76 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   77 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   78 |           }
>  79 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   80 |           successCount += affectedRows;
   81 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   82 |       }
   83 |   }
   84 |   catch (SqlException exceptSql)
   85 |   {
   86 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   87 |   }
   88 |   finally
   89 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_31.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 |   {
   70 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |       {
   72 |           badSqlCommand.Connection = dbConnection;
   73 |           dbConnection.Open();
   74 |           for (int i = 0; i < names.Length; i++)
   75 |           {
   76 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   77 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   78 |           }
>  79 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   80 |           successCount += affectedRows;
   81 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   82 |       }
   83 |   }
   84 |   catch (SqlException exceptSql)
   85 |   {
   86 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   87 |   }
   88 |   finally
   89 |   {
      ^ Col 14
",c_sharp.c_sharp_sql_user_params
001. SQL injection - C Sharp SQL API,CWE-89,Use of attacker controlled parameters for querying the data base in NIST/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_42.cs,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:U/RL:O/RC:C,https://docs.fluidattacks.com/criteria/vulnerabilities/001,skims,SAST,79,"
   69 |   {
   70 |       using (SqlConnection dbConnection = IO.GetDBConnection())
   71 |       {
   72 |           badSqlCommand.Connection = dbConnection;
   73 |           dbConnection.Open();
   74 |           for (int i = 0; i < names.Length; i++)
   75 |           {
   76 |               /* POTENTIAL FLAW: data concatenated into SQL statement used in CommandText, which could result in SQL Inje
   77 |               badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
   78 |           }
>  79 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
   80 |           successCount += affectedRows;
   81 |           IO.WriteLine(""Succeeded in "" + successCount + "" out of "" + names.Length + "" queries."");
   82 |       }
   83 |   }
   84 |   catch (SqlException exceptSql)
   85 |   {
   86 |       IO.Logger.Log(NLog.LogLevel.Warn, ""Error getting database connection"", exceptSql);
   87 |   }
   88 |   finally
   89 |   {
      ^ Col 10
",c_sharp.c_sharp_sql_user_params
Summary: 247 vulnerabilities were found in your targets.