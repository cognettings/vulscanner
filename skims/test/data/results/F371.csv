title,cwe,description,cvss,finding,stream,kind,where,snippet,method
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,18,"
   3 | @Component({
   4 |   selector: ""my-app"",
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class Aplication {
  13 |   constructor(sanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
> 18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |   }
  23 | }
     ^ Col 0
",javascript.js_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,17,"
   3 | @Component({
   4 |   selector: ""my-app"",
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class Aplication {
  13 |   constructor(sanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
> 17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |   }
  23 | }
     ^ Col 0
",javascript.js_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,16,"
   3 | @Component({
   4 |   selector: ""my-app"",
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class Aplication {
  13 |   constructor(sanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
> 16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |   }
  23 | }
     ^ Col 0
",javascript.js_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,15,"
   3 | @Component({
   4 |   selector: ""my-app"",
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class Aplication {
  13 |   constructor(sanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
> 15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |   }
  23 | }
     ^ Col 0
",javascript.js_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,19,"
   3 | Component({
   4 |  selector: ""my-app"",
   5 |  template: `
   6 |    <h4>An untrusted URL:</h4>
   7 |    <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |    <h4>A trusted URL:</h4>
   9 |    <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |  `,
  11 | )
  12 | xport class Aplication {
  13 |  constructor(sanitizer) {
  14 |    this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |    this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |    this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |    this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |    this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
> 19 |    this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |      this.dangerousUrl
  21 |    );
  22 |  }
  23 |
     ^ Col 1
",javascript.js_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,18,"
   4 |   selector: 'my-app',
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class App {
  13 |   constructor(private sanitizer: DomSanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
> 18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |
  23 |   }
  24 | }
     ^ Col 0
",typescript.ts_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,17,"
   4 |   selector: 'my-app',
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class App {
  13 |   constructor(private sanitizer: DomSanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
> 17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |
  23 |   }
  24 | }
     ^ Col 0
",typescript.ts_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,16,"
   4 |   selector: 'my-app',
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class App {
  13 |   constructor(private sanitizer: DomSanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
> 16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |
  23 |   }
  24 | }
     ^ Col 0
",typescript.ts_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,15,"
   4 |   selector: 'my-app',
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class App {
  13 |   constructor(private sanitizer: DomSanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
> 15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |
  23 |   }
  24 | }
     ^ Col 0
",typescript.ts_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,19,"
   4 |  selector: 'my-app',
   5 |  template: `
   6 |    <h4>An untrusted URL:</h4>
   7 |    <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |    <h4>A trusted URL:</h4>
   9 |    <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |  `,
  11 | )
  12 | xport class App {
  13 |  constructor(private sanitizer: DomSanitizer) {
  14 |    this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |    this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |    this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |    this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |    this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
> 19 |    this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |      this.dangerousUrl
  21 |    );
  22 |
  23 |  }
  24 |
     ^ Col 1
",typescript.ts_use_of_bypass_security_trust_url
371. DOM-Based cross-site scripting (XSS),CWE-79,DangerouslySetInnerHtml is used in Jsx file. in namespace/skims/test/data/lib_root/f371/js_unsafe_set_innerhtml.jsx,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,11,"
   1 | import React from ""react"";
   2 |
   3 | const App = () => {
   4 |   const createMarkup = () => {
   5 |     return {
   6 |       __html: ""<img onerror='alert();' src='invalid-image' />"",
   7 |     };
   8 |   };
   9 |   return (
  10 |     <div>
> 11 |       <div dangerouslySetInnerHTML={createMarkup()}/>
  12 |     </div>
  13 |   );
  14 | };
  15 | export default App;
     ^ Col 0
",javascript.js_uses_dangerously_set_html
371. DOM-Based cross-site scripting (XSS),CWE-79,DangerouslySetInnerHtml is used in Tsx file. in namespace/skims/test/data/lib_root/f371/ts_unsafe_set_innerhtml.tsx,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,11,"
   1 | import React from ""react"";
   2 |
   3 | const App = () => {
   4 |   const createMarkup = () => {
   5 |     return {
   6 |       __html: ""<img onerror='alert();' src='invalid-image' />"",
   7 |     };
   8 |   };
   9 |   return (
  10 |     <div>
> 11 |       <div dangerouslySetInnerHTML={createMarkup()}/>
  12 |     </div>
  13 |   );
  14 | };
  15 | export default App;
     ^ Col 0
",typescript.ts_uses_dangerously_set_html
371. DOM-Based cross-site scripting (XSS),CWE-79,"Use of innerHTML method, which its known as insecure. in namespace/skims/test/data/lib_root/f371/js_uses_innerhtml.js",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,5,"
  1 | const main = document.getElementById('main');
  2 |
  3 | const externalHTML = `<img src='1' onerror='alert(""Error loading image"")'>`;
  4 | // shows the alert
> 5 | main.innerHTML = externalHTML;
    ^ Col 0
",javascript.js_uses_innerhtml
371. DOM-Based cross-site scripting (XSS),CWE-79,"Use of innerHTML method, which its known as insecure. in namespace/skims/test/data/lib_root/f371/ts_uses_innerhtml.ts",CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:U/RL:X/RC:X,https://docs.fluidattacks.com/criteria/vulnerabilities/371,skims,SAST,4,"
  1 | const rootDiv = document.getElementById('root');
  2 | const hash = decodeURIComponent(location.hash.substr(1));
  3 | if (rootDiv != null){
> 4 |   rootDiv.innerHTML = hash;
  5 | }
    ^ Col 0
",typescript.ts_uses_innerhtml
Summary: 14 vulnerabilities were found in your targets.