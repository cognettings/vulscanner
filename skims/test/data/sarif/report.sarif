{"runs": [{"tool": {"driver": {"name": "skims", "contents": ["localizedData", "nonLocalizedData"], "rules": [{"id": "052", "defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "The application uses insecure encryption algorithms.\n"}, "help": {"text": "Use algorithms considered cryptographically secure.\n"}, "helpUri": "https://docs.fluidattacks.com/criteria/vulnerabilities/052#details", "name": "Insecure encryption algorithm", "properties": {"auto_approve": true}}]}}, "newlineSequences": ["\r\n", "\n"], "originalUriBaseIds": {"SRCROOT": {"uri": "namespace"}}, "results": [{"message": {"text": "Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js", "properties": {}}, "guid": 758790081643086620, "kind": "open", "level": "error", "locations": [{"physicalLocation": {"artifactLocation": {"uri": "skims/test/data/lib_root/f052/js_insecure_cipher.js"}, "contextRegion": {"charLength": 120, "endLine": 23, "properties": {"offset": 2, "line": 13, "column": 0, "line_context": 10, "wrap": false, "show_line_numbers": false, "highlight_line_number": false}, "snippet": {"rendered": "   3 |         mode: CryptoJS.mode.CBC,\n   4 |         padding: CryptoJS.pad.AnsiX923\n   5 |     });\n   6 |\n   7 |     var crypto = CryptoJS.mode.ECB\n   8 |     var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   9 |         mode: crypto,\n  10 |         padding: CryptoJS.pad.AnsiX923\n  11 |     });\n  12 |\n> 13 |     var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n  14 |         padding: CryptoJS.pad.AnsiX923\n  15 |     });\n  16 | }\n  17 |\n  18 | function secureMode() {\n  19 |     var safe_mode = CryptoJS.mode.CTR\n  20 |     var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n  21 |         mode: safe_mode,\n  22 |         padding: CryptoJS.pad.AnsiX923\n  23 |     });\n     ^ Col 0", "text": "        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.AnsiX923\n    });\n\n    var crypto = CryptoJS.mode.ECB\n    var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n        mode: crypto,\n        padding: CryptoJS.pad.AnsiX923\n    });\n\n    var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n        padding: CryptoJS.pad.AnsiX923\n    });\n}\n\nfunction secureMode() {\n    var safe_mode = CryptoJS.mode.CTR\n    var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n        mode: safe_mode,\n        padding: CryptoJS.pad.AnsiX923\n    });"}, "startColumn": 0, "startLine": 3}, "region": {"snippet": {"text": "   3 |         mode: CryptoJS.mode.CBC,\n   4 |         padding: CryptoJS.pad.AnsiX923\n   5 |     });\n   6 |\n   7 |     var crypto = CryptoJS.mode.ECB\n   8 |     var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   9 |         mode: crypto,\n  10 |         padding: CryptoJS.pad.AnsiX923\n  11 |     });\n  12 |\n> 13 |     var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n  14 |         padding: CryptoJS.pad.AnsiX923\n  15 |     });\n  16 | }\n  17 |\n  18 | function secureMode() {\n  19 |     var safe_mode = CryptoJS.mode.CTR\n  20 |     var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n  21 |         mode: safe_mode,\n  22 |         padding: CryptoJS.pad.AnsiX923\n  23 |     });\n     ^ Col 0"}, "startLine": 13}}}], "properties": {"cwe_ids": ["CWE-310"], "cvss": "CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C", "kind": "SAST", "method_developer": "flagos@fluidattacks.com", "source_method": "javascript.javascript_insecure_encrypt", "stream": "skims", "technique": "ASAST"}, "ruleId": "052", "taxa": [{"id": "148", "toolComponent": {"name": "criteria"}}, {"id": "149", "toolComponent": {"name": "criteria"}}, {"id": "150", "toolComponent": {"name": "criteria"}}, {"id": "181", "toolComponent": {"name": "criteria"}}, {"id": "336", "toolComponent": {"name": "criteria"}}]}, {"message": {"text": "Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js", "properties": {}}, "guid": 12519140842454309793, "kind": "open", "level": "error", "locations": [{"physicalLocation": {"artifactLocation": {"uri": "skims/test/data/lib_root/f052/js_insecure_cipher.js"}, "contextRegion": {"charLength": 120, "endLine": 12, "properties": {"offset": 0, "line": 2, "column": 0, "line_context": 10, "wrap": false, "show_line_numbers": false, "highlight_line_number": false}, "snippet": {"rendered": "   1 | function insecureModes() {\n>  2 |     var unsafe_1 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   3 |         mode: CryptoJS.mode.CBC,\n   4 |         padding: CryptoJS.pad.AnsiX923\n   5 |     });\n   6 |\n   7 |     var crypto = CryptoJS.mode.ECB\n   8 |     var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   9 |         mode: crypto,\n  10 |         padding: CryptoJS.pad.AnsiX923\n  11 |     });\n  12 |\n  13 |     var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n  14 |         padding: CryptoJS.pad.AnsiX923\n  15 |     });\n  16 | }\n  17 |\n  18 | function secureMode() {\n  19 |     var safe_mode = CryptoJS.mode.CTR\n  20 |     var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n  21 |         mode: safe_mode,\n     ^ Col 0", "text": "function insecureModes() {\n    var unsafe_1 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.AnsiX923\n    });\n\n    var crypto = CryptoJS.mode.ECB\n    var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n        mode: crypto,\n        padding: CryptoJS.pad.AnsiX923\n    });\n\n    var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n        padding: CryptoJS.pad.AnsiX923\n    });\n}\n\nfunction secureMode() {\n    var safe_mode = CryptoJS.mode.CTR\n    var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n        mode: safe_mode,"}, "startColumn": 0, "startLine": 0}, "region": {"snippet": {"text": "   1 | function insecureModes() {\n>  2 |     var unsafe_1 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   3 |         mode: CryptoJS.mode.CBC,\n   4 |         padding: CryptoJS.pad.AnsiX923\n   5 |     });\n   6 |\n   7 |     var crypto = CryptoJS.mode.ECB\n   8 |     var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   9 |         mode: crypto,\n  10 |         padding: CryptoJS.pad.AnsiX923\n  11 |     });\n  12 |\n  13 |     var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n  14 |         padding: CryptoJS.pad.AnsiX923\n  15 |     });\n  16 | }\n  17 |\n  18 | function secureMode() {\n  19 |     var safe_mode = CryptoJS.mode.CTR\n  20 |     var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n  21 |         mode: safe_mode,\n     ^ Col 0"}, "startLine": 2}}}], "properties": {"cwe_ids": ["CWE-310"], "cvss": "CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C", "kind": "SAST", "method_developer": "flagos@fluidattacks.com", "source_method": "javascript.javascript_insecure_encrypt", "stream": "skims", "technique": "ASAST"}, "ruleId": "052", "taxa": [{"id": "148", "toolComponent": {"name": "criteria"}}, {"id": "149", "toolComponent": {"name": "criteria"}}, {"id": "150", "toolComponent": {"name": "criteria"}}, {"id": "181", "toolComponent": {"name": "criteria"}}, {"id": "336", "toolComponent": {"name": "criteria"}}]}, {"message": {"text": "Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js", "properties": {}}, "guid": 6550411768211967511, "kind": "open", "level": "error", "locations": [{"physicalLocation": {"artifactLocation": {"uri": "skims/test/data/lib_root/f052/js_insecure_cipher.js"}, "contextRegion": {"charLength": 120, "endLine": 18, "properties": {"offset": 0, "line": 8, "column": 0, "line_context": 10, "wrap": false, "show_line_numbers": false, "highlight_line_number": false}, "snippet": {"rendered": "   1 | function insecureModes() {\n   2 |     var unsafe_1 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   3 |         mode: CryptoJS.mode.CBC,\n   4 |         padding: CryptoJS.pad.AnsiX923\n   5 |     });\n   6 |\n   7 |     var crypto = CryptoJS.mode.ECB\n>  8 |     var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   9 |         mode: crypto,\n  10 |         padding: CryptoJS.pad.AnsiX923\n  11 |     });\n  12 |\n  13 |     var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n  14 |         padding: CryptoJS.pad.AnsiX923\n  15 |     });\n  16 | }\n  17 |\n  18 | function secureMode() {\n  19 |     var safe_mode = CryptoJS.mode.CTR\n  20 |     var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n  21 |         mode: safe_mode,\n     ^ Col 0", "text": "function insecureModes() {\n    var unsafe_1 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.AnsiX923\n    });\n\n    var crypto = CryptoJS.mode.ECB\n    var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n        mode: crypto,\n        padding: CryptoJS.pad.AnsiX923\n    });\n\n    var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n        padding: CryptoJS.pad.AnsiX923\n    });\n}\n\nfunction secureMode() {\n    var safe_mode = CryptoJS.mode.CTR\n    var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n        mode: safe_mode,"}, "startColumn": 0, "startLine": 0}, "region": {"snippet": {"text": "   1 | function insecureModes() {\n   2 |     var unsafe_1 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   3 |         mode: CryptoJS.mode.CBC,\n   4 |         padding: CryptoJS.pad.AnsiX923\n   5 |     });\n   6 |\n   7 |     var crypto = CryptoJS.mode.ECB\n>  8 |     var unsafe_2 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n   9 |         mode: crypto,\n  10 |         padding: CryptoJS.pad.AnsiX923\n  11 |     });\n  12 |\n  13 |     var unsafe_3 = CryptoJS.AES.encrypt(\"Message\", \"Secret Passphrase\", {\n  14 |         padding: CryptoJS.pad.AnsiX923\n  15 |     });\n  16 | }\n  17 |\n  18 | function secureMode() {\n  19 |     var safe_mode = CryptoJS.mode.CTR\n  20 |     var safe = CryptoJS.AES.encrypt(\"Message\", \"passphrase\", {\n  21 |         mode: safe_mode,\n     ^ Col 0"}, "startLine": 8}}}], "properties": {"cwe_ids": ["CWE-310"], "cvss": "CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:F/RL:O/RC:C", "kind": "SAST", "method_developer": "flagos@fluidattacks.com", "source_method": "javascript.javascript_insecure_encrypt", "stream": "skims", "technique": "ASAST"}, "ruleId": "052", "taxa": [{"id": "148", "toolComponent": {"name": "criteria"}}, {"id": "149", "toolComponent": {"name": "criteria"}}, {"id": "150", "toolComponent": {"name": "criteria"}}, {"id": "181", "toolComponent": {"name": "criteria"}}, {"id": "336", "toolComponent": {"name": "criteria"}}]}], "taxonomies": [{"name": "criteria", "contents": ["localizedData", "nonLocalizedData"], "informationUri": "https://docs.fluidattacks.com/criteria/requirements/", "isComprehensive": false, "organization": "Fluidattacks", "shortDescription": {"text": "The fluidattacks security requirements"}, "taxa": [{"id": "148", "fullDescription": {"text": "__empty__"}, "helpUri": "https://docs.fluidattacks.com/criteria/requirements/148", "name": "Set minimum size of asymmetric encryption", "shortDescription": {"text": "The asymmetric encryption mechanism must use a minimum key size of 2048 bits.\n"}}, {"id": "149", "fullDescription": {"text": "__empty__"}, "helpUri": "https://docs.fluidattacks.com/criteria/requirements/149", "name": "Set minimum size of symmetric encryption", "shortDescription": {"text": "The symmetric encryption mechanism must use a minimum key size of 128 bits.\n"}}, {"id": "150", "fullDescription": {"text": "__empty__"}, "helpUri": "https://docs.fluidattacks.com/criteria/requirements/150", "name": "Set minimum size for hash functions", "shortDescription": {"text": "Use hash functions with a minimum size of 256 bits.\n"}}, {"id": "181", "fullDescription": {"text": "A system can send information through a non-encrypted channel using insecure protocols. The use of these protocols makes it easier to perform a man-in-the-middle attack (MitM) to intercept and modify the information. Examples of such insecure protocols are HTTP, FTP, POP3 and Telnet.\n"}, "helpUri": "https://docs.fluidattacks.com/criteria/requirements/181", "name": "Transmit data using secure protocols", "shortDescription": {"text": "The transmission of sensitive information and the execution of sensitive functions must be performed through secure protocols.\n"}}, {"id": "336", "fullDescription": {"text": "All communications between the client and the server should take place over channels that are protected and encrypted. In order to guarantee this, out-of-date or insecure protocols such as SSLv2, SSLv3, or TLS 1.0 and TLS 1.1 should be disabled. The latest version of TLS should be used and communications should not be allowed to fall back on insecure or unencrypted protocols.\n"}, "helpUri": "https://docs.fluidattacks.com/criteria/requirements/336", "name": "Disable insecure TLS versions", "shortDescription": {"text": "The system must disable out-of-date or insecure versions of SSL and TLS protocols, algorithms and ciphers.\n"}}], "version": "1"}], "versionControlProvenance": [{"repositoryUri": "ssh://git@gitlab.com:fluidattacks/universe.git", "branch": "trunk", "revisionId": "776a57dbd08bf278330256dc3f3806cc927c805c"}]}], "version": "2.1.0", "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json"}