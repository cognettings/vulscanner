# pylint: disable=invalid-name,unexpected-keyword-arg
# type: ignore
"""
Remove vulnerabilities reported for method pip_incomplete_dependencies_list on
F079

Execution Time:    2022-09-20 at 20:29:20 UTC
Finalization Time: 2022-09-20 at 20:37:44 UTC

Execution Time:    2022-09-20 at 22:09:29 UTC
Finalization Time: 2022-09-20 at 22:17:07 UTC
"""
from aioextensions import (
    collect,
    run,
)
from custom_exceptions import (
    FindingNotFound,
)
from dataloaders import (
    Dataloaders,
    get_new_context,
)
from db_model.enums import (
    Source,
    StateRemovalJustification,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateReason,
)
from findings.domain.core import (
    remove_finding_legacy,
)
import logging
import logging.config
from organizations.domain import (
    get_all_active_group_names,
)
from settings import (
    LOGGING,
)
import time
from typing import (
    NamedTuple,
)
from vulnerabilities.domain.core import (
    remove_vulnerability,
)

logging.config.dictConfig(LOGGING)

# Constants
LOGGER = logging.getLogger(__name__)
LOGGER_CONSOLE = logging.getLogger("console")


class Context(NamedTuple):
    headers: dict[str, str]
    loaders: Dataloaders


async def process_group(
    context: Context, loaders: Dataloaders, group_name: str
) -> None:
    findings = await loaders.group_drafts_and_findings.load(group_name)
    fin_079 = [fin for fin in findings if fin.title.startswith("079")]
    if fin_079:
        vulnerabilities = await loaders.finding_vulnerabilities.load(
            fin_079[0].id
        )
        vulns_to_delete = tuple(
            vulnerability
            for vulnerability in vulnerabilities
            if vulnerability.skims_method
            == "python.pip_incomplete_dependencies_list"
        )
        if vulns_to_delete:
            if len(vulns_to_delete) == len(vulnerabilities):
                try:
                    await remove_finding_legacy(
                        context=context,
                        finding_id=fin_079[0].id,
                        justification=StateRemovalJustification.NOT_REQUIRED,
                        user_email="lsaavedra@fluidattacks.com",
                    )
                except FindingNotFound:
                    pass
            else:
                await collect(
                    tuple(
                        remove_vulnerability(
                            loaders,
                            fin_079[0].id,
                            vuln.id,
                            justification=(
                                VulnerabilityStateReason.DUPLICATED
                            ),
                            email="lsaavedra@fluidattacks.com",
                            source=Source.MACHINE,
                            include_closed_vuln=True,
                        )
                        for vuln in vulns_to_delete
                    ),
                    workers=10,
                )

            LOGGER_CONSOLE.info(
                "Group processed",
                extra={
                    "extra": {
                        "group_name": group_name,
                        "all_vulnerabilities": len(vulnerabilities),
                    }
                },
            )


async def main() -> None:  # noqa: MC0001
    loaders: Dataloaders = get_new_context()
    groups = await get_all_active_group_names(loaders)
    count = 0
    context: Context = Context(headers={}, loaders=loaders)
    for group_name in groups:
        count += 1
        await process_group(context, loaders, group_name)


if __name__ == "__main__":
    execution_time = time.strftime(
        "Execution Time:    %Y-%m-%d at %H:%M:%S %Z"
    )
    run(main())
    finalization_time = time.strftime(
        "Finalization Time: %Y-%m-%d at %H:%M:%S %Z"
    )
    print(f"{execution_time}\n{finalization_time}")
