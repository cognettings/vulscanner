# pylint: disable=import-error
from back.test.functional.src.utils import (
    get_graphql_result,
)
from dataloaders import (
    get_new_context,
)
from typing import (
    Any,
)


async def get_result(
    *,
    user: str,
    vulnerability: str,
) -> dict[str, Any]:
    query: str = f"""
        query {{
            vulnerability(uuid: "{vulnerability}") {{
                closingDate
                state
                cycles
                efficacy
                findingId
                hacker
                historicState{{
                    date
                    hacker
                    source
                    status
                }}
                historicTreatmentStatus{{
                    acceptanceDate
                    assigned
                    date
                    treatment
                    user
                }}
                historicTreatmentConnection {{
                    edges {{
                        node{{
                            acceptanceDate
                            assigned
                            date
                            treatment
                            user
                        }}
                    }}
                }}
                id
                lastReattackDate
                lastReattackRequester
                lastRequestedReattackDate
                lastStateDate
                lastTreatmentDate
                lastVerificationDate
                remediated
                reportDate
                rootNickname
                severity
                severityTemporalScore
                severityVector
                source
                specific
                tag
                tags
                treatmentAcceptanceDate
                treatmentAcceptanceStatus
                treatmentAssigned
                treatmentChanges
                treatmentJustification
                treatmentUser
                treatmentStatus
                verification
                vulnerabilityType
                where
                zeroRisk
            }}
        }}
    """
    data: dict[str, str] = {
        "query": query,
    }
    return await get_graphql_result(
        data,
        stakeholder=user,
        context=get_new_context(),
    )
