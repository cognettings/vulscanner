from . import (
    get_result,
)
import pytest
from typing import (
    Any,
)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("vulnerability")
@pytest.mark.parametrize(
    ["email"],
    [
        ["admin@gmail.com"],
        ["hacker@gmail.com"],
        ["reattacker@gmail.com"],
        ["user@gmail.com"],
        ["user_manager@gmail.com"],
        ["vulnerability_manager@gmail.com"],
        ["resourcer@gmail.com"],
        ["reviewer@gmail.com"],
        ["customer_manager@fluidattacks.com"],
        ["service_forces@gmail.com"],
    ],
)
async def test_get_vulnerability(
    populate: bool,
    email: str,
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vulnerability_id: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    hacker: str = "test1@gmail.com"
    expected_output: dict[str, Any] = {
        "finding_id": finding_id,
        "UUID": vulnerability_id,
        "hacker": hacker,
        "closing_date": None,
        "state": "VULNERABLE",
        "cycles": 1,
        "efficacy": 0.0,
        "historic_state": [
            {
                "date": "2018-04-07 19:45:11",
                "hacker": hacker,
                "source": "asm",
                "status": "VULNERABLE",
            },
        ],
        "historic_treatment_status": [
            {"date": "2018-04-07 17:45:11", "treatment": "UNTREATED"},
            {
                "assigned": "anything@gmail.com",
                "user": "user_manager@gmail.com",
            },
        ],
        "historic_verification": [
            {
                "date": "2018-04-08 19:45:11",
                "status": "REQUESTED",
            },
        ],
        "last_reattack_date": None,
        "last_reattack_requester": "test1@gmail.com",
        "last_requested_reattack_date": "2018-04-07 19:45:11",
        "last_state_date": "2018-04-07 19:45:11",
        "last_treatment_date": "2018-04-07 19:45:12",
        "last_verification_date": "2018-04-07 19:45:11",
        "report_date": "2018-04-07 19:45:11",
        "root_nickname": "test_root",
        "severity": "1000",
        "severityTemporalScore": 4.1,
        "severityVector": "CVSS:3.1/AV:P/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/"
        "E:P/RL:O/CR:L/AR:H/MAV:N/MAC:H/MPR:H/MUI:R/MS:U/MC:L/MA:L",
        "specific": "9999",
        "tag": "abc123, xyz890",
        "tags": ["abc123", "xyz890"],
        "treatment_acceptance_date": "2018-04-07 19:45:15",
        "treatment_acceptance_status": None,
        "treatment_assigned": "anything@gmail.com",
        "treatment_changes": 1,
        "treatment_justification": "justification",
        "treatment_user": "user_manager@gmail.com",
        "treatmentStatus": "ACCEPTED",
        "verification": "Requested",
        "vuln_type": "ports",
        "where": "192.168.1.20",
        "zeroRisk": [
            {
                "modified_by": "test@gmail.com",
                "modified_date": "2018-04-08T00:45:11+00:00",
                "comment_id": "123456",
                "status": "Confirmed",
            },
        ],
    }
    result: dict[str, Any] = await get_result(
        user=email,
        vulnerability=vulnerability_id,
    )
    assert (
        result["data"]["vulnerability"]["findingId"]
        == expected_output["finding_id"]
    )
    assert result["data"]["vulnerability"]["id"] == expected_output["UUID"]
    assert (
        result["data"]["vulnerability"]["closingDate"]
        == expected_output["closing_date"]
    )
    assert (
        result["data"]["vulnerability"]["cycles"] == expected_output["cycles"]
    )
    assert (
        result["data"]["vulnerability"]["efficacy"]
        == expected_output["efficacy"]
    )
    assert (
        result["data"]["vulnerability"]["lastReattackDate"]
        == expected_output["last_reattack_date"]
    )
    assert (
        result["data"]["vulnerability"]["lastReattackRequester"]
        == expected_output["last_reattack_requester"]
    )
    assert (
        result["data"]["vulnerability"]["lastRequestedReattackDate"]
        == expected_output["last_requested_reattack_date"]
    )
    assert (
        result["data"]["vulnerability"]["lastStateDate"]
        == expected_output["last_state_date"]
    )
    assert (
        result["data"]["vulnerability"]["lastTreatmentDate"]
        == expected_output["last_treatment_date"]
    )
    assert (
        result["data"]["vulnerability"]["lastVerificationDate"]
        == expected_output["last_verification_date"]
    )
    assert (
        result["data"]["vulnerability"]["historicState"]
        == expected_output["historic_state"]
    )
    assert (
        result["data"]["vulnerability"]["historicTreatmentStatus"][0][
            "treatment"
        ]
        == expected_output["historic_treatment_status"][0]["treatment"]
    )
    assert (
        result["data"]["vulnerability"]["historicTreatmentStatus"][-1][
            "assigned"
        ]
        == expected_output["historic_treatment_status"][-1]["assigned"]
    )
    assert (
        result["data"]["vulnerability"]["historicTreatmentStatus"][-1]["user"]
        == expected_output["historic_treatment_status"][-1]["user"]
    )
    assert (
        result["data"]["vulnerability"]["historicTreatmentStatus"][-1][
            "acceptanceDate"
        ]
        is not None
    )
    assert (
        result["data"]["vulnerability"]["historicTreatmentConnection"][
            "edges"
        ][0]["node"]["treatment"]
        == expected_output["historic_treatment_status"][0]["treatment"]
    )
    assert (
        result["data"]["vulnerability"]["historicTreatmentConnection"][
            "edges"
        ][-1]["node"]["assigned"]
        == expected_output["historic_treatment_status"][-1]["assigned"]
    )
    assert (
        result["data"]["vulnerability"]["historicTreatmentConnection"][
            "edges"
        ][-1]["node"]["user"]
        == expected_output["historic_treatment_status"][-1]["user"]
    )
    assert (
        result["data"]["vulnerability"]["historicTreatmentConnection"][
            "edges"
        ][-1]["node"]["acceptanceDate"]
        is not None
    )
    assert (
        result["data"]["vulnerability"]["treatmentAcceptanceDate"]
        == expected_output["treatment_acceptance_date"]
    )
    assert (
        result["data"]["vulnerability"]["treatmentAcceptanceStatus"]
        == expected_output["treatment_acceptance_status"]
    )
    assert (
        result["data"]["vulnerability"]["treatmentAssigned"]
        == expected_output["treatment_assigned"]
    )
    assert (
        result["data"]["vulnerability"]["treatmentChanges"]
        == expected_output["treatment_changes"]
    )
    assert (
        result["data"]["vulnerability"]["treatmentJustification"]
        == expected_output["treatment_justification"]
    )
    assert (
        result["data"]["vulnerability"]["treatmentUser"]
        == expected_output["treatment_user"]
    )
    assert (
        result["data"]["vulnerability"]["treatmentStatus"]
        == expected_output["treatmentStatus"]
    )
    assert (
        result["data"]["vulnerability"]["vulnerabilityType"]
        == expected_output["vuln_type"]
    )
    assert result["data"]["vulnerability"]["where"] == expected_output["where"]
    assert (
        result["data"]["vulnerability"]["specific"]
        == expected_output["specific"]
    )
    assert result["data"]["vulnerability"]["state"] == expected_output["state"]
    assert result["data"]["vulnerability"]["remediated"]
    assert (
        result["data"]["vulnerability"]["reportDate"]
        == expected_output["report_date"]
    )
    assert (
        result["data"]["vulnerability"]["severity"]
        == expected_output["severity"]
    )
    assert (
        result["data"]["vulnerability"]["severityTemporalScore"]
        == expected_output["severityTemporalScore"]
    )
    assert (
        result["data"]["vulnerability"]["severityVector"]
        == expected_output["severityVector"]
    )
    assert (
        result["data"]["vulnerability"]["source"]
        == expected_output["historic_state"][-1]["source"]
    )
    assert result["data"]["vulnerability"]["tag"] == expected_output["tag"]
    assert result["data"]["vulnerability"]["tags"] == expected_output["tags"]
    assert (
        result["data"]["vulnerability"]["verification"]
        == expected_output["verification"]
    )
    assert (
        result["data"]["vulnerability"]["rootNickname"]
        == expected_output["root_nickname"]
    )
    assert (
        result["data"]["vulnerability"]["zeroRisk"]
        == expected_output["zeroRisk"][-1]["status"]
    )
