# pylint: disable=import-error
from back.test.functional.src.utils import (
    get_graphql_result,
)
from dataloaders import (
    get_new_context,
)
from typing import (
    Any,
)


async def get_group_vulnerabilities_summary(
    *,
    user: str,
    group_name: str,
    state_status: str | None = None,
    treatment_status: str | None = None,
    verification_status: str | None = None,
) -> dict:
    query: str = """
        query GetGroupVulnerabilities(
            $after: String
            $first: Int
            $groupName: String!
            $stateStatus: String
            $treatment: String
            $verificationStatus: String
        ) {
            group(groupName: $groupName) {
                name
                findings {
                    id
                    treatmentSummary {
                        untreated
                    }
                }
                vulnerabilities(
                    stateStatus: $stateStatus,
                    treatment: $treatment,
                    after: $after,
                    first: $first
                    verificationStatus: $verificationStatus
                ) {
                    edges {
                        node {
                            state
                            treatmentStatus
                            verification
                            where
                        }
                    }
                    pageInfo {
                        endCursor
                        hasNextPage
                    }
                    total
                }
            }
        }
    """

    data: dict = {
        "query": query,
        "variables": {
            "first": 100,
            "groupName": group_name,
            "stateStatus": state_status,
            "treatment": treatment_status,
            "verificationStatus": verification_status,
        },
    }

    return await get_graphql_result(
        data,
        stakeholder=user,
        context=get_new_context(),
    )


async def get_result(
    *,
    user: str,
    finding_id: str,
    vuln_id: str,
    bts: str = "",
    severity: int = 0,
    tag: str = "",
) -> dict[str, Any]:
    query: str = f"""
        mutation {{
            updateVulnerabilityTreatment (
                findingId: "{finding_id}"
                vulnerabilityId: "{vuln_id}"
                externalBugTrackingSystem: "{bts}"
                tag: "{tag}"
                severity: {severity}
            ) {{
            success
            }}
        }}
    """
    data: dict[str, Any] = {"query": query}
    return await get_graphql_result(
        data,
        stakeholder=user,
        context=get_new_context(),
    )
