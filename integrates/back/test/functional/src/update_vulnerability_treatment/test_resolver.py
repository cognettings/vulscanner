from . import (
    get_group_vulnerabilities_summary,
    get_result,
)
from custom_exceptions import (
    InvalidFieldLength,
)
from dataloaders import (
    get_new_context,
)
import pytest
from typing import (
    Any,
)
from unreliable_indicators.enums import (
    EntityDependency,
)
from unreliable_indicators.operations import (
    update_unreliable_indicators_by_deps,
)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ("email", "custom_severity", "tag"),
    [
        ("user@gmail.com", 1, "tag2"),
        ("hacker@gmail.com", 10, "tag3"),
        ("user_manager@gmail.com", 100, "tag4"),
        ("vulnerability_manager@gmail.com", 500, "tag5"),
    ],
)
async def test_update_vulnerability_treatment(
    populate: bool, email: str, custom_severity: int, tag: str
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vuln_id: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"

    loaders = get_new_context()
    vulnerability = await loaders.vulnerability.load(vuln_id)
    assert vulnerability
    assert (
        not vulnerability.custom_severity
        or vulnerability.custom_severity != custom_severity
    )
    assert not vulnerability.tags or tag not in vulnerability.tags

    # FP: local testing
    external_bts: str = "http://test"  # NOSONAR
    result: dict[str, Any] = await get_result(
        user=email,
        finding_id=finding_id,
        vuln_id=vuln_id,
        bts=external_bts,
        severity=custom_severity,
        tag=tag,
    )

    assert "errors" not in result
    assert "success" in result["data"]["updateVulnerabilityTreatment"]
    assert result["data"]["updateVulnerabilityTreatment"]["success"]

    loaders.vulnerability.clear(vuln_id)
    updated = await loaders.vulnerability.load(vuln_id)
    assert updated
    assert updated.bug_tracking_system_url == external_bts
    assert updated.custom_severity == custom_severity
    assert updated.tags
    assert tag in updated.tags
    assert updated.tags == sorted(updated.tags)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ["email"],
    [
        ["user@gmail.com"],
    ],
)
async def test_update_vulnerability_treatment_clear_fields(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vuln_id: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    # FP: local testing
    external_bts: str = "http://test"  # NOSONAR

    loaders = get_new_context()
    vulnerability = await loaders.vulnerability.load(vuln_id)
    assert vulnerability
    assert vulnerability.bug_tracking_system_url == external_bts
    assert vulnerability.custom_severity == 500
    assert vulnerability.tags == ["tag1", "tag2", "tag3", "tag4", "tag5"]

    result: dict[str, Any] = await get_result(
        user=email,
        finding_id=finding_id,
        vuln_id=vuln_id,
    )

    assert "errors" not in result
    assert "success" in result["data"]["updateVulnerabilityTreatment"]
    assert result["data"]["updateVulnerabilityTreatment"]["success"]

    loaders.vulnerability.clear(vuln_id)
    updated = await loaders.vulnerability.load(vuln_id)
    assert updated
    assert updated.bug_tracking_system_url is None
    assert updated.custom_severity is None
    assert updated.tags == vulnerability.tags


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ["email"],
    [
        ["admin@gmail.com"],
        ["reattacker@gmail.com"],
        ["customer_manager@fluidattacks.com"],
    ],
)
async def test_update_vulnerability_treatment_fail(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vuln_uuid: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    # FP: local testing
    external_bts: str = "http://test"  # NOSONAR
    result: dict[str, Any] = await get_result(
        user=email, finding_id=finding_id, vuln_id=vuln_uuid, bts=external_bts
    )
    assert "errors" in result
    assert result["errors"][0]["message"] == "Access denied"


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ["email"],
    [
        ["user@gmail.com"],
        ["hacker@gmail.com"],
    ],
)
async def test_update_vulnerability_treatmenterability_fail_1(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vuln_uuid: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    tag: str = "inputthatismorethanthirtycharacter"
    result: dict[str, Any] = await get_result(
        user=email, finding_id=finding_id, vuln_id=vuln_uuid, bts="", tag=tag
    )
    assert "errors" in result
    assert result["errors"][0]["message"] == str(InvalidFieldLength())


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ["email"],
    [
        ["user@gmail.com"],
    ],
)
async def test_get_same_info_in_normal_and_feature_preview(
    populate: bool, email: str
) -> None:
    assert populate
    group_name: str = "group1"

    normal_and_feature_result: dict = await get_group_vulnerabilities_summary(
        user=email,
        group_name=group_name,
        state_status="VULNERABLE",
        treatment_status="UNTREATED",
    )

    untreated_by_finding_list_1 = list(
        map(
            lambda f: f["treatmentSummary"]["untreated"],
            normal_and_feature_result["data"]["group"]["findings"],
        )
    )

    total_untreated_1 = sum(untreated_by_finding_list_1)
    total_untreated_2 = int(
        normal_and_feature_result["data"]["group"]["vulnerabilities"]["total"]
    )
    assert total_untreated_1 != total_untreated_2

    # Updating vulnerability treatments
    await update_unreliable_indicators_by_deps(
        EntityDependency.update_vulnerabilities_treatment,
        finding_ids=["3c475384-834c-47b0-ac71-a41a022e401c"],
        vulnerability_ids=[],
    )

    updated_result: dict = await get_group_vulnerabilities_summary(
        user=email,
        group_name=group_name,
        state_status="VULNERABLE",
        treatment_status="UNTREATED",
    )

    untreated_by_finding_list_1 = list(
        map(
            lambda f: f["treatmentSummary"]["untreated"],
            updated_result["data"]["group"]["findings"],
        )
    )

    total_untreated_1 = sum(untreated_by_finding_list_1)
    total_untreated_2 = int(
        updated_result["data"]["group"]["vulnerabilities"]["total"]
    )

    assert total_untreated_1 == total_untreated_2
