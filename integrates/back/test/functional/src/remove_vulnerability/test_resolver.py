# pylint: disable=import-error
from . import (
    get_result,
)
from back.test.functional.src.finding import (
    get_result as get_finding,
)
from dataloaders import (
    get_new_context,
)
from db_model.findings.enums import (
    FindingStatus,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateStatus,
)
from decimal import (
    Decimal,
)
import pytest
from typing import (
    Any,
)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("remove_vulnerability")
@pytest.mark.parametrize(
    ["email"],
    [
        ["admin@fluidattacks.com"],
    ],
)
async def test_remove_vulnerability(populate: bool, email: str) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vulnerability_id: str = "4dbc03e0-4cfc-4b33-9b70-bb7566c460bd"

    loaders = get_new_context()
    vulnerability = await loaders.vulnerability.load(vulnerability_id)
    assert vulnerability
    assert vulnerability.state.status == VulnerabilityStateStatus.VULNERABLE

    finding_data_1 = await loaders.finding.load(finding_id)
    assert finding_data_1 is not None
    indicators = finding_data_1.unreliable_indicators
    assert indicators.unreliable_status == FindingStatus.VULNERABLE
    assert indicators.open_vulnerabilities == 1
    assert indicators.max_open_severity_score == Decimal("4.1")
    assert indicators.oldest_vulnerability_report_date
    assert indicators.newest_vulnerability_report_date
    assert indicators.treatment_summary.untreated == 1
    assert indicators.treatment_summary.in_progress == 0
    assert indicators.treatment_summary.accepted == 0
    assert indicators.treatment_summary.accepted_undefined == 0

    result: dict[str, Any] = await get_result(
        user=email, finding=finding_id, vulnerability=vulnerability_id
    )
    assert "errors" not in result
    assert "success" in result["data"]["removeVulnerability"]
    assert result["data"]["removeVulnerability"]

    loaders = get_new_context()
    vulnerability = await loaders.vulnerability.load(vulnerability_id)
    assert vulnerability
    assert vulnerability.state.status == VulnerabilityStateStatus.DELETED

    result = await get_finding(user=email, finding_id=finding_id)
    assert result["data"]["finding"]["vulnerabilitiesConnection"] == {
        "edges": [],
        "pageInfo": {
            "endCursor": "bnVsbA==",
            "hasNextPage": False,
        },
    }

    loaders.finding.clear(finding_id)
    finding_data_2 = await loaders.finding.load(finding_id)
    assert finding_data_2 is not None
    indicators = finding_data_2.unreliable_indicators
    assert indicators.unreliable_status == FindingStatus.DRAFT
    assert indicators.open_vulnerabilities == 0
    assert indicators.max_open_severity_score == Decimal("0.0")
    assert indicators.oldest_vulnerability_report_date is None
    assert indicators.newest_vulnerability_report_date is None
    assert indicators.treatment_summary.untreated == 0
    assert indicators.treatment_summary.in_progress == 0
    assert indicators.treatment_summary.accepted == 0
    assert indicators.treatment_summary.accepted_undefined == 0


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("remove_vulnerability")
@pytest.mark.parametrize(
    ["email"],
    [
        ["hacker@gmail.com"],
        ["reattacker@gmail.com"],
    ],
)
async def test_remove_vulnerability_fail(populate: bool, email: str) -> None:
    assert populate
    finding_id: str = "475041514"
    vulnerability_id: str = "c99e0bd7-23e0-47b7-801c-50f9f8b585b0"
    result: dict[str, Any] = await get_result(
        user=email, finding=finding_id, vulnerability=vulnerability_id
    )
    assert "errors" in result
    assert result["errors"][0]["message"] == "Access denied"
