from back.test.unit.src.utils import (
    create_dummy_info,
    create_dummy_simple_session,
    get_module_at_test,
)
from custom_exceptions import (
    InvalidPath,
    InvalidSchema,
)
import pytest
from unittest.mock import (
    MagicMock,
    patch,
)
from vulnerability_files.domain import (
    _format_where,
    validate_file_schema,
)

MODULE_AT_TEST = get_module_at_test(file_path=__file__)

pytestmark = [
    pytest.mark.asyncio,
]


def test_format_where() -> None:
    where = "C:\\path\\to\\my\\file.txt"
    expected_two = (
        '{"msg": "Exception - Error in path value", '
        '"values": "C:\\\\path\\\\to\\\\my\\\\file.txt"}'
    )
    with pytest.raises(InvalidPath) as exc_info:
        _format_where("lines", where)
    assert str(exc_info.value) == expected_two


@patch(MODULE_AT_TEST + "logs_utils.cloudwatch_log")
async def test_validate_file_schema_invalid(
    mock_logs_utils_cloudwatch_log: MagicMock,
) -> None:
    # Avoid sending logs to Cloudwatch
    mock_logs_utils_cloudwatch_log.return_value = None
    request = create_dummy_simple_session("unittest@fluidattacks.com")
    info = create_dummy_info(request)
    with pytest.raises(InvalidSchema):  # NOQA
        await validate_file_schema("", info)
