from back.test.unit.src.utils import (
    get_mock_response,
    get_mocked_path,
)
import json
import os
import pytest
from starlette.datastructures import (
    UploadFile,
)
from unittest.mock import (
    AsyncMock,
    patch,
)
from vulnerability_files.dal import (
    upload_vuln_file_to_s3,
)

pytestmark = [
    pytest.mark.asyncio,
]


@pytest.mark.parametrize(
    ["file_name"],
    [
        [
            "test-vulns.yaml",
        ],
    ],
)
@patch(get_mocked_path("s3_ops.upload_memory_file"), new_callable=AsyncMock)
async def test_upload_vuln_file_to_s3(
    mock_s3_ops_upload_memory_file: AsyncMock, file_name: str
) -> None:
    mock_s3_ops_upload_memory_file.return_value = get_mock_response(
        get_mocked_path("s3_ops.upload_memory_file"),
        json.dumps([file_name]),
    )
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, "./mock/reports/" + file_name)
    with open(filename, "rb") as btest_file:
        test_file = UploadFile(filename=btest_file.name)
        assert await upload_vuln_file_to_s3(test_file) == "test-vulns.yaml"
    assert mock_s3_ops_upload_memory_file.called is True
