from custom_exceptions import (
    InvalidVulnsNumber,
    VulnNotFound,
)
from custom_utils.datetime import (
    get_utc_now,
)
from custom_utils.vulnerabilities import (
    validate_closed,
    validate_released,
)
from dataloaders import (
    Dataloaders,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateStatus,
)
from graphql import (
    GraphQLResolveInfo,
)
from sessions.domain import (
    get_jwt_content,
)
from vulnerabilities.domain.core import (
    get_by_finding_and_vuln_ids,
)
from vulnerability_files.domain import (
    save_n_update_from_uploaded_vulnerabilities,
)
from vulnerability_files.reattacks import (
    process_reattack_from_uploaded_vulnerabilities,
)
from vulnerability_files.zero_risk import (
    process_zr_in_uploaded_vulnerabilities,
)


async def close_vulnerabilities(
    *,
    loaders: Dataloaders,
    vulnerabilities_ids: set[str],
    finding_id: str,
    info: GraphQLResolveInfo,
) -> set[str]:
    max_number_of_vulns = 150
    if len(vulnerabilities_ids) > max_number_of_vulns:
        raise InvalidVulnsNumber(number_of_vulns=max_number_of_vulns)

    user_data = await get_jwt_content(info.context)
    vulnerabilities = await get_by_finding_and_vuln_ids(
        loaders, finding_id, vulnerabilities_ids
    )
    filtered_vulnerabilities = [
        vuln
        for vuln in process_zr_in_uploaded_vulnerabilities(
            raise_validation=False, vulns_in_db=vulnerabilities
        )
        if vuln is not None
    ]
    if not filtered_vulnerabilities:
        raise VulnNotFound()
    for vulnerability in filtered_vulnerabilities:
        validate_released(vulnerability)
        validate_closed(vulnerability)

    today = get_utc_now()
    closed_filtered_vulnerabilities = [
        vuln._replace(
            state=vuln.state._replace(
                status=VulnerabilityStateStatus.SAFE,
                modified_by=user_data["user_email"],
                modified_date=today,
            )
        )
        for vuln in filtered_vulnerabilities
    ]

    reattacked_vulns = await process_reattack_from_uploaded_vulnerabilities(
        vulns_to_add=closed_filtered_vulnerabilities,
        vulns_in_db=filtered_vulnerabilities,
        finding_id=finding_id,
        user_info=user_data,
        loaders=loaders,
        context=info.context,
    )
    save_and_updated_vulns = await save_n_update_from_uploaded_vulnerabilities(
        auto_approve=False,
        finding_id=finding_id,
        loaders=loaders,
        finding_policy=None,
        raise_validation=True,
        reattacked_vulns=reattacked_vulns,
        user_info=user_data,
        vulns_to_add=closed_filtered_vulnerabilities,
        vulns_in_db=filtered_vulnerabilities,
    )

    return set.union(reattacked_vulns, save_and_updated_vulns[0])
