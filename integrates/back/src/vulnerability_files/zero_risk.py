from collections.abc import (
    Sequence,
)
from custom_exceptions import (
    AlreadyZeroRiskConfirmed,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityZeroRiskStatus,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
)


def process_zr_in_uploaded_vulnerabilities(
    *, raise_validation: bool, vulns_in_db: Sequence[Vulnerability | None]
) -> list[Vulnerability | None]:
    if raise_validation:
        # Validate no uploaded vulns with ZR status
        for vuln_in_db in vulns_in_db:
            if (
                vuln_in_db
                and vuln_in_db.zero_risk is not None
                and vuln_in_db.zero_risk.status
                == VulnerabilityZeroRiskStatus.CONFIRMED
            ):
                raise AlreadyZeroRiskConfirmed(
                    info=(
                        f"Where: {vuln_in_db.state.where}\n"
                        f"Specific: {vuln_in_db.state.specific}"
                    )
                )

    return [
        vuln_in_db
        for vuln_in_db in vulns_in_db
        if not (
            vuln_in_db
            and vuln_in_db.zero_risk is not None
            and vuln_in_db.zero_risk.status
            == VulnerabilityZeroRiskStatus.CONFIRMED
        )
    ]
