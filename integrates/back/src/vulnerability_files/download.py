from .dal import (
    sign_vuln_file_url,
    upload_vuln_file_to_s3,
)
from custom_utils.vulnerabilities import (
    format_vulnerabilities,
)
from dataloaders import (
    Dataloaders,
)
from db_model.roots.types import (
    RootRequest,
)
from db_model.vulnerabilities.types import (
    FindingVulnerabilitiesRequest,
)
from findings.domain.utils import (
    get_finding,
)
from starlette.datastructures import (
    UploadFile,
)
import uuid
from vulnerabilities.types import (
    ToolItem,
)
import yaml


async def get_vulnerabilities_by_type(
    loaders: Dataloaders, finding_id: str
) -> dict[str, list[dict[str, str | ToolItem]]]:
    """Get vulnerabilities group by type."""
    finding = await get_finding(loaders, finding_id)
    vulnerabilities = await loaders.finding_vulnerabilities_released_nzr.load(
        finding_id
    )
    drafts = await loaders.finding_vulnerabilities_draft_c.load_nodes(
        request=FindingVulnerabilitiesRequest(finding_id=finding_id)
    )
    vulnerabilities_roots = await loaders.root.load_many(
        [
            RootRequest(
                group_name=finding.group_name,
                root_id=vulnerability.root_id or "",
            )
            for vulnerability in vulnerabilities + drafts
        ]
    )
    vulnerabilities_formatted = format_vulnerabilities(
        vulnerabilities + drafts, vulnerabilities_roots
    )

    return vulnerabilities_formatted


async def get_vulnerabilities_file(
    loaders: Dataloaders, finding_id: str, group_name: str
) -> str:
    vulnerabilities = await get_vulnerabilities_by_type(loaders, finding_id)
    uploaded_file = UploadFile(
        filename=f"{group_name}-{finding_id}_{str(uuid.uuid4())}.yaml",
        content_type="application/yaml",
    )
    await uploaded_file.write(
        yaml.safe_dump(vulnerabilities, default_flow_style=False)
        .encode("latin1")
        .decode("unicode_escape")
        .encode("utf-8")
    )
    await uploaded_file.seek(0)
    uploaded_file_name = await upload_vuln_file_to_s3(uploaded_file)
    uploaded_file_url = await sign_vuln_file_url(uploaded_file_name)

    return uploaded_file_url
