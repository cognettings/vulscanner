from .payloads.types import (
    SimplePayload,
)
from .schema import (
    MUTATION,
)
from api.types import (
    APP_EXCEPTIONS,
)
from asyncio import (
    sleep,
)
from custom_utils import (
    logs as logs_utils,
)
from dataloaders import (
    Dataloaders,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateReason,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_login,
    require_report_vulnerabilities,
)
from findings import (
    domain as findings_domain,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from sessions import (
    domain as sessions_domain,
)
from typing import (
    Any,
)
from unreliable_indicators.enums import (
    EntityDependency,
)
from unreliable_indicators.operations import (
    update_unreliable_indicators_by_deps,
)
from vulnerabilities import (
    domain as vulns_domain,
)


@MUTATION.field("removeVulnerability")
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_report_vulnerabilities,
)
async def mutate(
    _: None, info: GraphQLResolveInfo, **kwargs: Any
) -> SimplePayload:
    try:
        vuln_id: str = kwargs["id"]
        finding_id: str = kwargs["finding_id"]
        justification = VulnerabilityStateReason[kwargs["justification"]]
        user_data = await sessions_domain.get_jwt_content(info.context)
        user_email = user_data["user_email"]
        loaders: Dataloaders = info.context.loaders
        finding = await findings_domain.get_finding(loaders, finding_id)
        await vulns_domain.remove_vulnerability(
            loaders,
            finding_id,
            vuln_id,
            justification,
            user_email,
        )
        await sleep(0.5)
        await update_unreliable_indicators_by_deps(
            EntityDependency.remove_vulnerability,
            finding_ids=[finding_id],
        )
        logs_utils.cloudwatch_log(
            info.context,
            f"Security: Removed vulnerability: {vuln_id} from "
            f"{finding.group_name} group successfully",
        )
    except APP_EXCEPTIONS:
        logs_utils.cloudwatch_log(
            info.context,
            f"Security: Attempted to remove vulnerability: {vuln_id} from "
            f"{finding.group_name} group",
        )
        raise

    return SimplePayload(success=True)
