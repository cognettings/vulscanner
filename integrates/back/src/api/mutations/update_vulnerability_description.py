from .payloads.types import (
    SimplePayload,
)
from .schema import (
    MUTATION,
)
from api.types import (
    APP_EXCEPTIONS,
)
from custom_utils import (
    logs as logs_utils,
)
from dataloaders import (
    Dataloaders,
)
from db_model.enums import (
    Source,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from sessions import (
    domain as sessions_domain,
)
from typing import (
    Any,
)
from vulnerabilities import (
    domain as vulns_domain,
)
from vulnerabilities.types import (
    VulnerabilityDescriptionToUpdate,
)


@MUTATION.field("updateVulnerabilityDescription")
@concurrent_decorators(require_login, enforce_group_level_auth_async)
async def mutate(
    _parent: None,
    info: GraphQLResolveInfo,
    vulnerability_id: str,
    **kwargs: Any,
) -> SimplePayload:
    try:
        loaders: Dataloaders = info.context.loaders
        user_info: dict[str, str] = await sessions_domain.get_jwt_content(
            info.context
        )
        stakeholder_email: str = user_info["user_email"]
        commit = kwargs["commit"] if "commit" in kwargs else None
        source = Source[kwargs["source"]] if "source" in kwargs else None

        await vulns_domain.update_description(
            loaders=loaders,
            vulnerability_id=vulnerability_id,
            description=VulnerabilityDescriptionToUpdate(
                commit=commit, source=source
            ),
            stakeholder_email=stakeholder_email,
        )
        logs_utils.cloudwatch_log(
            info.context,
            f"Security: Updated description {vulnerability_id} successfully",
        )
    except APP_EXCEPTIONS:
        logs_utils.cloudwatch_log(
            info.context,
            f"Security: Tried to update description in {vulnerability_id}",
        )
        raise

    return SimplePayload(success=True)
