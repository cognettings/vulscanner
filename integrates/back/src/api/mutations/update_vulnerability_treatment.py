from .payloads.types import (
    SimplePayload,
)
from .schema import (
    MUTATION,
)
from custom_utils import (
    logs as logs_utils,
    vulnerabilities as vulns_utils,
)
from dataloaders import (
    Dataloaders,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from vulnerabilities import (
    domain as vulns_domain,
)
from vulnerabilities.domain.utils import (
    format_tags,
)


@MUTATION.field("updateVulnerabilityTreatment")
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
)
async def mutate(  # pylint: disable=too-many-arguments
    _: None,
    info: GraphQLResolveInfo,
    finding_id: str,
    vulnerability_id: str,
    external_bug_tracking_system: str | None = None,
    severity: str | None = None,
    tag: str | None = None,
) -> SimplePayload:
    loaders: Dataloaders = info.context.loaders
    custom_severity = int(severity) if severity else None
    formatted_tags = format_tags(tags=(tag or "").split(","))
    # Perform validations
    vulnerability = await vulns_domain.get_vulnerability(
        loaders, vulnerability_id
    )
    vulns_utils.validate_released(vulnerability)
    await vulns_domain.update_metadata(
        loaders=loaders,
        vulnerability_id=vulnerability_id,
        finding_id=finding_id,
        bug_tracking_system_url=external_bug_tracking_system,
        custom_severity=custom_severity,
        tags_to_append=formatted_tags,
    )
    logs_utils.cloudwatch_log(
        info.context,
        "Security: Updated vulnerability: "
        f"{vulnerability_id} from finding: {finding_id} successfully",
    )

    return SimplePayload(success=True)
