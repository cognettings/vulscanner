from .payloads.types import (
    SimplePayload,
)
from .schema import (
    MUTATION,
)
from custom_utils import (
    logs as logs_utils,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from vulnerabilities import (
    domain as vulns_domain,
)


@MUTATION.field("removeTags")
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
)
async def mutate(
    _: None,
    info: GraphQLResolveInfo,
    finding_id: str,
    vulnerabilities: list[str],
    tag: str = "",
) -> SimplePayload:
    await vulns_domain.remove_vulnerability_tags(
        loaders=info.context.loaders,
        vuln_ids=set(vulnerabilities),
        finding_id=finding_id,
        tag_to_remove=tag,
    )
    logs_utils.cloudwatch_log(info.context, f"Removed tags from {finding_id}")

    return SimplePayload(success=True)
