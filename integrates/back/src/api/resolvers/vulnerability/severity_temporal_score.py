from .schema import (
    VULNERABILITY,
)
from custom_utils import (
    findings as findings_utils,
    vulnerabilities as vulns_utils,
)
from dataloaders import (
    Dataloaders,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
)
from decimal import (
    Decimal,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)


@VULNERABILITY.field("severityTemporalScore")
async def resolve(
    parent: Vulnerability,
    info: GraphQLResolveInfo,
    **_kwargs: None,
) -> Decimal:
    loaders: Dataloaders = info.context.loaders
    finding = await loaders.finding.load(parent.finding_id)
    if (
        finding is None
        or findings_utils.is_deleted(finding)
        or vulns_utils.is_deleted(parent)
    ):
        return Decimal(0)

    if parent.severity_score:
        return parent.severity_score.temporal_score

    return finding.severity_score.temporal_score
