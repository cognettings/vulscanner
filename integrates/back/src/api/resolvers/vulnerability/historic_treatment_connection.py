from .schema import (
    VULNERABILITY,
)
from custom_utils.vulnerabilities import (
    format_vulnerability_treatment_item,
)
from dataloaders import (
    Dataloaders,
)
from db_model.types import (
    Connection,
    Edge,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityHistoricTreatmentRequest,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)


@VULNERABILITY.field("historicTreatmentConnection")
async def resolve(
    parent: Vulnerability,
    info: GraphQLResolveInfo,
    after: str | None = None,
    first: int | None = None,
    **_kwargs: None,
) -> Connection[dict[str, str]]:
    loaders: Dataloaders = info.context.loaders
    connection = await loaders.vulnerability_historic_treatment_c.load(
        VulnerabilityHistoricTreatmentRequest(
            after=after, first=first, id=parent.id, paginate=True
        )
    )

    return Connection[dict[str, str]](
        edges=tuple(
            Edge[dict[str, str]](
                cursor=edge.cursor,
                node=format_vulnerability_treatment_item(
                    edge.node, should_convert=True
                ),
            )
            for edge in connection.edges
        ),
        page_info=connection.page_info,
        total=connection.total,
    )
