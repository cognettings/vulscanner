from .schema import (
    QUERY,
)
from dataloaders import (
    Dataloaders,
)
from db_model.vulnerabilities.constants import (
    RELEASED_FILTER_STATUSES,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    rename_kwargs,
    require_asm,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from vulnerabilities import (
    domain as vulns_domain,
)


@rename_kwargs({"uuid": "vuln_uuid"})
@enforce_group_level_auth_async
async def _get_draft(
    loaders: Dataloaders, _info: GraphQLResolveInfo, **kwargs: str
) -> Vulnerability:
    uuid: str = kwargs["vuln_uuid"]
    return await vulns_domain.get_vulnerability(loaders, uuid)


@QUERY.field("vulnerability")
@rename_kwargs({"uuid": "vuln_uuid"})
@concurrent_decorators(
    require_login, enforce_group_level_auth_async, require_asm
)
@rename_kwargs({"vuln_uuid": "uuid"})
async def resolve(
    _parent: None, info: GraphQLResolveInfo, **kwargs: str
) -> Vulnerability:
    uuid: str = kwargs["uuid"]
    loaders: Dataloaders = info.context.loaders

    vulnerability = await vulns_domain.get_vulnerability(loaders, uuid)
    if vulnerability.state.status in RELEASED_FILTER_STATUSES:
        return vulnerability

    return await _get_draft(loaders, info, **kwargs)
