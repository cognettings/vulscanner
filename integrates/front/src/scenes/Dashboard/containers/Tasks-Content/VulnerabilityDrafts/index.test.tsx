import type { MockedResponse } from "@apollo/client/testing";
import { MockedProvider } from "@apollo/client/testing";
import { PureAbility } from "@casl/ability";
import { render, screen, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import React from "react";
import { MemoryRouter, Route } from "react-router-dom";

import { GET_ME_VULNERABILITY_DRAFTS } from "./queries";

import { VulnerabilityDrafts } from ".";
import { authzPermissionsContext } from "context/authz/config";
import { GET_USER_ORGANIZATIONS_GROUPS } from "scenes/Dashboard/queries";
import { getCache } from "utils/apollo";

describe("todoVulnerabilityDraftsView", (): void => {
  const mocksVulnerabilities: MockedResponse = {
    request: {
      query: GET_ME_VULNERABILITY_DRAFTS,
      variables: {
        first: 100,
        groupName: undefined,
        hacker: undefined,
        stateStatus: "SUBMITTED",
      },
    },
    result: {
      data: {
        me: {
          __typename: "Me",
          userEmail: "test@test.test",
          vulnerabilityDrafts: {
            edges: [
              {
                node: {
                  __typename: "Vulnerability",
                  advisories: null,
                  assigned: "assigned-user-1",
                  externalBugTrackingSystem: null,
                  finding: {
                    id: "",
                    title: "",
                  },
                  findingId: "422286126",
                  groupName: "group1",
                  hacker: "hacker@test.com",
                  historicTreatment: [],
                  id: "89521e9a-b1a3-4047-a16e-15d530dc1340",
                  lastStateDate: "2019-07-05 09:56:40",
                  lastTreatmentDate: "2019-07-05 09:56:40",
                  lastVerificationDate: null,
                  organizationName: "org1",
                  remediated: false,
                  reportDate: null,
                  rootNickname: "https:",
                  severity: "",
                  severityTemporalScore: 2.9,
                  source: "asm",
                  specific: "specific-1",
                  state: "SUBMITTED",
                  stream: "home > blog > articulo",
                  tag: "tag-1, tag-2",
                  technique: "DAST",
                  treatmentAcceptanceDate: "",
                  treatmentAcceptanceStatus: "",
                  treatmentAssigned: "assigned-user-1",
                  treatmentDate: "2019-07-05 09:56:40",
                  treatmentJustification: "test progress justification",
                  treatmentStatus: "ACCEPTED",
                  treatmentUser: "test@test.test",
                  verification: null,
                  vulnerabilityType: "inputs",
                  where: "https://example.com/inputs",
                  zeroRisk: null,
                },
              },
              {
                node: {
                  __typename: "Vulnerability",
                  advisories: null,
                  assigned: "assigned-user-1",
                  externalBugTrackingSystem: null,
                  finding: {
                    id: "",
                    title: "",
                  },
                  findingId: "422286126",
                  groupName: "group2",
                  hacker: "hacker@test.com",
                  historicTreatment: [],
                  id: "6903f3e4-a8ee-4a5d-ac38-fb738ec7e540",
                  lastStateDate: "2019-07-05 09:56:40",
                  lastTreatmentDate: "2019-07-05 09:56:40",
                  lastVerificationDate: null,
                  organizationName: "org1",
                  remediated: false,
                  reportDate: null,
                  rootNickname: "https:",
                  severity: "",
                  severityTemporalScore: 3.9,
                  source: "asm",
                  specific: "specific-3",
                  state: "SUBMITTED",
                  stream: null,
                  tag: "tag-3",
                  technique: "SCR",
                  treatmentAcceptanceDate: "",
                  treatmentAcceptanceStatus: "",
                  treatmentAssigned: "assigned-user-1",
                  treatmentDate: "2019-07-05 09:56:40",
                  treatmentJustification: "test progress justification",
                  treatmentStatus: "IN_PROGRESS",
                  treatmentUser: "test@test.test",
                  verification: null,
                  vulnerabilityType: "lines",
                  where: "https://example.com/tests",
                  zeroRisk: null,
                },
              },
            ],
            pageInfo: {
              endCursor: "bnVsbA==",
              hasNextPage: false,
            },
            total: 2,
          },
        },
      },
    },
  };

  const mocksUserGroups: MockedResponse = {
    request: {
      query: GET_USER_ORGANIZATIONS_GROUPS,
    },
    result: {
      data: {
        me: {
          __typename: "Me",
          organizations: [
            {
              groups: [
                {
                  name: "group1",
                  permissions: ["api_mutations_confirm_vulnerabilities_mutate"],
                  serviceAttributes: ["is_continuous"],
                },
                {
                  name: "group2",
                  permissions: ["api_mutations_confirm_vulnerabilities_mutate"],
                  serviceAttributes: [],
                },
              ],
              name: "orgtest",
            },
          ],
          userEmail: "test@test.test",
        },
      },
    },
  };

  it("should return a function", (): void => {
    expect.hasAssertions();

    expect(typeof VulnerabilityDrafts).toBe("function");
  });

  it("should list location drafts", async (): Promise<void> => {
    expect.hasAssertions();

    const mockedPermissions = new PureAbility<string>([
      { action: "api_mutations_confirm_vulnerabilities_mutate" },
    ]);

    render(
      <MemoryRouter initialEntries={["/todos/location-drafts"]}>
        <authzPermissionsContext.Provider value={mockedPermissions}>
          <MockedProvider
            addTypename={true}
            cache={getCache()}
            mocks={[mocksUserGroups, mocksVulnerabilities]}
          >
            <Route path={"/todos/location-drafts"}>
              <VulnerabilityDrafts />
            </Route>
          </MockedProvider>
        </authzPermissionsContext.Provider>
      </MemoryRouter>
    );

    await waitFor((): void => {
      expect(
        screen.getByRole("link", { name: /group1/iu })
      ).toBeInTheDocument();
    });

    expect(screen.getByText(/add filter/iu)).toBeInTheDocument();

    await userEvent.click(
      screen.getByRole("button", {
        name: /searchfindings\.tabdescription\.validatelocations\.text/iu,
      })
    );

    expect(
      screen.getAllByText(/https:\/\/example\.com\/inputs/iu)[1]
    ).toBeInTheDocument();

    await userEvent.click(
      screen.getByRole("button", { name: /components\.modal\.cancel/iu })
    );
  });
});
