/* eslint-disable camelcase */
import { MockedProvider } from "@apollo/client/testing";
import type { MockedResponse } from "@apollo/client/testing";
import { PureAbility } from "@casl/ability";
import { render, screen, waitFor, within } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import type { FetchMockStatic } from "fetch-mock";
import { GraphQLError } from "graphql";
import React from "react";
import { MemoryRouter, Route } from "react-router-dom";

import { authzPermissionsContext } from "context/authz/config";
import { GET_ORGANIZATION_POLICIES } from "scenes/Dashboard/containers/Organization-Content/PoliciesView/Organization/queries";
import { VulnerabilityPolicies } from "scenes/Dashboard/containers/Organization-Content/PoliciesView/Organization/VulnerabilityPolicies/index";
import {
  ADD_ORGANIZATION_FINDING_POLICY,
  DEACTIVATE_ORGANIZATION_FINDING_POLICY,
  HANDLE_ORGANIZATION_FINDING_POLICY,
} from "scenes/Dashboard/containers/Organization-Content/PoliciesView/Organization/VulnerabilityPolicies/queries";
import { getCache } from "utils/apollo";
import { msgError, msgSuccess } from "utils/notifications";
import { translate } from "utils/translations/translate";

const mockedFetch: FetchMockStatic = fetch as FetchMockStatic & typeof fetch;
const baseUrl: string =
  "https://gitlab.com/api/v4/projects/20741933/repository/files";
const branchRef: string = "trunk";
const vulnsFileId: string =
  "common%2Fcriteria%2Fsrc%2Fvulnerabilities%2Fdata.yaml";
mockedFetch.mock(`${baseUrl}/${vulnsFileId}/raw?ref=${branchRef}`, {
  body: {
    "060": {
      en: {
        description: "",
        impact: "",
        recommendation: "",
        threat: "",
        title: "Insecure exceptions",
      },
      requirements: [],
      score: {
        base: {
          attack_complexity: "",
          attack_vector: "",
          availability: "",
          confidentiality: "",
          integrity: "",
          privileges_required: "",
          scope: "",
          user_interaction: "",
        },
        temporal: {
          exploit_code_maturity: "",
          remediation_level: "",
          report_confidence: "",
        },
      },
    },
  },

  status: 200,
});
const requirementsFileId: string =
  "common%2Fcriteria%2Fsrc%2Frequirements%2Fdata.yaml";
mockedFetch.mock(`${baseUrl}/${requirementsFileId}/raw?ref=${branchRef}`, {
  body: {
    "161": {
      category: "",
      en: {
        description: "",
        summary: `
          The source code
          must have secure default options
          ensuring secure failures
          in the application
          (try, catch/except; default for switches).
        `,
        title: "Define secure default options",
      },
      references: [],
    },
    "359": {
      category: "",
      en: {
        description: "",
        summary: `
          The system should use
          typified exceptions instead of
          generic exceptions.
        `,
        title: "Avoid using generic exceptions",
      },
      references: [],
    },
  },

  status: 200,
});

jest.mock(
  "../../../../../../../utils/notifications",
  (): Record<string, unknown> => {
    const mockedNotifications: Record<string, () => Record<string, unknown>> =
      jest.requireActual("../../../../../../../utils/notifications");
    jest.spyOn(mockedNotifications, "msgError").mockImplementation();
    jest.spyOn(mockedNotifications, "msgSuccess").mockImplementation();

    return mockedNotifications;
  }
);

describe("Organization findings policies view", (): void => {
  const organizationId: string = "ORG#38eb8f25-7945-4173-ab6e-0af4ad8b7ef3";

  const mockQuery: MockedResponse = {
    request: {
      query: GET_ORGANIZATION_POLICIES,
      variables: {
        organizationId,
      },
    },
    result: {
      data: {
        organization: {
          findingPolicies: [
            {
              id: "97ad7167-51aa-4214-a612-16a833df6565",
              lastStatusUpdate: "2021-05-20T15:16:48",
              name: "060. Insecure exceptions",
              status: "SUBMITTED",
              tags: [],
            },
          ],
          inactivityPeriod: 90,
          maxAcceptanceDays: null,
          maxAcceptanceSeverity: 10,
          maxNumberAcceptances: null,
          minAcceptanceSeverity: 0,
          minBreakingSeverity: 3,
          name: "okada",
          vulnerabilityGracePeriod: 2,
        },
      },
    },
  };

  it("should return a function", (): void => {
    expect.hasAssertions();

    expect(typeof VulnerabilityPolicies).toBe("function");
  });

  it("add organization findings policies mutation", async (): Promise<void> => {
    expect.hasAssertions();

    jest.clearAllMocks();

    const mockMutation: MockedResponse = {
      request: {
        query: ADD_ORGANIZATION_FINDING_POLICY,
        variables: {
          name: "060. Insecure exceptions",
          organizationName: "okada",
        },
      },
      result: {
        data: {
          addOrganizationFindingPolicy: {
            success: true,
          },
        },
      },
    };

    render(
      <MemoryRouter initialEntries={["/orgs/okada/policies"]}>
        <MockedProvider cache={getCache()} mocks={[mockMutation, mockQuery]}>
          <Route path={"/orgs/:organizationName/policies"}>
            <VulnerabilityPolicies
              organizationId={organizationId}
              vulnerabilityPolicies={[]}
            />
          </Route>
        </MockedProvider>
      </MemoryRouter>
    );

    await waitFor((): void => {
      expect(
        screen.getByRole("combobox", { name: "name" })
      ).toBeInTheDocument();
    });

    await userEvent.type(
      screen.getByRole("combobox", { name: "name" }),
      "060. Insecure exceptions"
    );
    await userEvent.click(screen.getByRole("button"));
    await waitFor((): void => {
      expect(msgSuccess).toHaveBeenCalledTimes(1);
    });
  });

  it("add organization findings policies mutation message error", async (): Promise<void> => {
    expect.hasAssertions();

    jest.clearAllMocks();

    const mockMutation: MockedResponse = {
      request: {
        query: ADD_ORGANIZATION_FINDING_POLICY,
        variables: {
          name: "060. Insecure exceptions",
          organizationName: "okada",
        },
      },
      result: {
        errors: [
          new GraphQLError(
            "Exception - The finding name policy already exists"
          ),
        ],
      },
    };

    render(
      <MemoryRouter initialEntries={["/orgs/okada/policies"]}>
        <MockedProvider cache={getCache()} mocks={[mockQuery, mockMutation]}>
          <Route path={"/orgs/:organizationName/policies"}>
            <VulnerabilityPolicies
              organizationId={organizationId}
              vulnerabilityPolicies={[
                {
                  action: "",
                  id: "97ad7167-51aa-4214-a612-16a833df6565",
                  lastStatusUpdate: "2021-05-21T06:16:48",
                  name: "060. Insecure exceptions",
                  status: "APPROVED",
                  tags: [],
                },
              ]}
            />
          </Route>
        </MockedProvider>
      </MemoryRouter>
    );

    await waitFor((): void => {
      expect(
        screen.getByRole("combobox", { name: "name" })
      ).toBeInTheDocument();
    });

    await userEvent.type(
      screen.getByRole("combobox", { name: "name" }),
      "060. Insecure exceptions"
    );
    await userEvent.click(screen.getByRole("button"));
    await waitFor((): void => {
      expect(msgError).toHaveBeenCalledWith(
        "organization.tabs.policies.findings.errors.duplicateFinding"
      );
    });
  });

  it("organization finding policy missing handle actions permissions", async (): Promise<void> => {
    expect.hasAssertions();

    jest.clearAllMocks();

    render(
      <MemoryRouter initialEntries={["/orgs/okada/policies"]}>
        <MockedProvider cache={getCache()} mocks={[mockQuery]}>
          <Route path={"/orgs/:organizationName/policies"}>
            <VulnerabilityPolicies
              organizationId={organizationId}
              vulnerabilityPolicies={[
                {
                  action: "",
                  id: "fd882d65-1c25-41c5-9bd1-e3ef5200e7cd",
                  lastStatusUpdate: "2021-05-21T06:58:58",
                  name: "060. Insecure exceptions",
                  status: "SUBMITTED",
                  tags: [],
                },
                {
                  action: "",
                  id: "0b61d5bc-abcc-47e1-9293-f2ff76f4fc17",
                  lastStatusUpdate: "2021-05-21T05:58:58",
                  name: "004. Remote command execution",
                  status: "APPROVED",
                  tags: [],
                },
              ]}
            />
          </Route>
        </MockedProvider>
      </MemoryRouter>
    );
    await waitFor((): void => {
      expect(
        screen.queryByText("004. Remote command execution")
      ).toBeInTheDocument();
    });

    expect(screen.getAllByRole("link")).toHaveLength(2);
    expect(screen.getAllByRole("button")).toHaveLength(1);
  });

  it("organization finding policy handle actions permissions", async (): Promise<void> => {
    expect.hasAssertions();

    jest.clearAllMocks();

    const mockHandleMutation: MockedResponse[] = [
      {
        request: {
          query: HANDLE_ORGANIZATION_FINDING_POLICY,
          variables: {
            findingPolicyId: "923f081c-eae2-4ab7-9c66-36b12fd554d7",
            organizationName: "okada",
            status: "APPROVED",
          },
        },
        result: {
          data: {
            handleOrganizationFindingPolicyAcceptance: {
              success: true,
            },
          },
        },
      },
      mockQuery,
    ];

    const mockDeactivateMutation: MockedResponse[] = [
      {
        request: {
          query: DEACTIVATE_ORGANIZATION_FINDING_POLICY,
          variables: {
            findingPolicyId: "7960b957-0d57-40fb-8053-24f064d68000",
            organizationName: "okada",
          },
        },
        result: {
          data: {
            deactivateOrganizationFindingPolicy: {
              success: true,
            },
          },
        },
      },
      mockQuery,
    ];

    const mockedPermissions = new PureAbility<string>([
      {
        action:
          "api_mutations_handle_organization_finding_policy_acceptance_mutate",
      },
      { action: "api_mutations_deactivate_organization_finding_policy_mutate" },
    ]);

    render(
      <MemoryRouter initialEntries={["/orgs/okada/policies"]}>
        <MockedProvider
          cache={getCache()}
          mocks={[...mockDeactivateMutation, ...mockHandleMutation]}
        >
          <authzPermissionsContext.Provider value={mockedPermissions}>
            <Route path={"/orgs/:organizationName/policies"}>
              <VulnerabilityPolicies
                organizationId={organizationId}
                vulnerabilityPolicies={[
                  {
                    action: "",
                    id: "923f081c-eae2-4ab7-9c66-36b12fd554d7",
                    lastStatusUpdate: "2021-05-21T07:16:48",
                    name: "060. Insecure exceptions",
                    status: "SUBMITTED",
                    tags: [],
                  },
                  {
                    action: "",
                    id: "7960b957-0d57-40fb-8053-24f064d68000",
                    lastStatusUpdate: "2021-05-21T08:58:58",
                    name: "004. Remote command execution",
                    status: "APPROVED",
                    tags: [],
                  },
                ]}
              />
            </Route>
          </authzPermissionsContext.Provider>
        </MockedProvider>
      </MemoryRouter>
    );
    await waitFor((): void => {
      expect(
        screen.queryByText("004. Remote command execution")
      ).toBeInTheDocument();
    });

    expect(screen.getAllByRole("link")).toHaveLength(2);
    expect(
      within(screen.queryAllByRole("row")[1]).queryAllByRole("button")
    ).toHaveLength(4);
    expect(
      within(screen.queryAllByRole("row")[2]).queryAllByRole("button")
    ).toHaveLength(4);

    await userEvent.click(
      within(screen.queryAllByRole("row")[1]).queryAllByRole("button")[0]
    );
    await waitFor((): void => {
      expect(msgSuccess).toHaveBeenCalledWith(
        translate.t(
          "organization.tabs.policies.findings.handlePolicies.success.approved"
        ),
        translate.t("sidebar.newOrganization.modal.successTitle")
      );
    });
    await userEvent.click(
      within(screen.queryAllByRole("row")[2]).getAllByRole("button")[3]
    );
    await waitFor((): void => {
      expect(
        screen.queryByText(
          "organization.tabs.policies.findings.deactivatePolicies.modalTitle"
        )
      ).toBeInTheDocument();
    });
    await userEvent.click(screen.getByText("components.modal.confirm"));
    await waitFor((): void => {
      expect(msgSuccess).toHaveBeenCalledWith(
        translate.t(
          "organization.tabs.policies.findings.deactivatePolicies.success"
        ),
        translate.t("sidebar.newOrganization.modal.successTitle")
      );
    });
  });

  it("organization finding policy handle reject action", async (): Promise<void> => {
    expect.hasAssertions();

    jest.clearAllMocks();

    const mockHandleMutation: MockedResponse[] = [
      {
        request: {
          query: HANDLE_ORGANIZATION_FINDING_POLICY,
          variables: {
            findingPolicyId: "08207180-305f-4f97-b727-ea29d5199590",
            organizationName: "okada",
            status: "REJECTED",
          },
        },
        result: {
          data: {
            handleOrganizationFindingPolicyAcceptance: {
              success: true,
            },
          },
        },
      },
      mockQuery,
    ];

    render(
      <MemoryRouter initialEntries={["/orgs/okada/policies"]}>
        <MockedProvider cache={getCache()} mocks={mockHandleMutation}>
          <authzPermissionsContext.Provider
            value={
              new PureAbility([
                {
                  action:
                    "api_mutations_handle_organization_finding_policy_acceptance_mutate",
                },
                {
                  action:
                    "api_mutations_deactivate_organization_finding_policy_mutate",
                },
              ])
            }
          >
            <Route path={"/orgs/:organizationName/policies"}>
              <VulnerabilityPolicies
                organizationId={organizationId}
                vulnerabilityPolicies={[
                  {
                    action: "",
                    id: "08207180-305f-4f97-b727-ea29d5199590",
                    lastStatusUpdate: "2021-05-21T11:16:48",
                    name: "060. Insecure exceptions",
                    status: "SUBMITTED",
                    tags: [],
                  },
                  {
                    action: "",
                    id: "0e14b989-407d-4c53-a506-25e784378569",
                    lastStatusUpdate: "2021-05-21T11:58:58",
                    name: "004. Remote command execution",
                    status: "APPROVED",
                    tags: [],
                  },
                ]}
              />
            </Route>
          </authzPermissionsContext.Provider>
        </MockedProvider>
      </MemoryRouter>
    );
    await waitFor((): void => {
      expect(
        screen.queryByText("004. Remote command execution")
      ).toBeInTheDocument();
    });

    expect(screen.getAllByRole("link")).toHaveLength(2);
    expect(
      within(screen.queryAllByRole("row")[1]).queryAllByRole("button")
    ).toHaveLength(4);
    expect(
      within(screen.queryAllByRole("row")[2]).queryAllByRole("button")
    ).toHaveLength(4);

    await userEvent.click(
      within(screen.queryAllByRole("row")[1]).queryAllByRole("button")[1]
    );
    await waitFor((): void => {
      expect(msgSuccess).toHaveBeenCalledWith(
        translate.t(
          "organization.tabs.policies.findings.handlePolicies.success.rejected"
        ),
        translate.t("sidebar.newOrganization.modal.successTitle")
      );
    });

    expect(
      screen.queryByText(
        "organization.tabs.policies.findings.deactivatePolicies.modalTitle"
      )
    ).not.toBeInTheDocument();

    await userEvent.click(
      within(screen.queryAllByRole("row")[2]).getAllByRole("button")[3]
    );
    await waitFor((): void => {
      expect(
        screen.queryByText(
          "organization.tabs.policies.findings.deactivatePolicies.modalTitle"
        )
      ).toBeInTheDocument();
    });
    await userEvent.click(screen.getByText("components.modal.cancel"));
    await waitFor((): void => {
      expect(
        screen.queryByText(
          "organization.tabs.policies.findings.deactivatePolicies.modalTitle"
        )
      ).not.toBeInTheDocument();
    });
  });

  it("handle organization findings policies mutation message error", async (): Promise<void> => {
    expect.hasAssertions();

    jest.clearAllMocks();

    const mockMutation: MockedResponse[] = [
      {
        request: {
          query: HANDLE_ORGANIZATION_FINDING_POLICY,
          variables: {
            findingPolicyId: "97ad7167-51aa-4214-a612-16a833df6565",
            organizationName: "okada",
            status: "APPROVED",
          },
        },
        result: {
          errors: [
            new GraphQLError("Exception - Finding name policy not found"),
            new GraphQLError(
              "Exception - This policy has already been reviewed"
            ),
          ],
        },
      },
      mockQuery,
    ];

    render(
      <MemoryRouter initialEntries={["/orgs/okada/policies"]}>
        <MockedProvider cache={getCache()} mocks={mockMutation}>
          <authzPermissionsContext.Provider
            value={
              new PureAbility([
                {
                  action:
                    "api_mutations_handle_organization_" +
                    "finding_policy_acceptance_mutate",
                },
              ])
            }
          >
            <Route path={"/orgs/:organizationName/policies"}>
              <VulnerabilityPolicies
                organizationId={organizationId}
                vulnerabilityPolicies={[
                  {
                    action: "",
                    id: "97ad7167-51aa-4214-a612-16a833df6565",
                    lastStatusUpdate: "2021-05-21T06:16:48",
                    name: "060. Insecure exceptions",
                    status: "SUBMITTED",
                    tags: [],
                  },
                ]}
              />
            </Route>
          </authzPermissionsContext.Provider>
        </MockedProvider>
      </MemoryRouter>
    );

    await waitFor((): void => {
      expect(
        screen.queryByText("060. Insecure exceptions")
      ).toBeInTheDocument();
    });

    expect(screen.getAllByRole("link")).toHaveLength(1);
    expect(
      within(screen.queryAllByRole("row")[1]).queryAllByRole("button")
    ).toHaveLength(4);

    await userEvent.click(
      within(screen.queryAllByRole("row")[1]).queryAllByRole("button")[0]
    );
    await waitFor((): void => {
      expect(msgError).toHaveBeenCalledTimes(2);
    });
  });

  it("add organization findings policies mutation with tags", async (): Promise<void> => {
    expect.hasAssertions();

    jest.clearAllMocks();

    const mockMutation: MockedResponse = {
      request: {
        query: ADD_ORGANIZATION_FINDING_POLICY,
        variables: {
          name: "060. Insecure exceptions",
          organizationName: "okada",
          tags: ["password", "sessions"],
        },
      },
      result: {
        data: {
          addOrganizationFindingPolicy: {
            success: true,
          },
        },
      },
    };

    render(
      <MemoryRouter initialEntries={["/orgs/okada/policies"]}>
        <MockedProvider cache={getCache()} mocks={[mockQuery, mockMutation]}>
          <Route path={"/orgs/:organizationName/policies"}>
            <VulnerabilityPolicies
              organizationId={organizationId}
              vulnerabilityPolicies={[]}
            />
          </Route>
        </MockedProvider>
      </MemoryRouter>
    );

    await waitFor((): void => {
      expect(
        screen.getByRole("combobox", { name: "name" })
      ).toBeInTheDocument();
    });

    expect(screen.getAllByRole("button")).toHaveLength(1);

    await userEvent.type(
      screen.getByRole("combobox", { name: "name" }),
      "060. Insecure exceptions"
    );
    await userEvent.type(
      screen.getByRole("textbox", { name: "tags" }),
      "password{enter}"
    );
    await waitFor((): void => {
      expect(screen.getAllByRole("button")).toHaveLength(2);
    });
    await userEvent.type(
      screen.getByRole("textbox", { name: "tags" }),
      "sessions{enter}"
    );
    // Including + button and removing tags ones
    const numberOfButtons: number = 3;
    await waitFor((): void => {
      expect(screen.getAllByRole("button")).toHaveLength(numberOfButtons);
    });
    await userEvent.click(screen.getAllByRole("button")[2]);
    await waitFor((): void => {
      expect(msgSuccess).toHaveBeenCalledWith(
        "organization.tabs.policies.findings.addPolicies.success",
        "sidebar.newOrganization.modal.successTitle"
      );
    });
  });
});
