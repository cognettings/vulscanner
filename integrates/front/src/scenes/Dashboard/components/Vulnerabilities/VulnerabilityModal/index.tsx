import { useQuery } from "@apollo/client";
import { faLink } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import type { GraphQLError } from "graphql";
import _ from "lodash";
import React, { useCallback, useMemo, useState } from "react";
import { useTranslation } from "react-i18next";
import { MemoryRouter, Route, Switch } from "react-router-dom";

import { GET_VULN_CODE_INFO } from "./queries";
import type { ISnippet, IVulnCodeAttr } from "./types";

import { Button } from "components/Button";
import { Modal } from "components/Modal";
import { Tab, TabContent, Tabs } from "components/Tabs";
import { Tooltip } from "components/Tooltip/index";
import { AdditionalInfo } from "scenes/Dashboard/components/Vulnerabilities/AdditionalInfo";
import { CodeInfo } from "scenes/Dashboard/components/Vulnerabilities/CodeInfo";
import { Status } from "scenes/Dashboard/components/Vulnerabilities/Formatter";
import { SeverityInfo } from "scenes/Dashboard/components/Vulnerabilities/SeverityInfo";
import { Technique } from "scenes/Dashboard/components/Vulnerabilities/TechFormatter/index";
import { TreatmentTracking } from "scenes/Dashboard/components/Vulnerabilities/TrackingTreatment";
import type {
  IUpdateVulnerabilityForm,
  IVulnRowAttr,
  IVulnerabilityModalValues,
} from "scenes/Dashboard/components/Vulnerabilities/types";
import { UpdateDescription } from "scenes/Dashboard/components/Vulnerabilities/UpdateDescription";
import {
  UpdateDescriptionContext,
  defaultValue,
} from "scenes/Dashboard/components/Vulnerabilities/VulnerabilityModal/context";
import { Logger } from "utils/logger";
import { msgError, msgSuccess } from "utils/notifications";

interface IVulnerabilityModal {
  canDisplayHacker: boolean;
  canRemoveVulnsTags: boolean;
  canRequestZeroRiskVuln: boolean;
  canSeeSource: boolean;
  canUpdateVulnsTreatment: boolean;
  clearSelectedVulns?: () => void;
  closeModal: () => void;
  currentRow: IVulnRowAttr;
  findingId: string;
  groupName: string;
  isModalOpen: boolean;
  isFindingReleased: boolean;
  refetchData: () => void;
}

const VulnerabilityModal: React.FC<IVulnerabilityModal> = ({
  canDisplayHacker,
  canRemoveVulnsTags,
  canRequestZeroRiskVuln,
  canSeeSource,
  canUpdateVulnsTreatment,
  clearSelectedVulns,
  closeModal,
  currentRow,
  findingId,
  groupName,
  isModalOpen,
  isFindingReleased,
  refetchData,
}: Readonly<IVulnerabilityModal>): JSX.Element => {
  const { t } = useTranslation();

  const { data } = useQuery<IVulnCodeAttr>(GET_VULN_CODE_INFO, {
    onError: ({ graphQLErrors }): void => {
      graphQLErrors.forEach((error: GraphQLError): void => {
        msgError(t("groupAlerts.errorTextsad"));
        Logger.warning("An error occurred loading the code info", error);
      });
    },
    variables: {
      vulnId: currentRow.id,
    },
  });
  const snippet: ISnippet | null =
    _.isUndefined(data) || _.isEmpty(data) ? null : data.vulnerability.snippet;
  const specific =
    _.isUndefined(data) || _.isEmpty(data) ? "" : data.vulnerability.specific;

  const [treatmentForm, setTreatmentForm] =
    useState<IUpdateVulnerabilityForm>(defaultValue);
  const value = useMemo(
    (): IVulnerabilityModalValues => [treatmentForm, setTreatmentForm],
    [treatmentForm, setTreatmentForm]
  );

  const onCopy = useCallback(async (): Promise<void> => {
    const { clipboard } = navigator;

    if (_.isUndefined(clipboard)) {
      msgError(t("searchFindings.copyUrl.failed"));
    } else {
      await clipboard.writeText(window.location.href);
      msgSuccess(
        t("searchFindings.copyUrl.success"),
        t("searchFindings.copyUrl.successTitle")
      );
    }
  }, [t]);

  const onClose: () => void = useCallback((): void => {
    setTreatmentForm(defaultValue);
    closeModal();
  }, [closeModal]);

  const labels = useMemo(
    (): Record<string, string> => ({
      REJECTED: t("searchFindings.tabVuln.rejected"),
      SAFE: t("searchFindings.tabVuln.closed"),
      SUBMITTED: t("searchFindings.tabVuln.submitted"),
      VULNERABLE: t("searchFindings.tabVuln.open"),
    }),
    [t]
  );

  const otherActions = (): JSX.Element => (
    <Tooltip
      id={"copy_to_clipboard_tooltip"}
      tip={t("searchFindings.copyUrl.tooltip")}
    >
      <Button id={"clipboard-url"} onClick={onCopy} size={"sm"}>
        <FontAwesomeIcon icon={faLink} size={"sm"} />
      </Button>
    </Tooltip>
  );

  return (
    <Modal
      minWidth={700}
      onClose={onClose}
      open={isModalOpen}
      otherActions={otherActions()}
      title={
        <span>
          <Status status={labels[currentRow.state]} />
          <span> </span>
          <Technique technique={currentRow.technique} />
        </span>
      }
    >
      <UpdateDescriptionContext.Provider value={value}>
        {_.isUndefined(currentRow) ? undefined : (
          <MemoryRouter initialEntries={["/details"]} initialIndex={0}>
            <Tabs>
              <Tab
                id={"vulnerabilityDetailsTab"}
                link={"/details"}
                tooltip={t("searchFindings.tabVuln.contentTab.details.tooltip")}
              >
                {t("searchFindings.tabVuln.contentTab.details.title")}
              </Tab>
              <Tab
                id={"vulnerabilitySeverityTab"}
                link={"/severity"}
                tooltip={t(
                  "searchFindings.tabVuln.contentTab.severity.tooltip"
                )}
              >
                {t("searchFindings.tabVuln.contentTab.severity.title")}
              </Tab>
              {_.isNil(snippet) || _.isEmpty(snippet.content) ? undefined : (
                <Tab
                  id={"vulnerabilityCodeTab"}
                  link={"/code"}
                  tooltip={t("searchFindings.tabVuln.contentTab.code.tooltip")}
                >
                  {t("searchFindings.tabVuln.contentTab.code.title")}
                </Tab>
              )}
              {currentRow.state === "VULNERABLE" &&
              isFindingReleased &&
              (canUpdateVulnsTreatment ||
                canRequestZeroRiskVuln ||
                canRemoveVulnsTags) ? (
                <Tab
                  id={"vulnerabilityTreatmentsTab"}
                  link={"/treatments"}
                  tooltip={t(
                    "searchFindings.tabVuln.contentTab.treatments.tooltip"
                  )}
                >
                  {t("searchFindings.tabVuln.contentTab.treatments.title")}
                </Tab>
              ) : undefined}
              {currentRow.state === "VULNERABLE" && isFindingReleased ? (
                <Tab
                  id={"vulnerability-tracking-treatmentsTab"}
                  link={"/trackingtreatments"}
                  tooltip={t(
                    "searchFindings.tabVuln.contentTab.tracking.tooltip"
                  )}
                >
                  {t("searchFindings.tabVuln.contentTab.tracking.title")}
                </Tab>
              ) : undefined}
            </Tabs>
            <TabContent>
              <Switch>
                <Route path={"/details"}>
                  <AdditionalInfo
                    canRetrieveHacker={canDisplayHacker}
                    canSeeSource={canSeeSource}
                    refetchData={refetchData}
                    vulnerability={currentRow}
                  />
                </Route>
                <Route path={"/severity"}>
                  <SeverityInfo
                    findingId={currentRow.findingId}
                    refetchData={refetchData}
                    vulnerabilityId={currentRow.id}
                  />
                </Route>
                <Route path={"/code"}>
                  <CodeInfo snippet={snippet} specific={specific} />
                </Route>
                <Route path={"/treatments"}>
                  <UpdateDescription
                    findingId={findingId}
                    groupName={groupName}
                    handleClearSelected={clearSelectedVulns}
                    handleCloseModal={onClose}
                    refetchData={refetchData}
                    vulnerabilities={[currentRow]}
                  />
                </Route>
                <Route path={"/trackingtreatments"}>
                  <TreatmentTracking vulnId={currentRow.id} />
                </Route>
              </Switch>
            </TabContent>
          </MemoryRouter>
        )}
      </UpdateDescriptionContext.Provider>
    </Modal>
  );
};

export { VulnerabilityModal };
