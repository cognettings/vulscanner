/* eslint-disable react/require-default-props */
import _ from "lodash";
import React from "react";
import { useTranslation } from "react-i18next";

import { Container } from "components/Container";
import { Col, Gap, Row } from "components/Layout";
import { Tooltip } from "components/Tooltip";
import {
  formatState,
  formatStatus,
} from "scenes/Dashboard/containers/Group-Content/GroupFindingsView/utils";

interface IVulnFormatProps {
  specific: string;
  where: string;
  reattack?: string;
  source?: string;
  status?: string;
  treatment?: string;
}

const VulnerabilityFormat: React.FC<IVulnFormatProps> = ({
  where,
  specific,
  status,
  source,
  reattack,
  treatment,
}: IVulnFormatProps): JSX.Element => {
  const { t } = useTranslation();

  return (
    <Container minWidth={"550px"} scroll={"none"}>
      <Row>
        <Col>
          {where}
          {" | "}
          {specific}
        </Col>
      </Row>
      <Row align={"center"} justify={"between"}>
        <Col lg={80} md={80} sm={80}>
          <Gap mh={1}>
            {!_.isUndefined(status) && (
              <Tooltip
                disp={"inline-block"}
                id={"status-tooltip"}
                place={"top"}
                tip={t("group.findings.headersTooltips.status")}
              >
                {formatState(status)}
              </Tooltip>
            )}
            {!_.isUndefined(source) && (
              <Tooltip
                disp={"inline-block"}
                id={"source-tooltip"}
                place={"top"}
                tip={t("group.findings.headersTooltips.source")}
              >
                {formatStatus(source)}
              </Tooltip>
            )}
            {!_.isUndefined(treatment) && (
              <Tooltip
                disp={"inline-block"}
                id={"treatment-tooltip"}
                place={"top"}
                tip={t("group.findings.headersTooltips.treatment")}
              >
                {formatStatus(treatment)}
              </Tooltip>
            )}
            {!_.isUndefined(reattack) && (
              <Tooltip
                disp={"inline-block"}
                id={"reattack-tooltip"}
                place={"top"}
                tip={t("group.findings.headersTooltips.reattack")}
              >
                {formatStatus(reattack)}
              </Tooltip>
            )}
          </Gap>
        </Col>
      </Row>
    </Container>
  );
};

const vulnerabilityFormatter = ({
  specific,
  where,
  reattack,
  source,
  status,
  treatment,
}: IVulnFormatProps): JSX.Element => {
  return (
    <VulnerabilityFormat
      reattack={reattack}
      source={source}
      specific={specific}
      status={status}
      treatment={treatment}
      where={where}
    />
  );
};

export { VulnerabilityFormat, vulnerabilityFormatter };
